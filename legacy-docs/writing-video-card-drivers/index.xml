<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Writing Video Card Drivers In BeOS on Haiku Project</title><link>https://www.haiku-os.org/legacy-docs/writing-video-card-drivers/</link><description>Recent content in Writing Video Card Drivers In BeOS on Haiku Project</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2001-2021 Haiku Inc.</copyright><lastBuildDate>Wed, 26 May 2010 02:02:46 +0000</lastBuildDate><atom:link href="https://www.haiku-os.org/legacy-docs/writing-video-card-drivers/index.xml" rel="self" type="application/rss+xml"/><item><title>Appendix C: References</title><link>https://www.haiku-os.org/legacy-docs/writing-video-card-drivers/appendix-c-references/</link><pubDate>Tue, 30 Apr 2019 04:37:33 +0000</pubDate><guid>https://www.haiku-os.org/legacy-docs/writing-video-card-drivers/appendix-c-references/</guid><description>Appendix C - References Asiliant Technologies: register specs for Chips and Technologies chipsets for laptops: https://en.wikipedia.org/wiki/Chips_and_Technologies. Be Incorporated http://www.beincorporated.com. BeOS API documentation: The Be Book https://www.haiku-os.org/legacy-docs/bebook BeOS R4 Graphics Driver Kit, alpha release 2, 1999-03-30, most likely written by Trey Boudreau. BeOS R5 Personal Edition, updates, and developer tools, free for non-commercial use. BeTVOut: TVout for nVidia cards under BeOS., Rudolf Cornelissen: http://betvout.sourceforge.net. FreeBSD http://www.freebsd.org. Haiku (OpenBeOS): http://www.haiku-os.org. Haiku (OpenBeOS) Matrox driver, Rudolf Cornelissen: http://rudolfs-place.</description></item><item><title>Accelerant</title><link>https://www.haiku-os.org/legacy-docs/writing-video-card-drivers/04-accelerant/</link><pubDate>Sat, 27 Apr 2019 12:48:33 +0000</pubDate><guid>https://www.haiku-os.org/legacy-docs/writing-video-card-drivers/04-accelerant/</guid><description>4. Accelerant As opposed to the kernel driver, the accelerant runs in user space. The accelerant provides functions that are needed to control a graphics card. These functions are used by the app_server and/or applications directly. There are a number of reasons for the graphicsdriver being divided into a kernel- and userspace part: Speed: When controlling the graphics card configuration (so programming the ‘registers’) is done using memory mapped I/O this can be done using pointers.</description></item><item><title>Flags</title><link>https://www.haiku-os.org/legacy-docs/writing-video-card-drivers/05-flags/</link><pubDate>Sat, 27 Apr 2019 12:35:33 +0000</pubDate><guid>https://www.haiku-os.org/legacy-docs/writing-video-card-drivers/05-flags/</guid><description>5 - Flags &amp;lt;td width=&amp;quot;40%&amp;quot; valign=&amp;quot;top&amp;quot;&amp;gt; &amp;lt;b&amp;gt;Chart Legend&amp;lt;/b&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;&amp;lt;b&amp;gt;Name&amp;lt;/b&amp;gt; - The name as defined in the BeOS header files.&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;b&amp;gt;API Construct&amp;lt;/b&amp;gt; - The construct used in classes and functions.&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;b&amp;gt;C&amp;lt;/b&amp;gt; - The command, from API of appserver or accelerant.&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;b&amp;gt;S&amp;lt;/b&amp;gt; - Status, from accelerant to API.&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;b&amp;gt;P&amp;lt;/b&amp;gt; - The app_server is target.&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;b&amp;gt;A&amp;lt;/b&amp;gt; - The accelerant is source or target.&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/td&amp;gt;
A flag is basically a single tray.</description></item><item><title>Conclusion</title><link>https://www.haiku-os.org/legacy-docs/writing-video-card-drivers/07-conclusion/</link><pubDate>Sat, 27 Apr 2019 11:24:15 +0000</pubDate><guid>https://www.haiku-os.org/legacy-docs/writing-video-card-drivers/07-conclusion/</guid><description>7 - Conclusion Writing video drivers is nice to do a while. It is very instructive and (yet) good to do when the whole structure is addressed. Sometimes writing video drivers requires the necessary imagination from the programmer, because it is difficult to test some (combinations) of things or make them testable. Also, the retrieval and understanding of the specifications is sometimes a challenge. Even if there is some documentation from a chip or card manufacturer, you still need to be puzzled regularly.</description></item><item><title>Writing The Driver</title><link>https://www.haiku-os.org/legacy-docs/writing-video-card-drivers/06-writing-the-driver/</link><pubDate>Sat, 27 Apr 2019 11:02:03 +0000</pubDate><guid>https://www.haiku-os.org/legacy-docs/writing-video-card-drivers/06-writing-the-driver/</guid><description>6 - Writing The Video Driver When writing a video driver, a number of issues are important: -A plan is required to indicate the order in which the components can be constructed; -There must be possibilities for testing the driver; And -The driver must be constructed in such a way that its stability is ensured as well as possible. This chapter will deal with these issues. The information given here is an important tool in actually building a video driver.</description></item><item><title>Appendix B: Glossary</title><link>https://www.haiku-os.org/legacy-docs/writing-video-card-drivers/appendix-b-glossary/</link><pubDate>Wed, 26 May 2010 02:34:56 +0000</pubDate><guid>https://www.haiku-os.org/legacy-docs/writing-video-card-drivers/appendix-b-glossary/</guid><description>Appendix B - Glossary
AGP AGP is an extension on the older PCI bus. AGP cards act like a PCI card from software perspective, and were introduced to remove various problems that PCI graphics cards had. AGP have a data bus of 32bits just like the standard PCI bus, but the clockspeed can be much higher. The standard AGP bus speed is 66Mhz whereas PCI is 33Mhz, in addition, the AGP bus can operate at 2x, 4x and 8x mode.</description></item><item><title>Appendix A: Sources Of Information</title><link>https://www.haiku-os.org/legacy-docs/writing-video-card-drivers/appendix-a-sources-of-information/</link><pubDate>Wed, 26 May 2010 02:31:27 +0000</pubDate><guid>https://www.haiku-os.org/legacy-docs/writing-video-card-drivers/appendix-a-sources-of-information/</guid><description>Appendix A - Sources Of Information The information that is needed to develop the driver is in most cases not fully available from the manufacturer. There are however a lot of alternative sources of information available. Possible sources are: The manufacturer. Linux (or freeBSD). The internet. Testing the card to get more specifications. Last but not least, reverse engineering.
In this Supplement we dig some more in these possible sources.</description></item><item><title>Kernel Driver</title><link>https://www.haiku-os.org/legacy-docs/writing-video-card-drivers/03-kernel-driver/</link><pubDate>Wed, 26 May 2010 02:18:31 +0000</pubDate><guid>https://www.haiku-os.org/legacy-docs/writing-video-card-drivers/03-kernel-driver/</guid><description>3 - Kernel Driver The part of the graphics driver that exists in the kernel space serves one purpose, to give the accelerant access to the video card. During video driver startup, the kernel driver 'transfers' as much resources as possible to the accelerant in order to allow the accelerant direct access to the video card, without taxing the kernel any further. Resources and information that can not be transferred are instead accessed through the API of the kernel driver component in simple functions.</description></item><item><title>BeOS API Classes For Video Card Drivers</title><link>https://www.haiku-os.org/legacy-docs/writing-video-card-drivers/02-beos-api/</link><pubDate>Wed, 26 May 2010 02:15:37 +0000</pubDate><guid>https://www.haiku-os.org/legacy-docs/writing-video-card-drivers/02-beos-api/</guid><description>2 - BeOS API Classes For Video Card Drivers For normal use in BeOS the BScreen class from the Interface Kit is of great importance, because it is the main class that will control the driver. For special application categories such as games or multimedia, there are two classes from the Game Kit that are important; BWindowScreen and BDirectWindow. These special classes are used to enable fast direct access to the graphics card memory (the framebuffer).</description></item><item><title>Introduction</title><link>https://www.haiku-os.org/legacy-docs/writing-video-card-drivers/01-introduction/</link><pubDate>Wed, 26 May 2010 02:06:32 +0000</pubDate><guid>https://www.haiku-os.org/legacy-docs/writing-video-card-drivers/01-introduction/</guid><description>1 - Introduction The are a lot of programmers in the world but almost none of them know how to write a driver. Drivers are required for any operating system, in order to talk to the hardware. The lack of knowledgeable driver programmers is a serious problem, and one that I hope to rectify with this document. This document offers practical support on this issue, and is written for people who are interested in knowing basic information about the makeup of a driver and how to write it.</description></item></channel></rss>