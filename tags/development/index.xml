<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>development on Haiku Project</title><link>https://www.haiku-os.org/tags/development/</link><description>Recent content in development on Haiku Project</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2001-2021 Haiku Inc.</copyright><lastBuildDate>Fri, 19 Oct 2018 22:37:00 +0000</lastBuildDate><atom:link href="https://www.haiku-os.org/tags/development/index.xml" rel="self" type="application/rss+xml"/><item><title>Application Patterns</title><link>https://www.haiku-os.org/development/apps-patterns/</link><pubDate>Fri, 19 Oct 2018 22:37:00 +0000</pubDate><guid>https://www.haiku-os.org/development/apps-patterns/</guid><description>There are several common patterns or approaches that you will use when developing Haiku native applications. These are listed below:
These tutorials were created by DarkWyrm unless otherwise stated.
Using the Layout API [PDF] - by waddlesplash Using attributes in your application [PDF] Using attributes in Queries[PDF] Monitoring the File System with the StorageKit [PDF] Registering a new file type [PDF] Using fonts [PDF] Creating a new UI Control [PDF] Using application scripting [PDF] Adding scripting to your applications [PDF] Enabling Drag &amp;amp; Drop [PDF] Exposing re-usable parts of your application with Replicants [PDF] Tutorial Project: Create a text editor [PDF]</description></item><item><title>Prepare for Publishing</title><link>https://www.haiku-os.org/development/apps-prepare/</link><pubDate>Fri, 19 Oct 2018 22:31:00 +0000</pubDate><guid>https://www.haiku-os.org/development/apps-prepare/</guid><description>The are many tasks you should look in to before publishing your new or latest application.
Translating your application using catkeys files Create an icon for your application</description></item><item><title>To Create or Contribute?</title><link>https://www.haiku-os.org/development/apps-tocreate/</link><pubDate>Fri, 19 Oct 2018 22:21:00 +0000</pubDate><guid>https://www.haiku-os.org/development/apps-tocreate/</guid><description>When you spot a need for an application it is tempting to create a new one from scratch. The HaikuArchives contains many projects that were started as an idea, and then fell out of use.
To minimise code waste and maximise re-use, you should consider finding a project that aligns with your goals, and adding your own new feature enhancements to it, rather than default to create Yet Another Application.</description></item><item><title>Setting up a Development Environment</title><link>https://www.haiku-os.org/development/contribute-dev-env/</link><pubDate>Fri, 19 Oct 2018 22:06:00 +0000</pubDate><guid>https://www.haiku-os.org/development/contribute-dev-env/</guid><description>The first thing you'll need to do before writing code in Haiku is to set up a development environment. How you do this will depend on whether you are developing for Haiku within Haiku itself, or from another operating system.
In future we hope to provide step by step guides for each platform. For now though, whichever of the below routes you take, see the summary: Building pre-requisities page for details.</description></item><item><title>An extensive interview with Haiku developer - Paweł Dziepak.</title><link>https://www.haiku-os.org/news/2014-05-10_extensive_interview_haiku_developer_pawe%C5%82_dziepak/</link><pubDate>Sat, 10 May 2014 08:08:17 +0000</pubDate><guid>https://www.haiku-os.org/news/2014-05-10_extensive_interview_haiku_developer_pawe%C5%82_dziepak/</guid><description>&lt;p align="justify">&lt;em>I have interviewed &lt;strong>Paweł Dziepak&lt;/strong> during my private conversation with him, on polish Haiku IRC channel (&lt;strong>#haiku-pl, Freenode&lt;/strong>). We talked for two nights, on 28 and 29 of April 2014. &lt;strong>Paweł&lt;/strong> is known to the community as &lt;strong>pdziepak&lt;/strong>, I am &lt;strong>Premislaus&lt;/strong>. There are many great people involved with &lt;strong>Haiku Project&lt;/strong>, everyone is worth interviewing - I will try to do that in the future (&lt;strong>Ingo&lt;/strong>, &lt;strong>Axel&lt;/strong>, &lt;strong>Stephan&lt;/strong>, beware!). Why &lt;strong>pdziepak&lt;/strong> this time? The big role in the decision played ease of communication, since we are the same nationality, we talk pretty often with each other on IRC channel. Besides, he is an excellent programmer, engineer with vision! Despite his young age, he doesn't do mobile apps, his field of interest are kernel architectures. Unfortunately, he didn't have current photo and he said no when I proposed him to take a stylish one, either selfie or in an elevator.&lt;/em>&lt;/a>
&lt;p align="justify">&lt;em>We had deep and sincere conversation about &lt;strong>Haiku Project and Community&lt;/strong> condition. I also asked him about Open Source movement in general. The part of that I present to you below:&lt;/em>&lt;/a></description></item><item><title>Lesson 22: A First (Bigger) Project</title><link>https://www.haiku-os.org/blog/darkwyrm/2011-12-28_lesson_22_first_bigger_project/</link><pubDate>Wed, 28 Dec 2011 16:58:26 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2011-12-28_lesson_22_first_bigger_project/</guid><description>After a long hiatus, here is the next lesson in the series. Lesson 22 begins a project which will delve deeper into what is involved in developing larger projects in Haiku. In this case, we begin working on a text editor, QuickEdit.
Programming with Haiku, Lesson 22
Lesson 22 Source Code</description></item><item><title>Radeon HD driver status update</title><link>https://www.haiku-os.org/blog/kallisti5/2011-10-18_radeon_hd_driver_status_update/</link><pubDate>Tue, 18 Oct 2011 17:11:39 +0000</pubDate><guid>https://www.haiku-os.org/blog/kallisti5/2011-10-18_radeon_hd_driver_status_update/</guid><description>UPDATE 10/19/2011! Older Radeon HD cards seem fully working minus HDMI. See below.
After several months of hard work (including some redesign of the driver) basic mode setting is working on a small number of Radeon HD cards after r42877. I am using the AMD AtomBIOS parser which executes binary functions on the Radeon HD card to do the real register hitting.
Limitations:
No 2D acceleration - 2D acceleration hasn't been started yet.</description></item><item><title>Programming with Haiku, Lesson 21: Replicants</title><link>https://www.haiku-os.org/blog/darkwyrm/2011-07-06_programming_haiku_lesson_21_replicants/</link><pubDate>Wed, 06 Jul 2011 00:49:49 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2011-07-06_programming_haiku_lesson_21_replicants/</guid><description>Here is a topic that for the longest time as a BeOS/Haiku developer, I had no idea how to do and didn&amp;rsquo;t really feel enthused on the concept of learning. Of course, now all the major platforms have desktop gadgets. Ironically, writing a replicant is really easy if you already know how to write basic Haiku GUI applications already. Find out how in this lesson.
Programming with Haiku, Lesson 21</description></item><item><title>Lesson 20: Drag and Drop</title><link>https://www.haiku-os.org/blog/darkwyrm/2011-05-17_lesson_20_drag_and_drop/</link><pubDate>Tue, 17 May 2011 11:38:02 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2011-05-17_lesson_20_drag_and_drop/</guid><description>In this lesson we seek to understand the part of the Interface Kit which lets us move things around in Tracker using the mouse. We will examine both ways of transferring information from one program to another, both the simple way and the more flexible (and complicated) method.
Programming with Haiku, Lesson 20</description></item><item><title>Lesson 19: Deeper in Application Scripting</title><link>https://www.haiku-os.org/blog/darkwyrm/2011-04-13_lesson_19_deeper_application_scripting/</link><pubDate>Wed, 13 Apr 2011 00:34:41 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2011-04-13_lesson_19_deeper_application_scripting/</guid><description>When we last looked at application scripting in Haiku, we merely scratched the surface. Using the hey command and the basic concepts behind the Haiku scripting model, we were able manipulate running applications to do our bidding. Now we will delve into the C++ code which can do the same thing with much greater flexibility and even implement scripting support in our own GUI controls.
Programming with Haiku, Lesson 19</description></item><item><title>Lesson 18: Application Scripting</title><link>https://www.haiku-os.org/blog/darkwyrm/2011-03-16_lesson_18_application_scripting/</link><pubDate>Wed, 16 Mar 2011 00:30:45 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2011-03-16_lesson_18_application_scripting/</guid><description>After a long hiatus, Lesson #18 is available for your reading pleasure. The topic? Scripting Haiku applications, possibly one of the least understood aspects of the operating system. Learn about hey command, its uses, and even see some of the most English-like bash commands ever. Also see how to make almost any Haiku application answer your beck and call and tinker around the operating system with an updated version of the ScriptWorld demo application, Scripting Explorer.</description></item><item><title>Lesson 17: Writing a New Control, Part I</title><link>https://www.haiku-os.org/blog/darkwyrm/2011-01-31_lesson_17_writing_new_control_part_i/</link><pubDate>Mon, 31 Jan 2011 20:39:12 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2011-01-31_lesson_17_writing_new_control_part_i/</guid><description>This lesson is one of several which delves into the art of control writing for Haiku &amp;ndash; not just a quick-and-dirty hack on an existing one, but writing a new control which rivals existing ones in quality and features. Learn how controls handle drawing themselves and write a basic color display control.
Programming with Haiku, Lesson 17</description></item><item><title>Lesson 16: Fonts</title><link>https://www.haiku-os.org/blog/darkwyrm/2011-01-09_lesson_16_fonts/</link><pubDate>Sun, 09 Jan 2011 13:46:11 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2011-01-09_lesson_16_fonts/</guid><description>Most people think of fonts as merely a means to an end, but in this lesson we will take a crash course in typography and the very basics of displaying text in Haiku. Also included is a review of the second unit, lessons 6 through 15.
Programming With Haiku , Unit 2 Review Programming With Haiku, Lesson 16</description></item><item><title>Lesson 15: Making a New File Type</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-12-12_lesson_15_making_new_file_type/</link><pubDate>Sun, 12 Dec 2010 17:52:41 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-12-12_lesson_15_making_new_file_type/</guid><description>Depending on what kind of projects you write, you may have to create a new file type from time to time, such as a document type for the next Word-killing word processor. While not difficult, making one needs a bit of knowledge from different places in the OS and the API. In our final lesson which focuses on the Storage Kit, we will learn about MIME types, how to show the OS how to automatically identify files of your new type, and more.</description></item><item><title>Lesson 14: I Node What You Did Last Summer</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-11-26_lesson_14_i_node_what_you_did_last_summer/</link><pubDate>Fri, 26 Nov 2010 13:26:32 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-11-26_lesson_14_i_node_what_you_did_last_summer/</guid><description>A holiday treat! In this lesson we continue to work our way through the Storage Kit, learning about one of the lesser-known features of the Haiku API: node monitoring. For those new to Haiku, it notifies programs of changes to the filesystem, such as changes in a name, etc. If you&amp;rsquo;re looking to turn a good Haiku app into a fine one, this is one way to do it.
Programming with Haiku, Lesson 14</description></item><item><title>Lucky Lesson 13: Queries</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-11-18_lucky_lesson_13_queries/</link><pubDate>Thu, 18 Nov 2010 02:05:47 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-11-18_lucky_lesson_13_queries/</guid><description>I&amp;rsquo;m not talking about databases, either. In this lesson, we examine one of the most distinctive features Haiku has: the query. We get a good, long look into the murky depths that are the query&amp;rsquo;s official syntax, Reverse Polish Notation, and a few other weird and wonderful tricks. Enjoy!
Programming with Haiku, Lesson 13</description></item><item><title>Lesson 12: All About Attributes</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-10-26_lesson_12_all_about_attributes/</link><pubDate>Tue, 26 Oct 2010 11:51:10 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-10-26_lesson_12_all_about_attributes/</guid><description>You might think that I took a short vacation, but I&amp;rsquo;ve just been buried in Real Life. You might also be wondering about where lessons 6-11 went. They&amp;rsquo;ll be published later, but you&amp;rsquo;re not missing anything, as they are edits of the last several lessons from Learning to Program with Haiku with an experienced developer in mind. If you&amp;rsquo;ve worked with the previous series, there isn&amp;rsquo;t anything in 6-11 that you haven&amp;rsquo;t seen before &amp;ndash; they&amp;rsquo;re more to make the Programming with Haiku series complete on its own.</description></item><item><title>Programming with Haiku, Lessons 3-5</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-09-30_programming_haiku_lessons_35/</link><pubDate>Thu, 30 Sep 2010 11:54:54 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-09-30_programming_haiku_lessons_35/</guid><description>In an attempt to move on and get on to just the Haiku API, here are the final three lessons on C++. Lesson 3 introduces C++ file streams, formatting and printing using C++ streams, and lightly touches on exceptions. Lesson 4 takes a break from actual coding and spends time on a critical development tool: source control &amp;ndash; what it is, how it is used, and why it is used. Lesson 5 ties together all of the C++ concepts covered in this series with a project.</description></item><item><title>Programming with Haiku, Lesson 2</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-09-23_programming_haiku_lesson_2/</link><pubDate>Thu, 23 Sep 2010 21:07:27 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-09-23_programming_haiku_lesson_2/</guid><description>Lesson #2 in my new series of development tutorials continues with a fast and furious course through the rest of the Standard Template Library with some of the Standard C++ library thrown in for spice. We learn about associative STL containers like map and set and examine the C++ string class.
Programming with Haiku, Lesson 2</description></item><item><title>A New Series of Lessons: Programming with Haiku</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-09-08_new_series_lessons_programming_haiku/</link><pubDate>Wed, 08 Sep 2010 01:21:26 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-09-08_new_series_lessons_programming_haiku/</guid><description>Since I started publishing my Learning to Program with Haiku lesson series back in January, I have, on many occasions, seen comments asking for lessons aimed at current codemonkeys who want to break into development for Haiku. Here begins a new series of programming lessons aimed at people who already have a basic grasp on C++: Programming with Haiku.
The direction of the series is pretty straightforward. First, we&amp;rsquo;ll be spending some time (i.</description></item><item><title>Learning to Program With Haiku Now Available in Book Format</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-07-22_learning_program_haiku_now_available_book_format/</link><pubDate>Thu, 22 Jul 2010 17:21:31 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-07-22_learning_program_haiku_now_available_book_format/</guid><description>The book is finally done! Getting through the proof copy took so much longer than I ever expected. Luckily, right now I&amp;rsquo;m out of town with a lot more time on my hands, so I had a lot more time to be able to sit down and get through it. It has been published through Lulu.com so that a great deal more of the profit from the book goes to me instead of the pockets of a book retailer.</description></item><item><title>Lesson 23: Polish and Packaging Our Project</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-06-23_lesson_23_polish_and_packaging_our_project/</link><pubDate>Wed, 23 Jun 2010 00:41:27 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-06-23_lesson_23_polish_and_packaging_our_project/</guid><description>This lesson finishes up the project that the last two have been about: HaikuFortune, a program which randomly chooses and displays a fortune in a window. It&amp;rsquo;s not a very complicated one, but it exemplifies a reasonably well-coded real-world project. Although it was code complete as of the end of Lesson 22, it was not finished, missing icons and other resources. This concludes the project with adding resources, a basic discussion on source code licensing, and packaging a program for Haiku.</description></item><item><title>Lesson 22: Designing a GUI</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-06-15_lesson_22_designing_gui/</link><pubDate>Tue, 15 Jun 2010 02:02:32 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-06-15_lesson_22_designing_gui/</guid><description>Usability is one of my pet topics. Although less so now that in years past, it is all-too-often ignored or not given enough priority. This lesson scratches the surface from a developer&amp;rsquo;s point of view. I&amp;rsquo;m no usability expert, but I do know a thing or two. This lesson is a must-read for any budding developer, and by the end of it, we will have a good real-world program to show off which is just shy of being ready for a release.</description></item><item><title>Lesson 21: Reading and Writing Files</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-06-11_lesson_21_reading_and_writing_files/</link><pubDate>Fri, 11 Jun 2010 18:04:32 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-06-11_lesson_21_reading_and_writing_files/</guid><description>This lesson continues with delving into the Storage Kit, reading and writing files. We also start writing code for the final project of the Learning to Program With Haiku series which will be developed over the course of several lessons.
Learning to Program With Haiku, Lesson 21</description></item><item><title>Lesson 20: All About Storage</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-06-02_lesson_20_all_about_storage/</link><pubDate>Tue, 01 Jun 2010 23:58:29 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-06-02_lesson_20_all_about_storage/</guid><description>Moving on from exploring the Interface Kit, we turn our attention to the Storage Kit in this lesson. We take a look at the kit from a broad perspective and also begin using some of its many of the classes. We take a break from writing GUI applications and, instead, write a console directory-listing program using C++.
Learning to Program With Haiku, Lesson 20 Source Code: 20ListDir.zip</description></item><item><title>Lesson 19: Resources and Pictures</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-05-25_lesson_19_resources_and_pictures/</link><pubDate>Tue, 25 May 2010 12:32:49 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-05-25_lesson_19_resources_and_pictures/</guid><description>Ten years ago when I first started to learn to write code using BeOS, I had a lot of questions that I couldn&amp;rsquo;t any documentation to give me the answers. Luckily, there was the Be Code Talk mailing list and kindhearted members of the community, like David Sowsy (Animaxo, Vesa Accepted). Resources are one of those things that eluded me. Eventually I figured them out, but Lesson 19 lays some of it out in plain conversation.</description></item><item><title>Lesson 18: Working With Lists</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-05-19_lesson_18_working_lists/</link><pubDate>Wed, 19 May 2010 12:15:01 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-05-19_lesson_18_working_lists/</guid><description>We&amp;rsquo;re starting to get closer to the end of this Learning to Program series. After toying with menus and interface colors in the last lesson, we apply some of the concepts used with menus to get the hang of using list boxes and discover along the way a few bizarre sports that really exist. Games people play. Sheesh.
Learning to Program With Haiku Lesson 18 Sources: 18ListTitle.zip</description></item><item><title>Lesson 17: What's on the Menu?</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-05-10_lesson_17_whats_menu/</link><pubDate>Mon, 10 May 2010 12:26:03 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-05-10_lesson_17_whats_menu/</guid><description>After an unintended wait, Lesson 17 is finally out. We are back to learning about hacking on the Haiku GUI after taking a short C++ language break. Today&amp;rsquo;s topic? Menus. Also in this lesson is some expansion of what we know about messaging and BViews.
Learning to Program With Haiku, Lesson 17 Project: 17MenuColors.zip</description></item><item><title>Lesson 16: Locked and Overloaded</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-04-27_lesson_16_locked_and_overloaded/</link><pubDate>Tue, 27 Apr 2010 00:03:56 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-04-27_lesson_16_locked_and_overloaded/</guid><description>It&amp;rsquo;s strange how a week goes by so quickly now, but it&amp;rsquo;s good motivation to keep writing! This lesson takes a break from hacking the Haiku API to learn a few C++ language concepts needed to continue progress as an aspiring developer. Function overloading and operator overloading are examined in detail. Enjoy! Learning to Program With Haiku, Lesson 16.</description></item><item><title>Lesson 15: The Haiku API at 10,000 Feet</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-04-20_lesson_15_haiku_api_10000_feet/</link><pubDate>Tue, 20 Apr 2010 13:04:38 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-04-20_lesson_15_haiku_api_10000_feet/</guid><description>Having written our first program, Lesson 15 delves further into what writing basic applications are all about, looking at the API and its organization and focusing on an essential: messaging. Also included in this lesson are the finished sources for those who don&amp;rsquo;t want to mess around with typing the project out.
Learning to Program With Haiku, Lesson 15 Lesson 15 Project Sources: ClickMe.zip</description></item><item><title>Lesson 14: Our First GUI Program</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-04-14_lesson_14_our_first_gui_program/</link><pubDate>Tue, 13 Apr 2010 23:47:43 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-04-14_lesson_14_our_first_gui_program/</guid><description>It&amp;rsquo;s about time: our first program which does more than print stuff to the Terminal! Now the real fun begins! Learning to Program With Haiku, Lesson 14.</description></item><item><title>Lesson 13: Programming With Class(es)</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-04-04_lesson_13_programming_classes/</link><pubDate>Sun, 04 Apr 2010 00:48:25 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-04-04_lesson_13_programming_classes/</guid><description>Today we&amp;rsquo;ll be diving headlong into the murky depths of C++ programming: classes and inheritance &amp;ndash; struct&amp;rsquo;s with fancy tricks aplenty. It&amp;rsquo;s also our last lesson before writing our first windowed Haiku program, so get ready and study well. Enjoy! Learning to Program With Haiku, Lesson 13.</description></item><item><title>Lesson 12: OOPs I Did It Again!</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-03-28_lesson_12_oops_i_did_it_again/</link><pubDate>Sun, 28 Mar 2010 11:37:09 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-03-28_lesson_12_oops_i_did_it_again/</guid><description>This would be the only time I will capitalize on a really bad Britney Spears reference. I promise. ;-) This lesson introduces us to the wonderful world of C++ and Object Oriented Programming. It&amp;rsquo;s not terribly code-heavy, so this might be a good time to look over past lessons to make sure you understand concepts pretty well &amp;ndash; it only gets bigger from here. :-)
Also, there is now an archive of all programming lessons at the redesigned version of my old website, now titled DarkWyrm&amp;rsquo;s Library.</description></item><item><title>Lesson 11: More Data Structures and Types</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-03-20_lesson_11_more_data_structures_and_types/</link><pubDate>Sat, 20 Mar 2010 15:58:08 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-03-20_lesson_11_more_data_structures_and_types/</guid><description>This time around, we will be examining some important kinds of data structures and ways to create custom data types, a critical stepping stone in getting to understanding the Haiku API. This is the last C / C++ lesson &amp;ndash; the rest will be C++ only. A couple more lessons and we&amp;rsquo;ll finally be ready to write GUI programs for Haiku! Enjoy! Learning to Program with Haiku, Lesson 11.</description></item><item><title>Lesson 10: More Pointers and the Command Line</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-03-13_lesson_10_more_pointers_and_command_line/</link><pubDate>Sat, 13 Mar 2010 02:19:46 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-03-13_lesson_10_more_pointers_and_command_line/</guid><description>Here it is: Learning to Program with Haiku, Lesson 10. Now we&amp;rsquo;re starting to tie up loose ends before moving on to just C++. In this lesson, we learn more about pointers and kinda-sorta pointers called references, and we examine the basics of getting information from the command line. Also included are the answers to the review questions for Unit 2.</description></item><item><title>Whole Lotta Lessons Goin' On</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-03-06_whole_lotta_lessons_goin/</link><pubDate>Sat, 06 Mar 2010 01:56:50 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-03-06_whole_lotta_lessons_goin/</guid><description>There have been quite a few comments on people being excited about when these start addressing the Haiku API, so I'm going to speed things up a bit. I originally planned on calling this week a Buy One, Get One Free week, but that won't fit now. Why? I had planned on publishing review questions after Lesson #5, but I must have forgotten to upload them, so I'm making them available along with Lessons 8 and 9 and the questions for review after Lesson 9 has been completed.</description></item><item><title>Lesson 7: Losing My Memory</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-02-27_lesson_7_losing_my_memory/</link><pubDate>Sat, 27 Feb 2010 00:56:04 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-02-27_lesson_7_losing_my_memory/</guid><description>It&amp;rsquo;s hard for me to believe that I&amp;rsquo;ve been publishing these mostly-weekly lessons for almost a month and a half. It&amp;rsquo;s been really fun. I hope that those of you reading them have been enjoying reading (and hopefully learning from) them as I have in writing them. This one covers two major topics: memory management and binary math, nothing terribly exciting, but really useful and necessary nonetheless. Learn to Program With Haiku, Lesson 7.</description></item><item><title>Lesson 6: More Loops and Conditions</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-02-20_lesson_6_more_loops_and_conditions/</link><pubDate>Sat, 20 Feb 2010 01:25:42 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-02-20_lesson_6_more_loops_and_conditions/</guid><description>Here marks the beginning of the second unit in my series, &amp;ldquo;Learning to Program With Haiku.&amp;rdquo; Lesson #6 expands on our knowledge of loops and decision-making constructs. Good luck! Learning to Program With Haiku, Lesson 6.</description></item><item><title>Lesson 5: Arrays, Strings, and Pointers</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-02-13_lesson_5_arrays_strings_and_pointers/</link><pubDate>Sat, 13 Feb 2010 02:44:36 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-02-13_lesson_5_arrays_strings_and_pointers/</guid><description>It&amp;rsquo;s that time again, continuing in the journey from No Code to Know Code. This lesson marks the end of the first unit and is somewhere around halfway from complete neophyte to writing &amp;ndash; and understanding &amp;ndash; our first program for Haiku which uses windows and buttons. Learning to Program with Haiku, Lesson 5.</description></item><item><title>Lesson 4: If, For, And, Not, Or</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-02-06_lesson_4_if_and_not_or/</link><pubDate>Fri, 05 Feb 2010 23:34:27 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-02-06_lesson_4_if_and_not_or/</guid><description>Hey, that rhymes even! :P Lesson 4 is now out. Decision-making and repeating instructions are on the agenda for this one, expanding the repetoire of basic skills for writing code. Learning to Program With Haiku, Lesson 4.</description></item><item><title>Programming Lesson 3</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-01-30_programming_lesson_3/</link><pubDate>Sat, 30 Jan 2010 01:32:51 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-01-30_programming_lesson_3/</guid><description>Continued (mis)adventures in programming for all of the curious into the insights of being a codemonkey. In this lesson, we examine the different types of data we can use, a more in-depth look at how to print to the screen, and more! Learning to Program With Haiku, Lesson 3.pdf All previous lessons have received some minor revisions and code is now colored for better readability.</description></item><item><title>Programming Lesson 2</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-01-23_programming_lesson_2/</link><pubDate>Sat, 23 Jan 2010 01:46:41 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-01-23_programming_lesson_2/</guid><description>A week or so later, there is another lesson for download. These are meant to go at a reasonable pace to ensure that the concepts presented are learned well. Enjoy! Learning to Program with Haiku, Lesson 2</description></item><item><title>Calling All Haiku Developer Wannabes</title><link>https://www.haiku-os.org/blog/darkwyrm/2010-01-20_calling_all_haiku_developer_wannabes/</link><pubDate>Wed, 20 Jan 2010 13:50:28 +0000</pubDate><guid>https://www.haiku-os.org/blog/darkwyrm/2010-01-20_calling_all_haiku_developer_wannabes/</guid><description>Have you ever wanted to learn to program for Haiku (or something else) but never had the money or the chance? Has something else gotten in the way? Even though I still don't have any real motivation to write code, right now I have plenty of motivation for writing about code.
I'm going to be publishing online programming lessons whenever I have some time. Usually this will be about one per week, but may happen more or less often on occasion, depending on how my spare time runs.</description></item><item><title>Haiku Finally Gets a Native GCC4 - full story inside!</title><link>https://www.haiku-os.org/news/2009-01-31_haiku_finally_gets_a_native_gcc4_full_story_inside/</link><pubDate>Sun, 01 Feb 2009 04:25:26 +0000</pubDate><guid>https://www.haiku-os.org/news/2009-01-31_haiku_finally_gets_a_native_gcc4_full_story_inside/</guid><description>
&lt;div class="field field-type-text field-field-body">
&lt;div class="field-items">
&lt;div class="field-item odd">
&lt;span class="inline right">&lt;a href="../../files/screenshots/stressing_it.png" rel="lightbox">&lt;img src="http://www.haiku-os.org/files/screenshots/stressing_it.thumbnail.png" alt="Michael's Quad-core compiling GCC4.3.3" title="Michael's Quad-core compiling GCC4.3.3" class="image thumbnail" width="200" height="160">&lt;/a>&lt;span class="caption" style="width: 198px;">&lt;strong>Michael's Quad-core compiling GCC4.3.3&lt;/strong>&lt;/span>&lt;/span>
&lt;p>As many Haiku community members know, one major hurdle that has been making it difficult to port new software to Haiku has been the lack of an up-to-date GCC4 compiler. While a GCC 4.1.2 cross-compiler has been available now for some time, cross-compiling software for a GCC4-built Haiku can be painful and frustrating. What Haiku really needed was a native GCC4 toolchain to run on a GCC4-built Haiku install.&lt;/p>
&lt;p>&lt;strong>That time is now! A native Haiku GCC4.3.3 is now a reality.&lt;/strong>&lt;/p>
&lt;p>Michael Lotz set out to tackle this task and the fruits of his labor have finally been committed to the Haiku repository for all to benefit from.&lt;/p></description></item><item><title>Laying It All Out, Part 1</title><link>https://www.haiku-os.org/documents/dev/laying_it_all_out_part_1/</link><pubDate>Mon, 14 Jul 2008 16:53:11 +0000</pubDate><guid>https://www.haiku-os.org/documents/dev/laying_it_all_out_part_1/</guid><description>
&lt;div class="field field-type-text field-field-body">
&lt;div class="field-items">
&lt;div class="field-item odd">
&lt;h3>The Motivation for a Layout System&lt;/h3>
&lt;p>One of the major complaints that any serious BeOS programmer would eventually make about the GUI classes in the Be API is the lack of easy font sensitivity. What this means is that if one designs a GUI using the system default fonts and then a user of your application changes their system fonts to be much smaller or larger than the default, the GUI will likely look bad (especially if the font size is larger.) Things that were previously aligned may not be, and likely text labels will run into other components or even disappear into the side of the window. This is especially true in fixed sized GUIs like dialog boxes and configuration panels. See Figure 1.&lt;/p></description></item><item><title>Notice: Scheduled Maintenance for dev.haiku-os.org</title><link>https://www.haiku-os.org/news/2008-06-11_notice_scheduled_maintenance_for_dev_haiku_os_org/</link><pubDate>Wed, 11 Jun 2008 19:00:52 +0000</pubDate><guid>https://www.haiku-os.org/news/2008-06-11_notice_scheduled_maintenance_for_dev_haiku_os_org/</guid><description>On Monday the 16th of June, from 09:00 GMT onwards, dev.haiku-os.org will be down for a server move and software upgrade. The website team has chosen to combine these two operations in order to minimize downtime. The operation is expected to take about three hours. Live progress updates will be offered on the#haiku channel on freenode. The service will be moved to hosting that has been offered by Scott Palmer from Unixheads.</description></item><item><title>Notice: user account changes on dev.haiku-os.org</title><link>https://www.haiku-os.org/news/2008-06-02_notice/</link><pubDate>Mon, 02 Jun 2008 13:23:00 +0000</pubDate><guid>https://www.haiku-os.org/news/2008-06-02_notice/</guid><description>
&lt;div class="field field-type-text field-field-body">
&lt;div class="field-items">
&lt;div class="field-item odd">
&lt;p>&lt;em>Update:&lt;/em> as of now this change is in effect. If you are encountering any problems, read on to learn how to get help.&lt;/p>
&lt;p>The &lt;a href="http://www.haiku-os.org/about/teams/website">website team&lt;/a> is constantly trying to improve the user experience of the various websites we maintain. In order to improve our existing infrastructure, we are currently preparing a move to a new server infrastructure, which is offered by the &lt;a href="http://www.isc.org/">Internet Systems Consortium&lt;/a>. ISC is a non-profit that, amongst many &lt;a href="http://www.isc.org/index.pl?/profsvcs/">other things,&lt;/a> hosts &lt;a href="http://www.kernel.org/">kernel.org&lt;/a>. We are more than grateful for this offer, which will improve our responsiveness, especially during exposure on &lt;a href="http://slashdot.org/">Slashdot&lt;/a> or &lt;a href="http://www.osnews.com/">OSNews&lt;/a>.&lt;/p>
&lt;p>This transition means that we have to redesign several aspects of the server infrastructure. One of these things is the user account handling. Because of the interactive nature of the main website and the bug tracker, much of the functionality is tied to user accounts. Up to now we have been able to use the user database of the main website to authenticate users against &lt;a href="http://dev.haiku-os.org/">dev.haiku-os.org&lt;/a>. However, in the new environment, we have to break this connection, until a better solution is implemented.&lt;/p>
&lt;p>On Monday the 9th of June, users of &lt;span class="geshifilter">&lt;code class="cpp geshifilter-cpp">dev.&lt;span style="color: #007788;">haiku&lt;/span>&lt;span style="color: #000040;">-&lt;/span>os.&lt;span style="color: #007788;">org&lt;/span>&lt;/code>&lt;/span> will no longer be able to log in with the account they created on the main &lt;a href="http://www.haiku-os.org">website.&lt;/a> If you have ever logged in on dev.haiku-os.org, you will be affected by this change. You will receive an email with a new (randomly generated) password, which you will be able to change to your liking.&lt;/p>
&lt;p>Read on for a short list of questions and answers.&lt;/p></description></item><item><title>Git for Haiku (#1)</title><link>https://www.haiku-os.org/blog/nielx/2008-04-21_git_for_haiku_1/</link><pubDate>Mon, 21 Apr 2008 14:25:12 +0000</pubDate><guid>https://www.haiku-os.org/blog/nielx/2008-04-21_git_for_haiku_1/</guid><description>&lt;p>I would like to announce the availability of the git revision control system. The &lt;a href="http://git.or.cz/">git website&lt;/a> describes it as:&lt;/p>
&lt;blockquote>
Git is an open source version control system designed to handle very large projects with speed and efficiency, but just as well suited for small personal repositories; it is especially popular in the open source community, serving as a development platform for projects like the Linux Kernel, WINE or X.org.
&lt;p>Git falls in the category of distributed source code management tools, similar to e.g. Mercurial or Bazaar. Every Git working directory is a full-fledged repository with complete history and full revision tracking capabilities, not dependent on network access or a central server. Still, Git stays extremely fast and space efficient.&lt;/p>
&lt;/blockquote>
&lt;p>This document describes how to install the git binary, and how to get the source.&lt;/p></description></item><item><title>Haiku Alpha 1 Status Update (#2)</title><link>https://www.haiku-os.org/blog/nielx/2008-03-31_haiku_alpha_1_status_update_2/</link><pubDate>Mon, 31 Mar 2008 07:47:58 +0000</pubDate><guid>https://www.haiku-os.org/blog/nielx/2008-03-31_haiku_alpha_1_status_update_2/</guid><description>
&lt;p> This is the second installment of the Haiku alpha 1 status updates. In this issue I will discuss the progress on &lt;a href="https://dev.haiku-os.org/ticket/1739">including the developer tools&lt;/a> in Haiku. Some interesting progress has been made. I will also expose a discussion on the mailing list on whether or not to release a bootable CD. At the end of the page you will find the enhanced milestone statistics. &lt;/p></description></item><item><title>Haiku Alpha 1 Status Update (#1)</title><link>https://www.haiku-os.org/blog/nielx/2008-03-22_haiku_alpha_1_status_update_1/</link><pubDate>Sat, 22 Mar 2008 21:16:49 +0000</pubDate><guid>https://www.haiku-os.org/blog/nielx/2008-03-22_haiku_alpha_1_status_update_1/</guid><description>
&lt;p>
This is the first Haiku alpha 1 status update. The goal of this status update is to
provide information on how the project is going. There has recently been an consensus
that it was about time to start preparing a first alpha for a myriad of reasons.
To me personally, the fact that it is about time to show off the enormous amount
of work that has been put in the project the past number of years. Another good
reason - in my opinion - is to get everyone behind one goal: preparing the code
for a first release.
&lt;/p>
&lt;p>
So what's the goal of this status update? Well, with a large number
of developers actually working on the different components of the operating
system, it is easy to lose track of what is going on. You can consider this
a news update.
&lt;/p></description></item><item><title>Mindmap of the discussion on alpha 1</title><link>https://www.haiku-os.org/blog/nielx/2008-02-27_mindmap_of_the_discussion_on_alpha_1/</link><pubDate>Wed, 27 Feb 2008 21:59:12 +0000</pubDate><guid>https://www.haiku-os.org/blog/nielx/2008-02-27_mindmap_of_the_discussion_on_alpha_1/</guid><description>A nice overview in mind map format, for those of you interested.</description></item><item><title>Webkit port: talking to Andrea "xeD" Anzani</title><link>https://www.haiku-os.org/blog/koki/2007-12-21_webkit_port_talking_to_andrea_xed_anzani/</link><pubDate>Sat, 22 Dec 2007 01:19:58 +0000</pubDate><guid>https://www.haiku-os.org/blog/koki/2007-12-21_webkit_port_talking_to_andrea_xed_anzani/</guid><description>
&lt;p>&lt;span class="inline right">&lt;img src="../../files/screenshots/bebits-on-webkit.png" alt="Webkit rendering bebits.com" title="Webkit rendering bebits.com" class="image img_assist_custom" height="350" width="400">&lt;span class="caption" style="width: 398px;">&lt;strong>Webkit rendering bebits.com&lt;/strong>&lt;/span>&lt;/span>It looks like the Haiku Webkit port initiated by Ryan Leavengood has entered a productive second stage of development, and thanks to the recent work by one of the new project team members, Andrea "xeD" Anzani, tangible progress has been made as shown by the recent screenshot showing the HaikuLauncher application rendering bebits.com (shown to the right). I was curious about his work, so I went directly to the source and asked a few questions to Andrea; here are his answers.&lt;/p>
&lt;p>&lt;strong>Andrea:&lt;/strong> From the questions you wrote, it looks like you think we have a working browser here. Well, we don't. I'm sorry to tell you but what you see it's just a proof that the webkit is working. Still incomplete and with a lot of bugs. The webkit is, in short words, a framework for loading, parsing and drawing an html page (including net connections and javascript interpreter). We are working on fixing and finishing it. When we are done with porting the webkit, then we can speak about the development of a web browser.&lt;/p></description></item><item><title>Our first decent WebKit rendering!</title><link>https://www.haiku-os.org/blog/leavengood/2007-12-18_our_first_decent_webkit_rendering/</link><pubDate>Wed, 19 Dec 2007 00:04:58 +0000</pubDate><guid>https://www.haiku-os.org/blog/leavengood/2007-12-18_our_first_decent_webkit_rendering/</guid><description>&lt;p>The WebKit Haiku port team has seen some nice progress lately in the form of our first decent rendering. Read more to see it...&lt;/p></description></item><item><title>WebKit port well underway</title><link>https://www.haiku-os.org/news/2007-12-04_webkit_port_well_underway/</link><pubDate>Tue, 04 Dec 2007 17:03:44 +0000</pubDate><guid>https://www.haiku-os.org/news/2007-12-04_webkit_port_well_underway/</guid><description>The Haiku project is proud to be once again part of Google's Code-In.
Together with 16 other open source projects we'll mentor students between 13 and 17 years of age through various large and small tasks. The aim is to introduce them to the work and community of open source projects, while benefitting ourselves from their work and energy, and maybe even by gaining future contributers.
If you know people in the right age bracket that might be interested, point them to Google's Code-In site that has all the information.</description></item><item><title>WebCore Now Compiles for Haiku</title><link>https://www.haiku-os.org/blog/leavengood/2007-11-11_webcore_now_compiles_for_haiku/</link><pubDate>Mon, 12 Nov 2007 05:40:29 +0000</pubDate><guid>https://www.haiku-os.org/blog/leavengood/2007-11-11_webcore_now_compiles_for_haiku/</guid><description>I know I have been very quiet for a while in regards to my Haiku WebKit port, but that is because I&amp;rsquo;ve been in a long session of coding. I am happy to report that this weekend I finally got WebCore compiling for Haiku:
Link ../../../generated/objects/haiku/x86/release/WebKit/WebCore/libwebcore.so Chmod1 ../../../generated/objects/haiku/x86/release/WebKit/WebCore/libwebcore.so SetType1 ../../../generated/objects/haiku/x86/release/WebKit/WebCore/libwebcore.so MimeSet1 ../../../generated/objects/haiku/x86/release/WebKit/WebCore/libwebcore.so SetVersion1 ../../../generated/objects/haiku/x86/release/WebKit/WebCore/libwebcore.so So what does this mean? Does it mean the port is now complete? Unfortunately, no it doesn&amp;rsquo;t.</description></item><item><title>JavaScriptCore Runs on Haiku! (mostly)</title><link>https://www.haiku-os.org/blog/leavengood/2007-09-04_javascriptcore_runs_on_haiku_mostly/</link><pubDate>Wed, 05 Sep 2007 04:27:09 +0000</pubDate><guid>https://www.haiku-os.org/blog/leavengood/2007-09-04_javascriptcore_runs_on_haiku_mostly/</guid><description>&lt;p>So after a few frustrating weeks of very little progress on my WebKit port, I have finally gotten JavaScriptCore running on Haiku!&lt;/p></description></item><item><title>WebKit Port Complications</title><link>https://www.haiku-os.org/blog/leavengood/2007-08-20_webkit_port_complications/</link><pubDate>Mon, 20 Aug 2007 23:31:52 +0000</pubDate><guid>https://www.haiku-os.org/blog/leavengood/2007-08-20_webkit_port_complications/</guid><description>&lt;p>I have been documenting my progress on porting the &lt;a target="_new" href="http://webkit.org">WebKit&lt;/a> project to Haiku on the &lt;a target="_new" href="http://www.haikuware.com">Haikuware&lt;/a> site, but decided to also post information here. You may want to read my &lt;a target="_new" href="http://www.haikuware.com/index.php?option=com_content&amp;task=view&amp;id=92">previous blog article&lt;/a> about this port and also the information at the &lt;a target="_new" href="http://www.haikuware.com/index.php?option=com_content&amp;task=view&amp;id=54&amp;Itemid=39">WebKit bounty&lt;/a> on Haikuware. Please consider &lt;a target="_new" href="http://www.haikuware.com/index.php?option=com_content&amp;task=view&amp;id=47&amp;Itemid=71">donating to a bounty.&lt;/a>&lt;/p>
&lt;p>Before I started work on this port I asked in the #webkit IRC channel what the mimimum version of GCC that was required to compile WebKit. The general consensus was 4.0. So what does that mean?&lt;/p></description></item><item><title>Symbolic Milestones</title><link>https://www.haiku-os.org/news/2007-01-28_symbolic_milestones/</link><pubDate>Sun, 28 Jan 2007 22:58:28 +0000</pubDate><guid>https://www.haiku-os.org/news/2007-01-28_symbolic_milestones/</guid><description>Some will argue that these were just meaningless numbers, nevertheless we have reached significant milestones today: 1000th bug entry, and even better, 20000th subversion change. Recent subversion changes include many bug fixes and several additions in the file system area.
Several file system add-ons were ported from BeOS (Haiku has a different VFS interface):
NTFS, using a GPLed libntfs, should even handle writing if you don't mind some risk of losing data.</description></item></channel></rss>