<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>riscv64 on Haiku Project</title><link>https://www.haiku-os.org/tags/riscv64/</link><description>Recent content in riscv64 on Haiku Project</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2001-2021 Haiku Inc.</copyright><lastBuildDate>Thu, 01 Jul 2021 08:50:00 +0400</lastBuildDate><atom:link href="https://www.haiku-os.org/tags/riscv64/index.xml" rel="self" type="application/rss+xml"/><item><title>Haiku, Inc. sponsoring hardware purchases for RISC-V port</title><link>https://www.haiku-os.org/news/2021-07-01_haiku_inc_sponsoring_hardware_purchases_for_risc_v_port/</link><pubDate>Thu, 01 Jul 2021 08:50:00 +0400</pubDate><guid>https://www.haiku-os.org/news/2021-07-01_haiku_inc_sponsoring_hardware_purchases_for_risc_v_port/</guid><description>RISC-V is an interesting, relatively new and open source hardware platform. The inventors of RISC-V created a company called HiFive and that company recently released a desktop-class System on a Chip (SoC) board called HiFive Unmatched. Long before this release Haiku developer Alexander von Gluck (kallisti5) had pre-ordered this board and had begun work on the Haiku port to RISC-V, making some progress on the boot loader, u-boot support and memory mapping.</description></item><item><title>Debugging RISCV-64 bootloader in QEMU</title><link>https://www.haiku-os.org/blog/kallisti5/2021-01-17_debugging_riscv-64_bootloader_in_qemu/</link><pubDate>Sun, 17 Jan 2021 09:36:04 -0600</pubDate><guid>https://www.haiku-os.org/blog/kallisti5/2021-01-17_debugging_riscv-64_bootloader_in_qemu/</guid><description>Debugging early bootloader code can be extremely difficult. The lack of printf and other classical black-box debugging tools means you&amp;rsquo;re limited to one of the following methods of debugging lockups:
Arm chair debugging, Changing code, compiling, booting, repeat. Using GDB or another debugger tool and stepping through code watching outcome. Obviously #2 above is more ideal than #1. Welcome to debugging by attaching gdb to qemu!
The steps below really should apply to any architecture.</description></item><item><title>Compiling Haiku for RISCV64</title><link>https://www.haiku-os.org/guides/building/compiling-riscv64/</link><pubDate>Sun, 19 Jan 2020 10:18:09 +0000</pubDate><guid>https://www.haiku-os.org/guides/building/compiling-riscv64/</guid><description>Haiku can be compiled for devices using the RISC-V 64bit processor architecture. (RV64GC)
Unstable The state of the RISC-V port is early. Only the bootloader currently runs. Create a compiler toolchain Building the RISCV64 compiler toolchain is quite easy using Haiku&amp;rsquo;s configure tool.
For a complete list of flags for the configure script, see Haiku&amp;rsquo;s Configure Options
Perform a git clone haiku and buildtools Within the haiku source directory, create your workspace for RISCV64 via mkdir generated.</description></item></channel></rss>