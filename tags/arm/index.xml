<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>arm on Haiku Project</title><link>https://www.haiku-os.org/tags/arm/</link><description>Recent content in arm on Haiku Project</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2001-2021 Haiku Inc.</copyright><lastBuildDate>Sun, 19 Jan 2020 10:18:09 +0000</lastBuildDate><atom:link href="https://www.haiku-os.org/tags/arm/index.xml" rel="self" type="application/rss+xml"/><item><title>Compiling Haiku for SPARC</title><link>https://www.haiku-os.org/guides/building/compiling-sparc/</link><pubDate>Sun, 19 Jan 2020 10:18:09 +0000</pubDate><guid>https://www.haiku-os.org/guides/building/compiling-sparc/</guid><description>Haiku can be compiled for devices using the SPARC 64bit processor architecture.
Unstable The state of the SPARC port is early. Only the bootloader currently runs. Create a compiler toolchain Building the SPARC compiler toolchain is quite easy using Haiku&amp;rsquo;s configure tool.
For a complete list of flags for the configure script, see Haiku&amp;rsquo;s Configure Options
Perform a git clone haiku and buildtools Within the haiku source directory, create your workspace for SPARC via mkdir generated.</description></item><item><title>Story arcs and arch stories</title><link>https://www.haiku-os.org/blog/mmu_man/2016-07-11_story_arcs_and_arch_stories/</link><pubDate>Mon, 11 Jul 2016 11:24:09 +0000</pubDate><guid>https://www.haiku-os.org/blog/mmu_man/2016-07-11_story_arcs_and_arch_stories/</guid><description>&lt;p>This week I just received a blue box.&lt;/p>
&lt;p>&lt;img src="../../files/Misc_TARDIS.png" />&lt;/p>
&lt;p>No, not this kind of blue box!&lt;/p>
&lt;p>…
&lt;a href="https://www.youtube.com/watch?v=13S58aQw7wA">Spoilers!&lt;/a>&lt;/p></description></item><item><title>BeGeistert 029 coding sprint report</title><link>https://www.haiku-os.org/node/10350/</link><pubDate>Fri, 13 Nov 2015 19:28:12 +0000</pubDate><guid>https://www.haiku-os.org/node/10350/</guid><description>Hello world, The autumn leaves are falling, which sets the perfect mood for... The yearly coding sprint!
The room was not too crowded this year, to say the least. We started the week with Jonathan (js), Olivier (oco), François (mmu_man), Jérôme (korli), but they all left on monday and tuesday, leaving just Jua and me for the end of the week. The sprint was still productive, and quite a lot of progress was made, especially on the web browser.</description></item><item><title>[GSoC 2014 : ARM Port] Final report</title><link>https://www.haiku-os.org/blog/dnivra/2014-08-24_gsoc_2014_arm_port_final_report/</link><pubDate>Sun, 24 Aug 2014 15:39:14 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-08-24_gsoc_2014_arm_port_final_report/</guid><description>Hello everyone,
The coding period of Google Summer of Code 2014(as well as the program itself) ended on Monday August 18, 2014. Here’s an update on the status at the end of the program. I’ve been moving over the past week and thus the delay in the update.
Over the past few weeks, I’ve been working on improving support for ARM. I added a jam target to automatically create a bootable MMC image and fix bugs in the haiku loader and also in the kernel.</description></item><item><title>[GSoC 2014 : ARM Port] Week #16</title><link>https://www.haiku-os.org/blog/dnivra/2014-08-12_gsoc_2014_arm_port_week_16/</link><pubDate>Tue, 12 Aug 2014 13:28:29 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-08-12_gsoc_2014_arm_port_week_16/</guid><description>
Hello everyone!&lt;br />
Here's a quick update for week 16. I didn't have internet access over the past few days due to a technical issue with my ISP and hence the delayed report.&lt;br />&lt;br />
TL;DR – The patch to prevent the kernel from overwriting the loader was merged last week. The next issues that need to be tackled are the KDL faulting when printing the backtrace and fixing an assertion that fails when initializing virtual memory.&lt;br />&lt;br /></description></item><item><title>[GSoC 2014 : ARM Port] Week #15</title><link>https://www.haiku-os.org/blog/dnivra/2014-08-03_gsoc_2014_arm_port_week_15/</link><pubDate>Sun, 03 Aug 2014 10:53:23 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-08-03_gsoc_2014_arm_port_week_15/</guid><description>
Hello everyone!&lt;br />
TL;DR - It was decided that reserving space for the kernel instead of moving the entire memory map to a higher location. I’ve been working on that for most of last week and I think it would take a good part of this week to complete it since I seem to be running into many issues.&lt;br />&lt;br /></description></item><item><title>[GSoC 2014 : ARM Port] Week #14</title><link>https://www.haiku-os.org/blog/dnivra/2014-07-27_gsoc_2014_arm_port_week_14/</link><pubDate>Sun, 27 Jul 2014 05:49:51 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-07-27_gsoc_2014_arm_port_week_14/</guid><description>
Hello everyone!&lt;br />
Here’s the update for week 14 of work on the Haiku ARM port. I was travelling for a good part of week 13 and thus couldn’t get much work done during the time.&lt;br />&lt;br />
TL;DR - The problems of kernel overwriting the loader code and the exceptions when setting up framebuffer have been temporarily solved. The framebuffer related code has been disabled for now and the entire memory map moved to a higher address(when FDT support is implemented, a lot of these problems probably won’t arise). Currently, a fault is raised when the kernel attempts to obtain the same lock twice, which drops to KDL.&lt;br />&lt;br /></description></item><item><title>[GSoC 2014 : ARM Port] Week #12</title><link>https://www.haiku-os.org/blog/dnivra/2014-07-12_gsoc_2014_arm_port_week_12/</link><pubDate>Sat, 12 Jul 2014 09:41:13 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-07-12_gsoc_2014_arm_port_week_12/</guid><description>
Hey everyone!&lt;br />
Here’s a quick update for week #12.&lt;br />&lt;br />
TL;DR - The decompression process fails because the archive is present in a location that isn’t mapped by the MMU and subsequently allocated for the zlib output stream. No solutions have been discussed yet. It shouldn’t be long till the kernel is running hopefully :).&lt;br />&lt;br /></description></item><item><title>[GSoC 2014 : ARM Port] Week #11</title><link>https://www.haiku-os.org/blog/dnivra/2014-07-06_gsoc_2014_arm_port_week_11/</link><pubDate>Sun, 06 Jul 2014 06:47:06 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-07-06_gsoc_2014_arm_port_week_11/</guid><description>
Hey everyone!&lt;br />
Here’s the update for week #11.
&lt;br />&lt;br />
TL;DR - Haiku faults when trying to find the floppyboot archive present in stage2 loader. There seems to be a difference in few offsets/sizes, which causes different bytes to be read every time the loader tries to detect the archive.&lt;br />&lt;br /></description></item><item><title>[GSoC 2014 : ARM Port] Week #10 (mid term update)</title><link>https://www.haiku-os.org/blog/dnivra/2014-07-01_gsoc_2014_arm_port_week_10_mid_term_update/</link><pubDate>Tue, 01 Jul 2014 06:32:15 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-07-01_gsoc_2014_arm_port_week_10_mid_term_update/</guid><description>
Hey everyone!&lt;br />
Here’s the update for week #10. Sorry about the delay in posting there - I had some issues logging into the website over past few days.&lt;br />&lt;br />
TL;DR - MMU is enabled and now working!</description></item><item><title>[GSoC 2014 : ARM Port] Week #8</title><link>https://www.haiku-os.org/blog/dnivra/2014-06-15_gsoc_2014_arm_port_week_8/</link><pubDate>Sun, 15 Jun 2014 12:16:11 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-06-15_gsoc_2014_arm_port_week_8/</guid><description>
Hey everyone!&lt;br />
The bootstrap-mmc target is now finally available! What this means is that you can follow all instructions in [1]</description></item><item><title>[GSoC 2014 : ARM Port] Week #7</title><link>https://www.haiku-os.org/blog/dnivra/2014-06-09_gsoc_2014_arm_port_week_7/</link><pubDate>Mon, 09 Jun 2014 04:38:55 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-06-09_gsoc_2014_arm_port_week_7/</guid><description>Hey everyone!
Just like week 6, this is another short update.
I’ve been working on creating a bootstrap-mmc target for the build system. The current issues I’m facing are
Downloading MLO and u-boot fails and thus build fails since jam doesn’t know how to create those targets otherwise. I managed to fix this but apparently, the fix breaks the current build system so I need to modify the fix such that it doesn’t break the build system.</description></item><item><title>[GSoC 2014: ARM Port] Week #6</title><link>https://www.haiku-os.org/blog/dnivra/2014-06-01_gsoc_2014_arm_port_week_6/</link><pubDate>Sun, 01 Jun 2014 10:08:04 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-06-01_gsoc_2014_arm_port_week_6/</guid><description>Hey everyone!
Here’s an update on week 6(a relatively short one so no TL;DR :) ). I managed to fix the bootable SD card image generation script that I created last week to use mtools and thus eliminate the need for losetup and root permissions. The script is available in a Github[1] repository Meanwhile, I’ve also been working on adding a bootstrap-mmc target to Jam. Right now, the target generates the haiku_loader_nbsd.</description></item><item><title>[GSoC 2014: ARM port] Week #5</title><link>https://www.haiku-os.org/blog/dnivra/2014-05-24_gsoc_2014_arm_port_week_5/</link><pubDate>Sat, 24 May 2014 06:28:27 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-05-24_gsoc_2014_arm_port_week_5/</guid><description>
Hey everyone!&lt;br />
Here’s an update on week #5.&lt;br />&lt;br />
TL;DR - I created a bootable SD card image that boots up when emulating BeagleBoard-xM in qemu. Control is passed to haiku_loader, which then crashes. A link to the necessary u-boot files and an sh compatible shell script(that generates the SD card image) is provided at the end.&lt;br />&lt;br />
&lt;b>Update: There's a better script that does not require losetup/root permissions listed in &lt;a href='../../blog/dnivra/2014-06-01_gsoc_2014_arm_port_week_6'>update for week #6.&lt;/a>&lt;/b>
&lt;br />&lt;br /></description></item><item><title>[GSoC 2014: ARM port] Week #3</title><link>https://www.haiku-os.org/blog/dnivra/2014-05-12_gsoc_2014_arm_port_week_3/</link><pubDate>Mon, 12 May 2014 09:44:00 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-05-12_gsoc_2014_arm_port_week_3/</guid><description>
Hey everyone!&lt;br />&lt;br />
Here’s an update on progress during week #3. Sorry about the delay - exams have started for me.&lt;br />&lt;br />
TL;DR - I didn’t succeed in creating the bootable SD card image since I’ve been preparing for exams. There are some instructions and probably next steps in this direction listed here. More work on this will be done after exams.&lt;br />&lt;br /></description></item><item><title>[GSoC 2014: ARM port] Week #1 and #2</title><link>https://www.haiku-os.org/blog/dnivra/2014-05-04_gsoc_2014_arm_port_week_1_and_2/</link><pubDate>Sun, 04 May 2014 08:52:55 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-05-04_gsoc_2014_arm_port_week_1_and_2/</guid><description>
Hey everyone!
Here’s an update on what’s happened so far.
&lt;p>TL;DR - PulkoMandy managed to build the bootstrap image and kallisti5 has made some progress in running the image on the qemu. This is a significant progress since bootstrap image build never succeeded but not quite usable on BBB. I’ve not made much significant contribution. Instructions for building the bootstrap image are at the end. Otherwise, read on.&lt;/p></description></item><item><title>[GSoC 2014] Haiku ARM port</title><link>https://www.haiku-os.org/blog/dnivra/2014-04-24_gsoc_2014_haiku_arm_port/</link><pubDate>Thu, 24 Apr 2014 09:29:26 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-04-24_gsoc_2014_haiku_arm_port/</guid><description>
Hello everyone!&lt;br />
Most of you know that 4 students have been chosen to work with Haiku during the Google Summer of Code(GSoC) 2014. My name is Arvind and I am one of the 4 students(yaay!). I will be improving the ARM port and hopefully make significant progress. &lt;br />&lt;br /></description></item><item><title>The ARM keeps moving...</title><link>https://www.haiku-os.org/blog/ithamar/2012-11-22_arm_keeps_moving/</link><pubDate>Thu, 22 Nov 2012 20:58:23 +0000</pubDate><guid>https://www.haiku-os.org/blog/ithamar/2012-11-22_arm_keeps_moving/</guid><description>The ARM keeps moving... For people not watching the commit list closely, I&amp;rsquo;ve continued to find time to work on Haiku/ARM. So far, things look promising. No new screenshots of any kind though, but more investigation work done to get an idea of what I&amp;rsquo;m getting myself into. All in all, I&amp;rsquo;m actually quite pleased&amp;hellip;
In my local repository (of which most is actually in the Haiku repository as well, bar some really nasty hacks that not even I dare to commit publicly) I&amp;rsquo;ve been able to get to the point where all content for a standard Haiku image is being built (the famous haiku-image target, for the devs reading this).</description></item><item><title>Compiling Haiku for Arm</title><link>https://www.haiku-os.org/guides/building/compiling-arm/</link><pubDate>Sat, 08 Sep 2012 19:18:09 +0000</pubDate><guid>https://www.haiku-os.org/guides/building/compiling-arm/</guid><description>Haiku can be compiled for devices leveraging the ARMv7 or later processor architecture.
Unstable The state of the ARM port is extremely early. Roll up your sleeves and help out! Create a Compiler Toolchain Building the ARM compiler toolchain is quite easy using Haiku&amp;rsquo;s configure tool.
For a complete list of flags for the configure script, see Haiku&amp;rsquo;s Configure Options
Perform a git clone haiku and buildtools Within the haiku source directory, create your workspace for ARM via mkdir generated.</description></item><item><title>Finally a Haiku ARM port update</title><link>https://www.haiku-os.org/blog/pfoetchen/2009-08-18_finally_haiku_arm_port_update/</link><pubDate>Tue, 18 Aug 2009 13:46:18 +0000</pubDate><guid>https://www.haiku-os.org/blog/pfoetchen/2009-08-18_finally_haiku_arm_port_update/</guid><description>
&lt;p>After quite some time I finally update my blog ;). A lot has happened in the last few weeks... The Haiku loader that gets loaded by u-boot finally is able to load the kernel and start it and we even have minimal framebuffer support running.&lt;/p>
&lt;h3>haiku_loader&lt;/h3>
&lt;p>In the previous posts I said that we would use the U-Boot API to write the loader, the problem with that is, that the API is not accessible on most U-Boots so we could not use it on early boot and had to write our own functions for serial output etc. Because of that the kernel is now loaded from a ramdisk instead of directly loading it from the sd-card as planned (but that might change later...). It also has the disadvantage, that the loader code is not completely platform independent anymore so we would have to rewrite it to be used on a PPC board with U-Boot for example.&lt;/p>
&lt;p>Since we still need to know where to find the ramdisk for example (unless we hardcode it..) we decided to use the U-Boot image format that allows packing the loader and the ramdisk in one image and tell the loader where everything is and what parameters to pass to the kernel etc.. For this task U-Boot has OS-specific code since there is no standardized way of doing this. Since there was no Haiku specific code we would either have to convince the U-Boot developers to add Haiku support or simply masquerade as an other operating system. We choose the second option and François Revol added support for the netbsd way of booting so that we get the position of the ramdisk and the kernel parameters and some other info that is not yet used. He also created an jamtarget to allow to build an image directly.&lt;/p></description></item><item><title>Haiku-ARM progress</title><link>https://www.haiku-os.org/blog/pfoetchen/2009-05-19_haikuarm_progress/</link><pubDate>Tue, 19 May 2009 16:18:30 +0000</pubDate><guid>https://www.haiku-os.org/blog/pfoetchen/2009-05-19_haikuarm_progress/</guid><description>I got the kernel to boot &amp;ldquo;a bit&amp;rdquo; ;) but since u-boot does not pass the kernel arguments when loading with loadelf I had to fake some kernel arguments etc.. So it&amp;rsquo;s not realy a working system but serial out works ;) (input does not work yet :( ) and I can see some stuff on my screen.. The kernel runs on a emulated gumstix verdex since there is no emulator for the gumsitx overo we will use and the beagleboard emulator did not really work (no sd card support for example)</description></item><item><title>Porting Haiku to ARM architecture</title><link>https://www.haiku-os.org/blog/pfoetchen/2009-04-21_porting_haiku_arm_architecture/</link><pubDate>Tue, 21 Apr 2009 23:35:47 +0000</pubDate><guid>https://www.haiku-os.org/blog/pfoetchen/2009-04-21_porting_haiku_arm_architecture/</guid><description>Personal Profile Johannes Wischert Brief bio - I'm a computer science student living in Germany. I'm 25 years old now. I wrote my first program with 8 or 9 years or so and never stopped since then... After my studies I want to work somewhere in the embedded systems development but by now I enjoy my studies and take my time to finish. Project idea information Project title - Port the Haiku Kernel to ARM-Architecture List of project goals - generic u-boot Bootloader using the u-boot apis as far as possible to ease porting to other platforms that use u-boot Kernel that runs on the arm-processor and supports all applicable features that the x86 kernel has Device driver for at least the SD-card and the Serial-Port Working system running on a Beagleboard or similar device Project description - To get the system running on an ARM-CPU we first need a working Haiku ARM toolchain to compile the code I already got the toolchain to run and produce working binaries (tested under qemu) so this part of the system already works more or less.</description></item></channel></rss>