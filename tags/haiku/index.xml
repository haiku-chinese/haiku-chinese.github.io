<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>haiku on Haiku Project</title><link>https://www.haiku-os.org/tags/haiku/</link><description>Recent content in haiku on Haiku Project</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2001-2021 Haiku Inc.</copyright><lastBuildDate>Thu, 29 Jul 2021 12:28:21 +1000</lastBuildDate><atom:link href="https://www.haiku-os.org/tags/haiku/index.xml" rel="self" type="application/rss+xml"/><item><title>Update #3 from the Promotion Team</title><link>https://www.haiku-os.org/blog/jt15s/2021-07-29_update_3_from_the_promotion_team/</link><pubDate>Thu, 29 Jul 2021 12:28:21 +1000</pubDate><guid>https://www.haiku-os.org/blog/jt15s/2021-07-29_update_3_from_the_promotion_team/</guid><description>Hello all! This is the third update from the Haiku Promotion Team.
Beta3 Released As you have noticed, Beta3 has been released! Huge shout out to kallisti5, who was the release coordinator for Beta3. Making a major release of Haiku is a daunting task to all involved!
New Team Members Since I last wrote in March this year, we welcomed the following members to the Team:
animortis AlwaysLivid jeremyf Switching to IRC/Matrix It was brought to our attention that the way the Promotion Team communicated was not a very transparent one – we communicated through a group private message on the Haiku forums.</description></item><item><title>GSOC 2021:Progress Report of Improvements to clang-format</title><link>https://www.haiku-os.org/blog/saloni/2021-07-27_gsoc_2021progress_report_of_improvements_to_clang-format/</link><pubDate>Tue, 27 Jul 2021 12:17:53 +0530</pubDate><guid>https://www.haiku-os.org/blog/saloni/2021-07-27_gsoc_2021progress_report_of_improvements_to_clang-format/</guid><description>This blog will contain all the information about what I have done till now.
I started with the input preferences directory and started solving the issues according to haiku guidelines.
A few changes have been made to clang-format. This work takes a lot of time because it needs a complete understanding of how the llvm code works. As there was number of files, it was difficult to figure out which file should contain the solution of the problem but PulkoMandy really helps me alot.</description></item><item><title>Media Release: The Haiku Project Celebrates the Release of Beta 3</title><link>https://www.haiku-os.org/news/2021-07-26_media_release_the_haiku_project_celebrates_the_release_of_beta_3/</link><pubDate>Mon, 26 Jul 2021 12:59:08 +1000</pubDate><guid>https://www.haiku-os.org/news/2021-07-26_media_release_the_haiku_project_celebrates_the_release_of_beta_3/</guid><description>FOR IMMEDIATE RELEASE
July 25, 2021
THE HAIKU PROJECT CELEBRATES THE RELEASE OF BETA 3 Poetry is in motion. The Haiku Project, its developers and team members announced the Haiku operating system released its third beta release, version R1/Beta3, July 25th, 2021. Version R1B3 continues the trend of more frequent releases to provide users and developers with an up to date and stable platform to work on.
This release combines the best of Haiku’s history as a spiritual successor of BeOS and the hard work of a passionate community.</description></item><item><title>GSoC 2021 Progress Update 3: Coding style checker bot for Gerrit</title><link>https://www.haiku-os.org/blog/ritz/2021-07-21_gsoc_2021_progress_update_3_coding_style_checker_bot_for_gerrit/</link><pubDate>Wed, 21 Jul 2021 17:55:41 +0530</pubDate><guid>https://www.haiku-os.org/blog/ritz/2021-07-21_gsoc_2021_progress_update_3_coding_style_checker_bot_for_gerrit/</guid><description>Tl;dr I have completed the bot with basic functionality for my local gerrit instance
Link to Introductory blog
Link to Progress 1
Link to Progress 2
As I have said before I divided my project in the following parts
For every event (change, patch etc.), trigger the Concourse CI pipeline. Implement pipeline in concourse CI for fetching the Git repo and running the haiku-format tool on the relevant files and creating appropriate reports out of the tool.</description></item><item><title>Haiku R1/Beta3 Timeline Update</title><link>https://www.haiku-os.org/news/2021-07-13_haiku_r1beta3_timeline_update/</link><pubDate>Tue, 13 Jul 2021 10:14:26 +1000</pubDate><guid>https://www.haiku-os.org/news/2021-07-13_haiku_r1beta3_timeline_update/</guid><description>The Haiku Project&amp;rsquo;s release coordinator for the R1/Beta3 release, kallisti5, has made the decision to bump back the release of R1/Beta3 by one week.
The updated timeline is here.
The Beta3 release introduces an important update to Haiku WebKit, which subsequently produces some rendering regressions.
While several of the bugs have already been fixed in Haiku WebKit this week, one final bug remains, which involves an issue with disappearing text.</description></item><item><title>Haiku activity report - June 2021</title><link>https://www.haiku-os.org/blog/pulkomandy/2021-07-10-haiku_activity_report_june_2021/</link><pubDate>Sat, 10 Jul 2021 08:53:07 +0200</pubDate><guid>https://www.haiku-os.org/blog/pulkomandy/2021-07-10-haiku_activity_report_june_2021/</guid><description>Hello, it&amp;rsquo;s time for the June activity report! (yes, not much innovation in the tagline for these reports lately. I&amp;rsquo;m out of ideas, or maybe just lazy to find new ones).
Before we dig into the report, two important announcements (in case you are not following the other news on the website, since both were already announced separately).
The beta 3 release process is going well, and there are some testing candidate images available for testing.</description></item><item><title>GSoC 2021: XFS support progress update</title><link>https://www.haiku-os.org/blog/xiaojie/2021-07-06_gsoc_2021_xfs_support_progress_update/</link><pubDate>Tue, 06 Jul 2021 01:33:24 +0800</pubDate><guid>https://www.haiku-os.org/blog/xiaojie/2021-07-06_gsoc_2021_xfs_support_progress_update/</guid><description>XFS project progress Hi, I am going to make a short summary of the XFS project work since last post.
Anyway, you can find my post named &amp;lsquo;GSoC 2021 Project: XFS support progress&amp;rsquo; on the forum. It records part of the work. Of course, the most is on Gerrit. topic:&amp;ldquo;xfs&amp;rdquo; on Gerrit
We could find all remaining patches are merged. But, by the way, not all problems. There is a problem leaving.</description></item><item><title>GSoC 2021 Progress Update 2: Coding style checker bot for Gerrit</title><link>https://www.haiku-os.org/blog/ritz/2021-06-27_gsoc_2021_progress_update_2_coding_style_checker_bot_for_gerrit/</link><pubDate>Sun, 27 Jun 2021 14:50:01 +0530</pubDate><guid>https://www.haiku-os.org/blog/ritz/2021-06-27_gsoc_2021_progress_update_2_coding_style_checker_bot_for_gerrit/</guid><description>Link to Introductory blog
Link to Progress 1
On my quest to finding a way to trigger my jobs anytime a commit happens in gerrit I was looking into this repo and trying to make it work. I tried using it as a resource but it turns out either it&amp;rsquo;s not public anymore or it was deleted. Then I went through the list of forks in that repo and found this.</description></item><item><title>Important Change Required for Haiku Nightly and R1/Beta2 Users</title><link>https://www.haiku-os.org/news/2021-06-22_important_change_required_for_haiku_nightly_and_r1beta2_users/</link><pubDate>Tue, 22 Jun 2021 09:55:21 +1000</pubDate><guid>https://www.haiku-os.org/news/2021-06-22_important_change_required_for_haiku_nightly_and_r1beta2_users/</guid><description>HaikuPorts functionality restored Due to the important change to repository identifiers announced earlier, the HaikuPorts repository was presenting users with an error reading unarchiving the repo. This issue has now been fixed and users may need to re-add the HaikuPorts repository again. Nightly and Beta2 users will need to “re-add” their release repositories to update to newer versions of Haiku and beyond. This change is part of a long-term improvement of our Haiku/HaikuPorts repository identifiers.</description></item><item><title>Haiku R1/Beta3 Timeline Approved</title><link>https://www.haiku-os.org/news/2021-06-14_haiku_r1beta3_timeline_approved/</link><pubDate>Mon, 14 Jun 2021 16:45:15 +1000</pubDate><guid>https://www.haiku-os.org/news/2021-06-14_haiku_r1beta3_timeline_approved/</guid><description>The release timeline for Haiku R1/Beta 3 has been approved after a 7 day RFC (Request for Comment) period on the mailing list.
Access the release timeline on the Trac wiki. Note that minor changes to the dates may occur. If all goes to plan, Beta 3 will be released sometime after the 24th of July. Note that the release will only happen when everything is ready, so there are no final dates and the timeline may change to account for delays.</description></item><item><title>Translation Work Needed in Preparation for Beta 3</title><link>https://www.haiku-os.org/blog/jt15s/2021-06-08_translation_work_needed_in_preparation_for_beta_3/</link><pubDate>Tue, 08 Jun 2021 14:34:07 +1000</pubDate><guid>https://www.haiku-os.org/blog/jt15s/2021-06-08_translation_work_needed_in_preparation_for_beta_3/</guid><description>As we get closer to the release of Beta 3, it is important we ensure our translations are updated.
Current State of Translation Work As of now, no new language has currently reached over 60% since Beta 2 was released last year. Croatian translations are at 58%. If no progress is made, this translation risks being removed from Beta 3! Korean, Hindi, Bulgarian, Czech and Norwegian were already under 60% in beta2 and are still under 60%, somewhere between 45% and 60% complete.</description></item><item><title>GSoC 2021 Progress Update 1: Coding style checker bot for Gerrit</title><link>https://www.haiku-os.org/blog/ritz/2021-06-05_gsoc_2021_project_update_coding_style_checker_bot_for_gerrit/</link><pubDate>Sat, 05 Jun 2021 19:46:42 +0530</pubDate><guid>https://www.haiku-os.org/blog/ritz/2021-06-05_gsoc_2021_project_update_coding_style_checker_bot_for_gerrit/</guid><description>Hey everyone! I am Hrithik (ritz), You can find about my project in my introductory blog. Here&amp;rsquo;s what I have done so far.
I started by reading Concourse CI documentation in order to get myself familiarise with ci pipeline and various schema involved in it. I also looked at other resources provided by my mentors i.e. Suhel Mehta @suhel_mehta and Alexander von Gluck @kallisti5 . Below are some links if anyone wants to check out.</description></item><item><title>GSoC 2021: Coding style checker bot for Gerrit</title><link>https://www.haiku-os.org/blog/ritz/2021-05-22_gsoc_2021_coding_style_checker_bot_for_gerrit/</link><pubDate>Sat, 22 May 2021 20:31:22 +0530</pubDate><guid>https://www.haiku-os.org/blog/ritz/2021-05-22_gsoc_2021_coding_style_checker_bot_for_gerrit/</guid><description>Introduction Hey everyone! I am Hrithik Kumar, a sophomore at National Institute of Technology Agartala, India majoring in Computer Science and Engineering (CSE). I am happy to say that I will be working on creating a Coding style checker bot for Gerrit as part of the GSoC 2021 project. My mentors are Alexander von Gluck and Suhel Mehta.
IRC nick: ritz Matrix: ritz (@ritzkr:matrix.org) Project Haiku has its own coding guidelines which describe how the code should be formatted.</description></item><item><title>GSOC 2021 : Improvements to clang-format and clang-tidy to format code according to haiku coding guidelines</title><link>https://www.haiku-os.org/blog/saloni/2021-05-20_gsoc_2021__improvements_to_clang-format_and_clang-tidy_to_format_code_according_to_haiku_coding_guidelines/</link><pubDate>Thu, 20 May 2021 18:54:26 +0530</pubDate><guid>https://www.haiku-os.org/blog/saloni/2021-05-20_gsoc_2021__improvements_to_clang-format_and_clang-tidy_to_format_code_according_to_haiku_coding_guidelines/</guid><description>Introduction: I am Saloni B.Tech.(3rd year), Computer Science and Engineering(CSE) student of Guru Nanak Dev Engineering College, India. I have been selected for Google Summer of Code 2021 to work with Haiku on the project Improvements to clang-format and clang-tidy to format code according to haiku coding guidelines. My mentors are Preetpal Kaur and Adrien Destugues.
About my project: Haiku has its own coding standards which describe how the code should be formatted.</description></item><item><title>GSoC 2021: XFS file system support</title><link>https://www.haiku-os.org/blog/xiaojie/2021-05-20_gsoc_2021_xfs_file_system_support/</link><pubDate>Thu, 20 May 2021 14:19:33 +0800</pubDate><guid>https://www.haiku-os.org/blog/xiaojie/2021-05-20_gsoc_2021_xfs_file_system_support/</guid><description>About me I am Xiaojie Yi, currently majoring in Data Science and Big Data technology in Central China Normal University, China. I am happy to be selected as GSoC student this year and can work for Haiku to get more XFS filesystem support done. My mentors are CruxBox and Rene.
When I decided to choose this project at the end of March, I knew very little about how everything works. Thanks for everyone&amp;rsquo;s help here!</description></item><item><title>My First Week with Haiku</title><link>https://www.haiku-os.org/blog/animortis/2021-04-27_my_first_week_with_haiku/</link><pubDate>Tue, 27 Apr 2021 09:15:03 +1000</pubDate><guid>https://www.haiku-os.org/blog/animortis/2021-04-27_my_first_week_with_haiku/</guid><description>As you boot your first non-Windows, non-Unix system, you may have a moment when you wonder if this thing is going to work. It’s not from the same family of systems you’re used to: It’s Haiku, and it’s totally different and unique. The great part, though, is when it works better than you could’ve possibly imagined.
And when I sat down with Haiku last week, I knew I had something special.</description></item><item><title>Promotion</title><link>https://www.haiku-os.org/community/getting-involved/promotion/</link><pubDate>Wed, 14 Apr 2021 15:16:45 +1000</pubDate><guid>https://www.haiku-os.org/community/getting-involved/promotion/</guid><description>Promotion is a crucial part of ensuring Haiku continues to grow. Without spreading the word, we cannot gain new users and volunteers.
Whilst Haiku does have a Promotion Team, which you are more than welcome to join and can read more about here, here are some things you can do on your own as well.
What can I do to promote Haiku? Letting people know that you use Haiku can help more people discover the Project and decide whether they want to try the OS out.</description></item><item><title>Promotion Team</title><link>https://www.haiku-os.org/community/getting-involved/promotion/promotion-team/</link><pubDate>Wed, 14 Apr 2021 15:16:45 +1000</pubDate><guid>https://www.haiku-os.org/community/getting-involved/promotion/promotion-team/</guid><description>The Haiku Promotion team The Haiku Promotion Team, in its second iteration (there used to be a Promotion Team but the team slowly languished due to its members becoming inactive in the Haiku community), aims to restart promotion efforts and revitalise Haiku in the process. The promotion team currently consists of:
jt15s scott_puopolo18 stoltenberg shaka444 mrumbelow tthoms fox14 animortis AlwaysLivid jeremyf Quick Links Kanban Forums Marketing Category - contact the Promotion Team by posting in this forum category.</description></item><item><title>An Update from the Promotion Team</title><link>https://www.haiku-os.org/blog/jt15s/2021-03-22_an_update_from_the_promotion_team/</link><pubDate>Mon, 22 Mar 2021 16:08:47 +1100</pubDate><guid>https://www.haiku-os.org/blog/jt15s/2021-03-22_an_update_from_the_promotion_team/</guid><description>It&amp;rsquo;s been almost three months since I posted about the Haiku Promotion Team, and the response to my initial post has been amazing and exceeded my expectations!
There are now six of us (excluding myself) on the Haiku Promotion Team:
scott_pupolo18 stoltenberg tthoms mbrumbelow shaka444 fox14 The Team communicates regularly through a private group chat on the Haiku forums, and stoltenberg has started up a kanban board, which you can view publicly here (Just ignore the login prompt that pops up once you open the kanban).</description></item><item><title>Haiku Survey February/March 2021</title><link>https://www.haiku-os.org/blog/jt15s/2021-03-04_haiku_survey_februarymarch_2021/</link><pubDate>Thu, 04 Mar 2021 19:54:14 +1100</pubDate><guid>https://www.haiku-os.org/blog/jt15s/2021-03-04_haiku_survey_februarymarch_2021/</guid><description>Hi all, hope you are all having a great start to March! kallisti5 has put together a survey to help determine the priorities the Project should focus on for the immediate future. If you haven&amp;rsquo;t already, we would really appreciate if you filled out the survey - it is 100% anonymous and you do not have to enter any personal details. You can fill out the survey here.
Please do not hesitate to give your feedback on Haiku in the survey - your feedback can influence decisions we make in the future.</description></item><item><title>A Brief Look Inside HPKG</title><link>https://www.haiku-os.org/blog/apl/2021-02-28_look_at_hpkg/</link><pubDate>Sun, 28 Feb 2021 12:00:00 +1200</pubDate><guid>https://www.haiku-os.org/blog/apl/2021-02-28_look_at_hpkg/</guid><description>The Haiku operating system has a packaging system that leverages a clever file format called HPKG. This article provides a simplistic overview of how the file format is structured.
Installing and Uninstalling HPKGs To get a package installed on their Haiku computer, a user would download a package file in a format called HPKG. The user would typically do this via the HaikuDepot desktop application or by using the pkgman command line tool.</description></item><item><title>Icculus Microgrant 2020</title><link>https://www.haiku-os.org/blog/kallisti5/2021-02-23_icculus_microgrant_2020/</link><pubDate>Tue, 23 Feb 2021 14:08:15 -0600</pubDate><guid>https://www.haiku-os.org/blog/kallisti5/2021-02-23_icculus_microgrant_2020/</guid><description>Haiku, Inc. is proud to announce being the target of the Icculus Microgrant program for 2020. We would like to thank Icculus, and all of the wonderful folks who have donated to Haiku, Inc. over the years.
Your continued donations help keep us working on what we love, and help us continuously grow and develop the ideal personal computing operating system.</description></item><item><title>Debugging RISCV-64 bootloader in QEMU</title><link>https://www.haiku-os.org/blog/kallisti5/2021-01-17_debugging_riscv-64_bootloader_in_qemu/</link><pubDate>Sun, 17 Jan 2021 09:36:04 -0600</pubDate><guid>https://www.haiku-os.org/blog/kallisti5/2021-01-17_debugging_riscv-64_bootloader_in_qemu/</guid><description>Debugging early bootloader code can be extremely difficult. The lack of printf and other classical black-box debugging tools means you&amp;rsquo;re limited to one of the following methods of debugging lockups:
Arm chair debugging, Changing code, compiling, booting, repeat. Using GDB or another debugger tool and stepping through code watching outcome. Obviously #2 above is more ideal than #1. Welcome to debugging by attaching gdb to qemu!
The steps below really should apply to any architecture.</description></item><item><title>Hello from the Haiku Promotion 'Team'!</title><link>https://www.haiku-os.org/blog/jt15s/2020-12-31_hello_from_the_haiku_promotion_team/</link><pubDate>Thu, 31 Dec 2020 21:33:25 +1100</pubDate><guid>https://www.haiku-os.org/blog/jt15s/2020-12-31_hello_from_the_haiku_promotion_team/</guid><description>Hi there, I&amp;rsquo;m jt15s, a new Haiku community member! I&amp;rsquo;ve been following the project for a few years now since I stumbled upon an article about Haiku.
If you read the title (which I&amp;rsquo;m assuming you did), you’re probably going, &amp;ldquo;wait, we have a promotion team?&amp;rdquo; Well, yes, now we do. As an informal “team” of two (currently), we are super excited to share our plans to help promote Haiku and make more people aware of it.</description></item><item><title>Haiku Depot and Better Icon Handling</title><link>https://www.haiku-os.org/blog/apl/2020-11-16_haikudepot_better_icons/</link><pubDate>Tue, 17 Nov 2020 12:00:00 +1200</pubDate><guid>https://www.haiku-os.org/blog/apl/2020-11-16_haikudepot_better_icons/</guid><description>HaikuDepot displays icons through a number of areas of its user interface. Early in the history of the Haiku packaging system, there were very few packages and very few icons. HaikuDepot started off by downloading each individually from HaikuDepotServer.
Download as Tar then Unpack Downloading each icon file individually was fine for a while, but as the package and hence icon count grew it became necessary to rework this system. HaikuDepotServer later provided the icons as a compressed tar-ball containing all of the icons.</description></item><item><title>Rust on Haiku: the Case of the Disappearing Deceased Threads</title><link>https://www.haiku-os.org/blog/nielx/2020-09-06_rust_on_haiku_the_case_of_the_disappearing_deceased_threads/</link><pubDate>Sun, 06 Sep 2020 07:21:48 +0100</pubDate><guid>https://www.haiku-os.org/blog/nielx/2020-09-06_rust_on_haiku_the_case_of_the_disappearing_deceased_threads/</guid><description>&lt;p>Summer! The time to slow down, relax, go to strange places, and do the projects that are long overdue. This summer I had the joy of spending my time in a lovely house near Lyon in France. In many ways the summer was like others, meaning there was plenty of wine and a lot of relaxing activities. At the same time, the Covid situation did give me a lot of reasons to scale back exploratory activities at the tourist hot spots, and instead focus on activities close to home. I decided to seize the opportunity and to see if I could dive into one of my long-standing pet peeves in the Haiku ecosystem.&lt;/p>
&lt;p>For a long time I have been maintaining the build of the Rust compiler and development tools on Haiku. For this purpose, I maintain a separate tree with the Rust source, with some patches and specific build instructions. My ultimate end goal is to have Rust build on Haiku from the original source, without any specific patches or workarounds. Instead we are in the situation where we cannot build rust on Haiku itself (instead we need to cross-compile it), and we need a customization to be able to run the Rust compiler (&lt;code>rustc&lt;/code>) and package manager (&lt;code>cargo&lt;/code>) on Haiku. This summer my goal would be to find out the underlying issue, and fix it so that the patch will no longer be necessary in the future. Let&amp;rsquo;s go!&lt;/p></description></item><item><title>GSoC2020 Final Report: Input Preferences</title><link>https://www.haiku-os.org/blog/preetpalkaur/2020-08-31_gsoc2020_final_report/</link><pubDate>Mon, 31 Aug 2020 21:15:52 +0530</pubDate><guid>https://www.haiku-os.org/blog/preetpalkaur/2020-08-31_gsoc2020_final_report/</guid><description>GSoC 2020 Final Report This is the final report of the GSoC 2020 project
Input Preferences The proposal is available here:
Proposal Link Work Done: Added the icons for each connected device in the input preferences application. Icons Removed the unwanted devices from the device list when they are not connected to the computer. Improved the look of 4th and 5th button of the mouse and added the 6th button of the mouse and its working.</description></item><item><title>GSoC 2020 Final Report: XFS File System</title><link>https://www.haiku-os.org/blog/cruxbox/2020-08-30_gsoc_2020_project_xfs_project_final_report/</link><pubDate>Sun, 30 Aug 2020 17:58:00 +0530</pubDate><guid>https://www.haiku-os.org/blog/cruxbox/2020-08-30_gsoc_2020_project_xfs_project_final_report/</guid><description>Hello there! This is the final report on my project which aimed at initiating support for XFS Filesystem on Haiku, by first making a read only driver.
Work done during the program: You can check for the patches here: https://review.haiku-os.org/q/hashtag:gsoc2020+owner:shubhambhagat111%2540yahoo.com
All directory and files work is completed and we should be able to read them from a version 4 XFS Filesystem. I&amp;rsquo;ve come to realize that we can now even try to read version 5 of XFS now that the ground work has been placed.</description></item><item><title>GSoC 2020 Project Update(UFS2): Reading Files</title><link>https://www.haiku-os.org/blog/suhelmehta/2020-08-26_gsoc_2020_project_update_ufs2_reading_files/</link><pubDate>Wed, 26 Aug 2020 16:40:58 +0000</pubDate><guid>https://www.haiku-os.org/blog/suhelmehta/2020-08-26_gsoc_2020_project_update_ufs2_reading_files/</guid><description>Hello Everyone!
This is my third post related to my project, Adding UFS2 file system in Haiku
The link below provides the patches that I have worked on till now.
Know more
Work done till now The following points briefly describes what I have done till now:
Reading a file in a UFS2 formatted disk
Implemented ufs2_open(), ufs2_read() in kernel_interface.cpp Reading data from block pointers</description></item><item><title>GSoC 2020 Project Update(UFS2): Reading Symboliclinks</title><link>https://www.haiku-os.org/blog/suhelmehta/2020-08-26_gsoc_2020_project_update_ufs2_reading_symboliclinks/</link><pubDate>Wed, 26 Aug 2020 16:37:13 +0000</pubDate><guid>https://www.haiku-os.org/blog/suhelmehta/2020-08-26_gsoc_2020_project_update_ufs2_reading_symboliclinks/</guid><description>Hello Everyone!
This is my another post related to my project, Adding UFS2 file system in Haiku
The link below provides the patches that I have worked on till now.
Know more
Work done till now The following points briefly describes what I have done till now:
Reading a symbolic link in a UFS2 formatted disk
Implemented ufs2_read_link() in kernel_interface.cpp Reading data from block pointers</description></item><item><title>Manipulating window look &amp; behaviour with 'hey'</title><link>https://www.haiku-os.org/blog/humdinger/2020-08-22_manipulating_windows_with_hey/</link><pubDate>Sat, 22 Aug 2020 10:01:02 +0200</pubDate><guid>https://www.haiku-os.org/blog/humdinger/2020-08-22_manipulating_windows_with_hey/</guid><description>I have an ActivityMonitor replicant showing network receive/send info on the Desktop. I&amp;rsquo;d also like to have something showing cpu usage. However, a combined cpu usage ActivityMonitor doesn&amp;rsquo;t show individual core usage, and having a graph of all cpus often isn&amp;rsquo;t that informative either, because the 8 doodling lines of my cores are easily confusing. ProcessController&amp;rsquo;s bars are too narrow.
Here are both, showing their inadequacy:
Pulse (from the Demo folder) in mini-mode has everything I need: adjustable column width and colours.</description></item><item><title>GSoC 2020 Project Update: XFS</title><link>https://www.haiku-os.org/blog/cruxbox/2020-08-06_gsoc_2020_project_xfs_project_update/</link><pubDate>Tue, 11 Aug 2020 17:58:00 +0530</pubDate><guid>https://www.haiku-os.org/blog/cruxbox/2020-08-06_gsoc_2020_project_xfs_project_update/</guid><description>Hello there! There is quite a lot to share about the work done this month.
Work done so far: You can check for the patches here: https://review.haiku-os.org/q/hashtag:gsoc2020+owner:shubhambhagat111%2540yahoo.com In short: All directory work is done. This includes ShortForm Directories, Block Directories, Leaf Directories, Node Directories and B+Tree based Directories.
Detailed view at the work:
(Some context: Leaf entries containt hash values of a directory entry name and also the address of that entry.</description></item><item><title>Haiku Repository Files and Identifiers</title><link>https://www.haiku-os.org/blog/apl/2020-07-11_repository_identification/</link><pubDate>Sat, 11 Jul 2020 11:42:49 +1200</pubDate><guid>https://www.haiku-os.org/blog/apl/2020-07-11_repository_identification/</guid><description>&lt;p>Software on a computing platform such as Haiku is typically distributed as a package. Without a packaging system it would be hard for users to install software and because software often depends on other software, the chain of dependencies would be difficult for a user to resolve themselves. To orchestrate the distribution and management of the packages, Haiku has a packaging system which consists of applications, online tools, on-host tools and software libraries. One aspect of the packaging system is the coordination and identification of repositories.&lt;/p></description></item><item><title>GSoC 2020 Project Update(UFS2): First Evaluation</title><link>https://www.haiku-os.org/blog/suhelmehta/2020-07-10_gsoc_2020_project_updateufs2_first_evaluation/</link><pubDate>Fri, 10 Jul 2020 00:57:38 +0530</pubDate><guid>https://www.haiku-os.org/blog/suhelmehta/2020-07-10_gsoc_2020_project_updateufs2_first_evaluation/</guid><description>Hello Everyone!
This is my second post related to my project, Adding UFS2 file system in Haiku
The link below provides the patches that I have worked on till now.
Know more
Work done till now The following points briefly describes what I have done till now:
Mount the root directory of a UFS2 formatted disk
Implemented ufs2_mount() in kernel_interface.cpp Reading inode from disk</description></item><item><title>GSoC2020: First Evaluation</title><link>https://www.haiku-os.org/blog/preetpalkaur/2020-07-09_gsoc2020_first_evaluation/</link><pubDate>Thu, 09 Jul 2020 17:49:28 +0530</pubDate><guid>https://www.haiku-os.org/blog/preetpalkaur/2020-07-09_gsoc2020_first_evaluation/</guid><description>First Evaluation completed :) First of all thanks to my mentor to pass the first evaluation of the GSoC2020.
Before discussing the current workflow, here is the picture of the icons work, I forgot to put it in the previous post!
Icons I have tested the DPI option also with the six-button mouse and the with button mouse in haiku. The DPI is working well.
Now, I am working on the mouse configurations for different mouses.</description></item><item><title>GSoC 2020 Project Update: XFS</title><link>https://www.haiku-os.org/blog/cruxbox/2020-06-06_gsoc_2020_xfs_project_update/</link><pubDate>Sun, 07 Jun 2020 20:45:56 +0530</pubDate><guid>https://www.haiku-os.org/blog/cruxbox/2020-06-06_gsoc_2020_xfs_project_update/</guid><description>Hello there! It&amp;rsquo;s been exactly a month since my last post. Sorry for not posting much!
Work done so far: You can check for the patches here: https://review.haiku-os.org/q/hashtag:gsoc2020+owner:shubhambhagat111%2540yahoo.com
But in short this is what is done,
Made some small change in the File System interface docs to make the working of readdir a little more understandable. Inodes can now be read from disk, it was interesting to see how inode was located on the disk itself though.</description></item><item><title>GSoC 2020 Project: Improving and Extending Services Kit</title><link>https://www.haiku-os.org/blog/leorize/2020-05-31_gsoc_2020_project_improving_and_extending_services_kit/</link><pubDate>Sun, 31 May 2020 15:57:12 -0500</pubDate><guid>https://www.haiku-os.org/blog/leorize/2020-05-31_gsoc_2020_project_improving_and_extending_services_kit/</guid><description>It&amp;rsquo;s pretty long overdue for the post, but here I am.
Introduction: I&amp;rsquo;m Leorize, a past GCI participant and a former active member of HaikuPorts. If you hang around the #haiku IRC channel, chances are that you might know me :)
I started contributing to Haiku around 2017, when I joined GCI. Since then, I&amp;rsquo;ve authored many bug fixes and ports, including some notable ports like libuv, mandoc, pkgconf, and pyqt.</description></item><item><title>Progress report of community bonding period</title><link>https://www.haiku-os.org/blog/preetpalkaur/2020-05-27_progress_report_of_community_bonding_period/</link><pubDate>Wed, 27 May 2020 01:22:11 +0530</pubDate><guid>https://www.haiku-os.org/blog/preetpalkaur/2020-05-27_progress_report_of_community_bonding_period/</guid><description>This blog will contain all the information about what I have done in the community bonding period. It&amp;rsquo;s a bit late to post a blog because I have my exams from 29 May 2020 - 3 June 2020.
My first task was to add the icons to the device list which was completed from my side and now working on its backlogs.
Please have a review
For completing this task first I understood the code of the icon that was used in the media preference.</description></item><item><title>GSoC 2020 Project: Adding XFS file system in Haiku</title><link>https://www.haiku-os.org/blog/cruxbox/2020-05-06_gsoc_2020_project_adding_xfs_filesystem_support/</link><pubDate>Mon, 11 May 2020 23:35:56 +0530</pubDate><guid>https://www.haiku-os.org/blog/cruxbox/2020-05-06_gsoc_2020_project_adding_xfs_filesystem_support/</guid><description>Sorry for the late post, but here we go!
Introduction: I am Shubham Bhagat, a sophomore, currently majoring in Computer Science Engineering from Indian Institute of Information Technology, Sricity, India. I came across Haiku, last November (2019), while I was looking for an operating system I could contribute to. My interest to contribute came from a mini college course. I knew Haiku was also part of GSoC for many years now, so getting the chance to work as an intern and learn here was a no brainer.</description></item><item><title>GSoC 2020 Project: Input Preferences</title><link>https://www.haiku-os.org/blog/preetpalkaur/2020-05-06_gsoc_2020_project_input_preferences/</link><pubDate>Wed, 06 May 2020 15:09:29 +0530</pubDate><guid>https://www.haiku-os.org/blog/preetpalkaur/2020-05-06_gsoc_2020_project_input_preferences/</guid><description>Introduction: I am Preetpal Kaur B.Tech.(3rd year), Computer Science and Engineering(CSE) student of Guru Nanak Dev Engineering College, India. Last year I worked on an Input Preferences project in Haiku as an Outreachy intern 2019, which encapsulates all the preferences in a single dialog window. Now, my aim is to explore this project more by adding the new preferences for the devices and enhance their functionalities.
About my project: Previously, the input preferences contained the UI and the functionalities of mouse, keyboard, keymap and touchpad.</description></item><item><title>GSoC 2020 Project: Adding UFS2 file system in Haiku</title><link>https://www.haiku-os.org/blog/suhelmehta/2020-05-06_gsoc_2020_project_adding_ufs2_file_system_in_haiku/</link><pubDate>Wed, 06 May 2020 14:20:56 +0530</pubDate><guid>https://www.haiku-os.org/blog/suhelmehta/2020-05-06_gsoc_2020_project_adding_ufs2_file_system_in_haiku/</guid><description>Hello everyone! I am one of the selected students for this year Google Summer of Code(GSoC). This is my first blog on Haiku website and in this post I will introduce myself and share details about my project.
Introduction My name is Suhel Mehta and my name on IRC channel is suhel. I am studying Computer Science and Engineering(CSE) at GNDEC(Guru Nanak Dev Engineering College) in Punjab, India. I am also a part of Development team of college that do technical work.</description></item><item><title>No, I'm not Haiku's lead developer</title><link>https://www.haiku-os.org/blog/pulkomandy/2020-01-21_not_lead_developer/</link><pubDate>Tue, 21 Jan 2020 12:14:07 +0200</pubDate><guid>https://www.haiku-os.org/blog/pulkomandy/2020-01-21_not_lead_developer/</guid><description>I have not used this blog in a while, except for the monthly activity report. But it&amp;rsquo;s time for a clarification.
Lately, several people (some newcomers, some long time members of the community) have started contacting me by private messages (either by e-mail or IRC chat). Sometimes it was the right thing to do, there are parts of the code for which I&amp;rsquo;m indeed the best person to ask, and sometimes things are not to be discussed on public channels (for example, because it involves personal data that should stay private).</description></item><item><title>Haiku monthly activity report - 12/2019</title><link>https://www.haiku-os.org/blog/reds/2020-01-14_haiku_monthly_activity_report_-_012019/</link><pubDate>Fri, 17 Jan 2020 13:00:00 +0000</pubDate><guid>https://www.haiku-os.org/blog/reds/2020-01-14_haiku_monthly_activity_report_-_012019/</guid><description>Hello and welcome to the (almost) monthly activity report for December 2019! December wasn&amp;rsquo;t the busiest for Haiku code-wise, but nonetheless we saw a lot of Google Code-In contributions. This year marks the 10th anniversary of GCI, in which Haiku has participated since the very beginning.
On the non-coding side, GCI participants wrote new virtualization guides: alwayslivid wrote a guide on AWS and rewrote the old Xen one, trungnt2910 wrote a guide on qemu, R4H33M wrote a guide on Vultr and redsPL&amp;rsquo;s (hey, that&amp;rsquo;s me!</description></item><item><title>Haiku almost-monthly activity report - October and November 2019</title><link>https://www.haiku-os.org/blog/pulkomandy/2019-12-05_haiku_monthly_activity_report_-_november_2019/</link><pubDate>Thu, 05 Dec 2019 12:14:07 +0200</pubDate><guid>https://www.haiku-os.org/blog/pulkomandy/2019-12-05_haiku_monthly_activity_report_-_november_2019/</guid><description>The last two months have been quite busy for me and I had no time to write up a report. Remember that everyone is welcome to contribute to the website and if you wand to write the report from time to time, this would be much appreciated, by me because I wouldn&amp;rsquo;t need to do it, and by others because they will enjoy reading things written with a different style and perspective.</description></item><item><title>Haiku monthly activity report - September 2019</title><link>https://www.haiku-os.org/blog/pulkomandy/2019-10-03_haiku_monthly_activity_report_-_september_2019/</link><pubDate>Thu, 03 Oct 2019 13:14:07 +0200</pubDate><guid>https://www.haiku-os.org/blog/pulkomandy/2019-10-03_haiku_monthly_activity_report_-_september_2019/</guid><description>Hi there, it&amp;rsquo;s time for the monthly report!
This report covers hrev53461-hrev53529. Let&amp;rsquo;s see what happened this month in Haiku.
Non-x86 support Some initial work for ARM64 was completed by kallisti5. This includes setting up the Haikuports package declarations, writing the early boot files, and in general getting the buildsystem going. Jaroslaw Pelczar also contributed several further patches (some of these still undergoing review), providing the initial interrupt handling support, and various stubs to let things compile</description></item><item><title>Node.js now available in Haiku</title><link>https://www.haiku-os.org/blog/return0e/2019-09-19_nodejs_now_available_in_haiku/</link><pubDate>Thu, 19 Sep 2019 11:45:23 +0100</pubDate><guid>https://www.haiku-os.org/blog/return0e/2019-09-19_nodejs_now_available_in_haiku/</guid><description>TLDR: pkgman install nodejs
As some have already known for a long time, many platforms have had support for writing software in JavaScript or TypeScript with the help of the Node.js runtime and over the years, much of the software written by developers these days have gradually been written in either of those languages. However, Haiku has lacked a Node.js port for quite sometime and it wasn&amp;rsquo;t possible to run or develop JavaScript based software or libraries that depended on the Node.</description></item><item><title>GSOC 2019 Final Report</title><link>https://www.haiku-os.org/blog/rajagopalan/2019-08-15_gsoc_2019_final_report/</link><pubDate>Thu, 15 Aug 2019 20:40:33 +0530</pubDate><guid>https://www.haiku-os.org/blog/rajagopalan/2019-08-15_gsoc_2019_final_report/</guid><description>Introduction Hey there beautiful person reading this post. We are in the endgame now (Ha get it avengers reference!). Yes, Google summer of code 2019 is coming to an end. Phew couldn&amp;rsquo;t say how 3 months passed by, but this is one of my most memorable experiences I will never forget. So let me wrap GSOC with this final report. Buckle up tight it&amp;rsquo;s going to be a long post&amp;hellip;</description></item><item><title>new PVS studio scan</title><link>https://www.haiku-os.org/blog/pulkomandy/2019-07-27_new_pvs_studio_scan/</link><pubDate>Sat, 27 Jul 2019 10:18:34 +0200</pubDate><guid>https://www.haiku-os.org/blog/pulkomandy/2019-07-27_new_pvs_studio_scan/</guid><description>PVS studio has just published a series of 3 articles looking over errors and bugs they identified in our sourcecode. PVS is a code static analysis tool that identifies code likely to be incorrect.
They had already run a similar scan back in 2015. At the time, their tools ran on Windows only which had made this quite a challenge for them. They are now more Linux friendly, so it was much easier for them to perform the scan.</description></item><item><title>Coding week 4,5,6</title><link>https://www.haiku-os.org/blog/rajagopalan/2019-07-18_coding_week_456/</link><pubDate>Thu, 18 Jul 2019 17:14:41 +0530</pubDate><guid>https://www.haiku-os.org/blog/rajagopalan/2019-07-18_coding_week_456/</guid><description>Introduction Hello everybody. Sorry for not able to post something for very long time! Previous week was pretty rough for me. So let me tell few things about the state of the port.
We have working IPC (using BMessages)
We have working Minibrowser (that could handle few call back events like navigating to url, going back and forward..)
A partially working network process
Current Work So we decided to get the rendering done.</description></item><item><title>[GSoc 2019] Weeks #4, #5 and #6 progress report</title><link>https://www.haiku-os.org/blog/brj/2019-07-16_gsoc_2019_weeks_4_5_and_6_progress_report/</link><pubDate>Tue, 16 Jul 2019 05:11:20 +0530</pubDate><guid>https://www.haiku-os.org/blog/brj/2019-07-16_gsoc_2019_weeks_4_5_and_6_progress_report/</guid><description>Hello everybody! It&amp;rsquo;s been a while since my previous post.
This post is a short summary of all work done upto this point.
During the past few weeks, I was able to add the following features to the current btrfs implementation
Creating new files The basic algorithm behind creating new files is allocating a new inode, updating the fs tree to reflect this, creating a hard link in the directory containing the file and finally updating the cache.</description></item><item><title>Coding week no 2 and 3</title><link>https://www.haiku-os.org/blog/rajagopalan/2019-06-20_coding_week_no_2_and_3/</link><pubDate>Thu, 20 Jun 2019 17:11:01 +0530</pubDate><guid>https://www.haiku-os.org/blog/rajagopalan/2019-06-20_coding_week_no_2_and_3/</guid><description>Report for Coding Week #2 and #3 Love that your beautiful face is reading my Blog today❤️. First all I woul like to ask sorry to my fans (if any 😅😂) for delaying the posts. Prepare to get blown away🎉🎉💻
Ok let's all jump into the world of webkit shall we?
History is awesome (just kidding 😉😉) Lets rewind a bit! Getting stuff to compile and build (painful but totally worth it) Oh ya not to mention :making friends!</description></item><item><title>[GSoC 2019] Weeks #1, #2 and #3 progress reports</title><link>https://www.haiku-os.org/blog/brj/2019-06-17_gsoc_2019_weeks_1_2_and_3_progress_reports/</link><pubDate>Mon, 17 Jun 2019 22:43:10 +0530</pubDate><guid>https://www.haiku-os.org/blog/brj/2019-06-17_gsoc_2019_weeks_1_2_and_3_progress_reports/</guid><description>Hello everybody! It&amp;rsquo;s been a while since my previous post.
This post is a short summary of all the work done upto this point. For a detailed report of every day, visit this blog I set up using Blogger.
Week 1 As mentioned in my proposal, the target for week #1 was document the current btrfs implementation. As part of this, I documented the following classes
Chunk Inode BTree Attribute AttributeIterator DirectoryIterator Week #1 went smoothly without any problems.</description></item><item><title>Coding week #1</title><link>https://www.haiku-os.org/blog/rajagopalan/2019-06-04_coding_week_1/</link><pubDate>Tue, 04 Jun 2019 17:04:02 +0530</pubDate><guid>https://www.haiku-os.org/blog/rajagopalan/2019-06-04_coding_week_1/</guid><description>Hello everybody. This is me Rajagopalan working on getting webkit2 on haiku. Previously as you guys know we were trying to get IPC working. Well we have succeeded in that after hitting some obstacles.
Message passing should not involve mainloop it should be totally dependent on the workqueue only. As the mainloop can be blocked because of JS Execution which leaves slow performance or even crash. Also we stumbled upon an IPC deadlock when we used mainloop (main application loop) as a proxy to send and receive messages.</description></item><item><title>Mid Community Bonding--Progress</title><link>https://www.haiku-os.org/blog/rajagopalan/2019-05-20_mid_community_bonding-progress/</link><pubDate>Mon, 20 May 2019 23:31:39 +0530</pubDate><guid>https://www.haiku-os.org/blog/rajagopalan/2019-05-20_mid_community_bonding-progress/</guid><description>Introduction: Hello Everybody, I am G.Rajagopalan working on porting webkit2 to haiku as a part of my GSoC project. So here I am to share our experiences and work regarding the project 😄.
Bonding Process: I have been with haiku for the past 6 (or 7 months I think) which went like a blink of an eye. I can definitely say that it is a memorable journey with Haiku. I owe it to the beautiful and friendly people who work for haiku.</description></item><item><title>Haiku to mentor 3 interns in Outreachy and GSoC</title><link>https://www.haiku-os.org/blog/pulkomandy/2019-05-08_haiku_to_mentor_3_interns_in_outreachy_and_gsoc/</link><pubDate>Wed, 08 May 2019 10:20:35 +0200</pubDate><guid>https://www.haiku-os.org/blog/pulkomandy/2019-05-08_haiku_to_mentor_3_interns_in_outreachy_and_gsoc/</guid><description>Hi there!
The selected students for both Outreachy and Google Summer of Code were publiched on Tuesday.
This year we will be mentoring 3 students bringing new features to Haiku over the summer.
GSoC is a program run and funded by Google, where we (and many other open source projects) mentor students over the summer to get them up to speed with contributing. Google gives them a stipend, saving the need for a summer job and allowing them to focus on their work.</description></item><item><title>Introducing myself gsoc 2019</title><link>https://www.haiku-os.org/blog/rajagopalan/2019-05-08_introducing_myself_gsoc_2019/</link><pubDate>Wed, 08 May 2019 12:19:38 +0530</pubDate><guid>https://www.haiku-os.org/blog/rajagopalan/2019-05-08_introducing_myself_gsoc_2019/</guid><description>BAlert(&amp;#34;Hello World&amp;#34;,&amp;#34;Introducing myself&amp;#34;, &amp;#34;Awesome&amp;#34;,&amp;#34;Cool&amp;#34;,&amp;#34;Excited&amp;#34;,B_SUMMER_IS_FUN); Introduction: I am RAJAGOPALAN GANGADHARAN doing Computer science Engineering in India and a GSOC 2019 participant with aim of porting Webkit2 to Haiku. First of all I would like to thank everybody for giving me this wonderful opportunity and I promise to not let the hopes down. I didn&amp;rsquo;t know much about BeOS until I saw Haiku. Well to be honest I fell in love with the GUI of haiku.</description></item><item><title>[GSoC 2019] Improving the btrfs filesystem</title><link>https://www.haiku-os.org/blog/brj/2019-05-07_gsoc_2019_improving_the_btrfs_filesystem/</link><pubDate>Tue, 07 May 2019 23:57:25 +0530</pubDate><guid>https://www.haiku-os.org/blog/brj/2019-05-07_gsoc_2019_improving_the_btrfs_filesystem/</guid><description>Introduction Hello, world!
As some of you might be aware, I&amp;rsquo;m one of the students selected for GSoC 2019. My name is Bharathi Ramana Joshi. You may know me as brj, my initials, from the mailing lists and IRC channel. I&amp;rsquo;m pursuing an underguate degree in Computer Science and Engineering from Keshav Memorial Institute of Technology, India.
Project: Improving the btrfs filesystem As the title suggests, I shall be working on Haiku&amp;rsquo;s btrfs implementation for most of the summer.</description></item><item><title>Haiku R1/beta1 in Vagrant</title><link>https://www.haiku-os.org/blog/kallisti5/2018-11-27_haiku_r1beta1_in_vagrant/</link><pubDate>Tue, 27 Nov 2018 19:37:27 -0600</pubDate><guid>https://www.haiku-os.org/blog/kallisti5/2018-11-27_haiku_r1beta1_in_vagrant/</guid><description>Over the last year, I have been slowly pushing patches upstream to Vagrant introducing native Haiku support. Vagrant is an open-source tool to build and maintain portable virtual development environments. Essentially, Vagrant lets you deploy and rapidly customize a Haiku virtual machine with programmatic scripts.
Since we now have a new stable release, I have prepared some updated R1/beta1 images to play with under an official Haiku, Inc. account.
Requirements A linux, OS X, or Windows machine.</description></item><item><title>Report of BeGeistert 031 in Hamburg</title><link>https://www.haiku-os.org/blog/humdinger/2018-11-09_report_of_begeistert_031_in_hamburg/</link><pubDate>Fri, 09 Nov 2018 19:26:25 +0100</pubDate><guid>https://www.haiku-os.org/blog/humdinger/2018-11-09_report_of_begeistert_031_in_hamburg/</guid><description>Only slighty bigger than 2017's "Kernel Debugging Camp" in Toulouse, this year's regular BeGeistert 031 (on its last day affectionately mottoed "The Dirty One") was held from November 1st to 4th in Hamburg.
As in the past when BeGeistert was in Düsseldorf, we had a nice conference room in a Youth Hostel, just with a slighty less nice bedroom. Toiletts and showers on the floor instead of in every room.</description></item><item><title>Partial Outage</title><link>https://www.haiku-os.org/blog/kallisti5/2018-11-06_partial_outage/</link><pubDate>Tue, 06 Nov 2018 00:25:52 -0600</pubDate><guid>https://www.haiku-os.org/blog/kallisti5/2018-11-06_partial_outage/</guid><description>This evening a standard operating system upgrade has once again turned fatal.
Our infrastructure still depends on a single bare metal server at Hetzner which continues to be our downfall. This evening a (tested) OS upgrade failed resulting in maui going MIA. I requested KVM access to attempt repair of maui after it was missing for ~15 minutes, however we were stuck waiting almost 2 hours for the KVM from Hetzner.</description></item><item><title>Repository Update</title><link>https://www.haiku-os.org/blog/kallisti5/2018-09-11_repository_update/</link><pubDate>Tue, 11 Sep 2018 08:54:35 -0500</pubDate><guid>https://www.haiku-os.org/blog/kallisti5/2018-09-11_repository_update/</guid><description>&lt;p>A small notification that we have updated our repository URL&amp;rsquo;s in preperation for R1 Beta 1.
This change will ensure that repository links remain consistant through R1 Beta 1 and beyond.&lt;/p></description></item><item><title>[GSoC 2018: SDHCI MMC Driver]: Week #11</title><link>https://www.haiku-os.org/blog/krish_iyer/2018-08-06_gsoc_2018_sdhci_mmc_driver_week_11/</link><pubDate>Mon, 06 Aug 2018 21:24:03 +0530</pubDate><guid>https://www.haiku-os.org/blog/krish_iyer/2018-08-06_gsoc_2018_sdhci_mmc_driver_week_11/</guid><description>Hello everyone, We are in the final week of GSoC'18 program and yesterday our code has successfully merged. It got crashed in the first build because we thought we would add the code but disable the build currently but we didn&amp;rsquo;t test the case when device manager will try to find the driver in a certain directory which we hardcoded at the time of loading the module. So we just changed it to an OR condition where it won&amp;rsquo;t be able to find the driver binary but still be able to boot the OS in any case.</description></item><item><title>[GSoC 2018: SDHCI MMC Driver]: Week #10</title><link>https://www.haiku-os.org/blog/krish_iyer/2018-07-31_gsoc_2018_sdhci_mmc_driver_week_10/</link><pubDate>Tue, 31 Jul 2018 23:58:43 +0530</pubDate><guid>https://www.haiku-os.org/blog/krish_iyer/2018-07-31_gsoc_2018_sdhci_mmc_driver_week_10/</guid><description>Hello everyone, this week we have tried to get the response from the command but unfortunately, it didn&amp;rsquo;t work out. In the meantime, I have submitted the code for review and PulkoMandy had already reviewed once. I have been going through Linux patches1 2 which are related to the issue we are currently facing.
I have done following improvements in the code
Disabled adding drivers to the kernel, removed statements from</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 13</title><link>https://www.haiku-os.org/blog/hrily/2018-07-30_gsoc_2018_-_trackgit_progress_report_13/</link><pubDate>Mon, 30 Jul 2018 18:04:31 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-07-30_gsoc_2018_-_trackgit_progress_report_13/</guid><description>This is the thirteenth progress report for TrackGit project. I did the following in last week:
Since, the planned work from the proposal is done, Stephan and I agreed on doing some UI improvements to the existing views. Stephan suggested me some improvements, which I did in last week. These are:
Added progress bar to Clone Window I added a progress bar to the clone window. This will give better information about the clone progress.</description></item><item><title>[GSoC 2018: SDHCI MMC Driver]: Week #9</title><link>https://www.haiku-os.org/blog/krish_iyer/2018-07-24_gsoc_2018_sdhci_mmc_driver_week_9/</link><pubDate>Tue, 24 Jul 2018 19:03:36 +0530</pubDate><guid>https://www.haiku-os.org/blog/krish_iyer/2018-07-24_gsoc_2018_sdhci_mmc_driver_week_9/</guid><description>Hello everyone, here we are with another update on the project. Last week we have started with installing interrupt handler, so basically we will pass the address of a function while installing the interrupt handler, later when an interrupt occurs that function will be called.
We opted for pin-based interrupt handler, which is one of the levels of interrupt handling. I have explained them in previous blogs.
Instructions to install an interrupt handler: bus-&amp;gt;irq = pciInfo-&amp;gt;u.</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 12</title><link>https://www.haiku-os.org/blog/hrily/2018-07-23_gsoc_2018_-_trackgit_progress_report_12/</link><pubDate>Mon, 23 Jul 2018 18:11:03 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-07-23_gsoc_2018_-_trackgit_progress_report_12/</guid><description>This is the twelveth progress report for TrackGit project. I did the following in last week:
Implemented Log Viewer I implemented a log viewer in TrackGit. It shows a window with the commits in the repository so far. Link to commit.
The following screenshot shows the log viewer:
I also added tests for the log command. Link to commit.</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 11</title><link>https://www.haiku-os.org/blog/hrily/2018-07-14_gsoc_2018_-_trackgit_progress_report_11/</link><pubDate>Sat, 14 Jul 2018 12:14:35 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-07-14_gsoc_2018_-_trackgit_progress_report_11/</guid><description>This is the eleventh progress report for TrackGit project. I did the following in last week:
Implemented Create Branch command I implemented Create Branch command. This command creates a branch at head of the repository. There is also an option to switch to the newly created branch. Link to commit.
The following screenshot shows Create Branch window:
Implemented Switch Branch command I implemented option to switch branch. The Switch Branch window gives user with a drop down list of branches in current repository.</description></item><item><title>[GSoC 2018: SDHCI MMC Driver]: Third Phase Outline</title><link>https://www.haiku-os.org/blog/krish_iyer/2018-07-12_gsoc_2018_sdhci_mmc_driver_third_phase_plan/</link><pubDate>Thu, 12 Jul 2018 10:52:58 +0530</pubDate><guid>https://www.haiku-os.org/blog/krish_iyer/2018-07-12_gsoc_2018_sdhci_mmc_driver_third_phase_plan/</guid><description>So here we are in the final week of the second phase of this project. I would like to address what was planned for this phase and what we have achieved and will proceed to plan for the third phase.
Second Phase Highlights We were successful in register mapping through MMUIO. We have created a bus manager but not linked with controller ATM. Interrupts have not been implemented but also not required in this phase.</description></item><item><title>[GSoC 2018: SDHCI MMC Driver]: Week #8</title><link>https://www.haiku-os.org/blog/krish_iyer/2018-07-09_gsoc_2018_sdhci_mmc_driver_week_8/</link><pubDate>Mon, 09 Jul 2018 20:09:54 +0530</pubDate><guid>https://www.haiku-os.org/blog/krish_iyer/2018-07-09_gsoc_2018_sdhci_mmc_driver_week_8/</guid><description>Hey guys! Last week we have improved the code and made it more readable. We have completed the reset and clock sequence and proceed with power sequence. In the 4th step of the sequence, it asks to get the Operation Conditions Register(OCR) value of SD card. In the SD host controller spec, in command register there is command index bits which mention about setting up command number specified in bits 45-40 of the command-format in SD Memory Card Physical Layer Specification.</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 10</title><link>https://www.haiku-os.org/blog/hrily/2018-07-09_gsoc_2018_-_trackgit_progress_report_10/</link><pubDate>Mon, 09 Jul 2018 18:05:52 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-07-09_gsoc_2018_-_trackgit_progress_report_10/</guid><description>This is the tenth progress report for TrackGit project. I did the following in last week.
Implemented Show conflicts Window Last week I implemented Pull command. While pulling changes, sometimes there might be conflicts while merging the changes. These conflicts are shown when pull command execution is finished. In addition to that, I implemented a &amp;ldquo;Show conflicts&amp;rdquo; option to see the current conflicting files in the repository. This option is only shown when there are conflicts in the repository.</description></item><item><title>LibreOffice for Haiku, a not-so-short story</title><link>https://www.haiku-os.org/blog/kapix/2018-07-08_libreoffice_for_haiku_a_not-so-short_story/</link><pubDate>Sun, 08 Jul 2018 02:16:12 +0200</pubDate><guid>https://www.haiku-os.org/blog/kapix/2018-07-08_libreoffice_for_haiku_a_not-so-short_story/</guid><description>As many of you are already aware, LibreOffice is now available on Haiku. This has been a long journey that has started for me around 2014, when I was looking for things I could do for the project. LibreOffice port was one of those things. It seemed to need so much effort, most people didn&amp;rsquo;t even want to start. That&amp;rsquo;s understandable given people were busy developing the OS. However, it&amp;rsquo;s not the first time someone tried to do it.</description></item><item><title>The State of Rust on Haiku - July 2018</title><link>https://www.haiku-os.org/blog/nielx/2018-07-05_the_state_of_rust_on_haiku/</link><pubDate>Thu, 05 Jul 2018 07:31:51 +0200</pubDate><guid>https://www.haiku-os.org/blog/nielx/2018-07-05_the_state_of_rust_on_haiku/</guid><description>The Rust programming language belongs to the category of modern programming languages that aim to provide a reliable and safe alternative to C and C++. In the past few years, few people have been working on getting the compiler, and the other build tools to our platform. And in fact, since Rust 1.0 there have been reasonably working binary packages for building Rust projects on Haiku.
With the recent addition of Rust 1.</description></item><item><title>[GSoC 2018: SDHCI MMC Driver]: Week #7</title><link>https://www.haiku-os.org/blog/krish_iyer/2018-07-03_gsoc_2018_sdhci_mmc_driver_week_7/</link><pubDate>Tue, 03 Jul 2018 18:27:58 +0530</pubDate><guid>https://www.haiku-os.org/blog/krish_iyer/2018-07-03_gsoc_2018_sdhci_mmc_driver_week_7/</guid><description>Finally, we got the register mapping work and they are responsive, we have tested by enabling software reset bit and it has all the default values of registers which are set by Qemu except the present state register and capabilities register. These both should be left unaffected as mentioned in the spec. We are following SD Host specification version 1.00 for now, which also doesn&amp;rsquo;t support UHS but Qemu seems to be supporting it well.</description></item><item><title>[GSoC 2018: XFS support] Week #7 and #8</title><link>https://www.haiku-os.org/blog/abx1/2018-07-02_gsoc_2018_xfs_support_week_7_and_8/</link><pubDate>Mon, 02 Jul 2018 21:28:28 +0530</pubDate><guid>https://www.haiku-os.org/blog/abx1/2018-07-02_gsoc_2018_xfs_support_week_7_and_8/</guid><description>Hi all,
I have been reading through the XFS documentation and looking more into the on-disk structures. Previously, I had looked into AG inode management, but not inode core structure. So I thought it would be better to look into how files, directories and links are stored on disk with inodes.
I implemented struct xfs_dinode_core, the core part of the inode, which includes stat data information about data and attribute forks.</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 9</title><link>https://www.haiku-os.org/blog/hrily/2018-07-02_gsoc_2018_-_trackgit_progress_report_9/</link><pubDate>Mon, 02 Jul 2018 18:00:27 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-07-02_gsoc_2018_-_trackgit_progress_report_9/</guid><description>This is the ninth progress report for TrackGit project. I did the following in last week.
Implemented Pull command I implemented the equivalent of git pull. The implementation was a little trickier as there was no direct API for pull in libgit2. The git pull command is combination of a fetch and then a merge. In merge there are three cases:
Repository up to date Fast forward Merge commit The merge commit can lead to conflicts.</description></item><item><title>[GSoC 2018: SDHCI MMC Driver]: Week #6</title><link>https://www.haiku-os.org/blog/krish_iyer/2018-06-26_gsoc_2018_sdhci_mmc_driver_week_6/</link><pubDate>Tue, 26 Jun 2018 15:04:41 +0530</pubDate><guid>https://www.haiku-os.org/blog/krish_iyer/2018-06-26_gsoc_2018_sdhci_mmc_driver_week_6/</guid><description>Hello everyone! Here&amp;rsquo;s the update of week #6, in the last update we were not able to access the registers. When we tried mapping it, there were all zeros. so we knew there&amp;rsquo;s something wrong in the way we were accessing the register and in between this we got to know that qemu emulation for sdhc hardware only supports spec version 2 and 3 and the spec which we intended to implement was 4.</description></item><item><title>[NOTICE] Data Security Incident</title><link>https://www.haiku-os.org/blog/kallisti5/2018-06-25_data_security_incident/</link><pubDate>Mon, 25 Jun 2018 18:51:48 -0500</pubDate><guid>https://www.haiku-os.org/blog/kallisti5/2018-06-25_data_security_incident/</guid><description>This afternoon, I noticed some strange heavy load on our Postgres database. After some initial investigation, it was discovered that a server misconfiguration left our Postgres database open to the internet since late January 2018.
Impact Translation services (i18n.haiku-os.org) Email addresses Hashed passwords (old accounts sha1, newer accounts pbkdf2_sha256) Trac (dev.haiku-os.org) Usernames Some emails (based on last session age) We got extremely lucky that user passwords were not contained in the database for Trac.</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 8</title><link>https://www.haiku-os.org/blog/hrily/2018-06-25_gsoc_2018_-_trackgit_progress_report_8/</link><pubDate>Mon, 25 Jun 2018 18:24:36 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-06-25_gsoc_2018_-_trackgit_progress_report_8/</guid><description>This is the eighth progress report for TrackGit project. I did the following in last week.
Implemented Commit command I implemented the equivalent of git commit in TrackGit. The implementation was a little bit trickier because libgit2 used a different logic when the commit is first or non-first. The link to commit.
Below is a screenshot of Commit window.
Added test for commit command I also added the test case for commit command.</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 7</title><link>https://www.haiku-os.org/blog/hrily/2018-06-18_gsoc_2018_-_trackgit_progress_report_7/</link><pubDate>Mon, 18 Jun 2018 18:34:50 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-06-18_gsoc_2018_-_trackgit_progress_report_7/</guid><description>This is the seventh progress report for TrackGit project. I did the following in last week.
Merge Request on Haiku At the start of the project, I had made a merge request on Haiku regarding Dynamic Add on menu. There were few comments on it which I forgot to check. I addressed those comments. Link to the merge request.
Implemented Add files command I implemented the Add files command. This option adds the selected files to the git repository.</description></item><item><title>[GSoC 2018: SDHCI MMC Driver]: Second Phase Outline</title><link>https://www.haiku-os.org/blog/krish_iyer/2018-06-14_gsoc_2018_sdhci_mmc_driver_second_phase_outline/</link><pubDate>Thu, 14 Jun 2018 11:51:57 +0530</pubDate><guid>https://www.haiku-os.org/blog/krish_iyer/2018-06-14_gsoc_2018_sdhci_mmc_driver_second_phase_outline/</guid><description>Hey, folks! So we are at the end of first phase of the project and I had expected that I would be able to implement PIO but it seems that I have lagged a bit. Till now we have got our controller driver setting up the mmc bus and mmc disk driver to publish a slot. To implement PIO before DMA, also requires register mapping which we are currently working on.</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 6</title><link>https://www.haiku-os.org/blog/hrily/2018-06-11_gsoc_2018_-_trackgit_progress_report_6/</link><pubDate>Mon, 11 Jun 2018 19:10:45 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-06-11_gsoc_2018_-_trackgit_progress_report_6/</guid><description>This is the sixth progress report for TrackGit project. I did the following in last week.
Addressed Stephen&amp;rsquo;s comments My mentor Stephen had put up few comments on my commits so far. I addressed them earlier this week. You can have a look at the comments thread here and here.
Made clone process threaded The initial implementation of clone was blocking the UI thread. I used the pthread library to make the clone processes threaded.</description></item><item><title>[GSoC 2018: SDHCI MMC Driver]: Week #5</title><link>https://www.haiku-os.org/blog/krish_iyer/2018-06-11_gsoc_2018_sdhci_mmc_driver_week_5/</link><pubDate>Mon, 11 Jun 2018 18:34:48 +0530</pubDate><guid>https://www.haiku-os.org/blog/krish_iyer/2018-06-11_gsoc_2018_sdhci_mmc_driver_week_5/</guid><description>Hey, here I am with another update! Last time I mentioned about splitting up the module but due to time constraint we agreed to skip that currently and move forward. After setting up the bus, I thought it would be bus manager which needs to be setted up for data transfer and other read and write operations but it turns out to few things which need to be done before that and it&amp;rsquo;s actually not the bus manager who do these operations, it will just create an instance of the interrupts and the operations to be done, and call back after it&amp;rsquo;s done.</description></item><item><title>[GSoC 2018: XFS support] Week #6</title><link>https://www.haiku-os.org/blog/abx1/2018-06-05_gsoc_2018_xfs_support_week_6/</link><pubDate>Tue, 05 Jun 2018 13:48:45 +0530</pubDate><guid>https://www.haiku-os.org/blog/abx1/2018-06-05_gsoc_2018_xfs_support_week_6/</guid><description>Hey folks,
After implementing the superblock structure, my next task was to get the identify_partition hook working. I implemented dummy hooks (xfs_identify_parition, xfs_scan_partition) which logs some keyword so that I can trace how it&amp;rsquo;s working and in what order hooks are being called. I didn&amp;rsquo;t focus on mount hook at this point. While building I was getting the segmentation fault and wasn&amp;rsquo;t able to proceed. Adrien suggested to use GDB and try to debug and see what wrong.</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 5</title><link>https://www.haiku-os.org/blog/hrily/2018-06-04_gsoc_2018_-_trackgit_progress_report_5/</link><pubDate>Mon, 04 Jun 2018 20:02:08 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-06-04_gsoc_2018_-_trackgit_progress_report_5/</guid><description>This is the fifth progress report for TrackGit project. I did the following in last week.
Status Test Added test for status command. Link to commit.
Status window Previously, the status was shown in a BAlert. This was not good if the status text was long. So, I implemented a Status window with scrollable text view. Link to Commit.
Implemented TrackGit Application The major change in the TrackGit till now is the implementation of TrackGit Application.</description></item><item><title>[GSoC 2018: SDHCI MMC Driver]: Week #4</title><link>https://www.haiku-os.org/blog/krish_iyer/2018-06-04_gsoc_2018_sdhci_mmc_driver_week_4/</link><pubDate>Sun, 03 Jun 2018 21:11:13 +0530</pubDate><guid>https://www.haiku-os.org/blog/krish_iyer/2018-06-04_gsoc_2018_sdhci_mmc_driver_week_4/</guid><description>Hey everyone! here I am with another update. Last time I had concluded-&amp;ldquo;PCI class is not discoverable to device manager&amp;rdquo;, it was actally a bit wrong. So korli explained that device manager won&amp;rsquo;t load a driver which system doesn&amp;rsquo;t know so in order for device manager to consider sdhci bus device, it has to be added under a condition of the devices of same type. So we added it under &amp;ldquo;disk&amp;rdquo;.</description></item><item><title>[GSoC 2018: XFS support] Week #3, #4 and #5</title><link>https://www.haiku-os.org/blog/abx1/2018-05-28_gsoc_2018_xfs_support_week_3_4_and_5/</link><pubDate>Mon, 28 May 2018 22:19:10 +0530</pubDate><guid>https://www.haiku-os.org/blog/abx1/2018-05-28_gsoc_2018_xfs_support_week_3_4_and_5/</guid><description>Hey everyone,
I was not able to put in complete effort into GSoC, as I was having exams in my University during the past few weeks. I&amp;rsquo;ll be regular with the updates starting with this one.
I was encountering issues related to header files and xfs_shell wasn&amp;rsquo;t bulding properly. It was the problem in JamFile that FS_SHELL wasn&amp;rsquo;t added as an additional define. Doing so made sure that fs-shell wrappers are properly loaded.</description></item><item><title>[GSoC 2018: SDHCI MMC Driver]: Week #3</title><link>https://www.haiku-os.org/blog/krish_iyer/2018-05-28_gsoc_2018_sdhci_mmc_driver_week_3/</link><pubDate>Mon, 28 May 2018 20:35:18 +0530</pubDate><guid>https://www.haiku-os.org/blog/krish_iyer/2018-05-28_gsoc_2018_sdhci_mmc_driver_week_3/</guid><description>Sorry folks! for the delay in the updates. I was pretty much occupied by end term exams. After initial setup, we divided the our initial plan in following steps.
Discover PCI bus Filter out SDHC device from the connected devices on the bus. Register the device as the child node. As I was able to load the driver, it exited in between somewhere from the supports_device(). So I broke the conditions where it checks for the bus, device ID and vendor ID, in order to see where exactly it was not satisfying the condition.</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 4</title><link>https://www.haiku-os.org/blog/hrily/2018-05-28_gsoc_2018_-_trackgit_progress_report_4/</link><pubDate>Mon, 28 May 2018 18:18:25 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-05-28_gsoc_2018_-_trackgit_progress_report_4/</guid><description>This is the fourth progress report for TrackGit project. I did the following in last week.
Status Command I implemented the status command. This will pop up a window showing status of the current repository. This menu item will be shown only when the current directory is in some repo path.
The following screenshot shows the Status Window:
Solved a bug in Status While implementing Status commmand, I ran into a bug which took some of my time.</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 3</title><link>https://www.haiku-os.org/blog/hrily/2018-05-21_gsoc_2018_-_trackgit_progress_report_3/</link><pubDate>Mon, 21 May 2018 18:24:19 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-05-21_gsoc_2018_-_trackgit_progress_report_3/</guid><description>This is the third progress report for TrackGit project. I did the following in last week.
Clone Window. I implemented Clone window. It looks something like following:
Clone Command I implemented Clone command. Unfortunately, I&amp;rsquo;m blocked with some ssl object error.
Init Implemented Init of empty repository. Following are steps to Init a git repo through TrackGit:
Init Test I added tests for Init. This is done with the help of CppUnit testing framework.</description></item><item><title>Rune - Haiku Images on ARM</title><link>https://www.haiku-os.org/blog/kallisti5/2018-05-19_rune_-_haiku_images_on_arm/</link><pubDate>Sat, 19 May 2018 15:33:42 -0500</pubDate><guid>https://www.haiku-os.org/blog/kallisti5/2018-05-19_rune_-_haiku_images_on_arm/</guid><description>Up until recently, Haiku builds for ARM have targetted individual ARM boards. The compile process for ARM images required two things: an architecture, and a target board (such as the Raspberry Pi 2). This board setting adjusted a large number of defines throughout Haiku at compile time to set the operating system up for the target ARM device. The board selection also handled placing all the propriety bits (a lot of which have sketchy licensing) into the Haiku image during compile.</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 2</title><link>https://www.haiku-os.org/blog/hrily/2018-05-15_gsoc_2018_-_trackgit_progress_report_2/</link><pubDate>Tue, 15 May 2018 19:16:57 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-05-15_gsoc_2018_-_trackgit_progress_report_2/</guid><description>This is the second progress report for TrackGit project. I did the following in last week.
TrackGit repo I created the repository for TrackGit. You can follow it at https://github.com/Hrily/TrackGit.
I also created Wiki to maintain the Weekly Progress report.
Icon for TrackGit I added icon to project using a rdef file.
LibGit2 TrackGit uses libgit2 as interface for git. I tried compiling TrackGit using libgit2 but getting some header errors.</description></item><item><title>[GSoC 2018: XFS support] Week #1 and #2</title><link>https://www.haiku-os.org/blog/abx1/2018-05-07_gsoc_2018_xfs_support_week_1_and_2/</link><pubDate>Mon, 07 May 2018 21:30:08 +0530</pubDate><guid>https://www.haiku-os.org/blog/abx1/2018-05-07_gsoc_2018_xfs_support_week_1_and_2/</guid><description>Hey everyone, I have been working on the project for the past two weeks and would love to share my update here as well.
My first task is to create an empty file system module and test the same on fs_shell. As fs_shell provides an interface to build and test the file system in a commandline tool, it will be easier to test the file system module.
I made an XFS image file using the following commands:</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 1</title><link>https://www.haiku-os.org/blog/hrily/2018-05-07_gsoc_2018_-_trackgit_progress_report_1/</link><pubDate>Mon, 07 May 2018 15:30:03 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-05-07_gsoc_2018_-_trackgit_progress_report_1/</guid><description>Hie
This is my first progress report. Following are the things I did in last couple of weeks:
Set up the Environment. Started on Dynamic Tracker Menu. Had a nice chat with my mentor Stippi. Learnt how to build Haiku on Haiku. Especially, building and running the Tracker module. Faced few difficulties in Dynamic Tracker Menu. Solved them with some help. About Dynamic Tracker Menu Dynamic Tracker Menu lets addon add items to the popup menu of Tracker based on the files selected.</description></item><item><title>[GSoC 2018: SDHCI MMC Driver]: Week #1 and #2</title><link>https://www.haiku-os.org/blog/krish_iyer/2018-05-06_gsoc_2018_sdhci_mmc_driver_week_1_and_2/</link><pubDate>Sun, 06 May 2018 17:58:47 +0530</pubDate><guid>https://www.haiku-os.org/blog/krish_iyer/2018-05-06_gsoc_2018_sdhci_mmc_driver_week_1_and_2/</guid><description>Hey folks! here&amp;rsquo;s the updates of past two weeks on the project!
I have cloned the latest haiku source and built the image file. With the generated image file I have emulated sdhci-pci device successfully. Following are the instructions to be followed:
Cloning the source code git clone https://github.com/haiku/haiku.git git clone https://github.com/haiku/buildtools.git Compiling Source Code Create a directory where you are going to save the build image and related files</description></item><item><title>GSoC 2018: XFS support for Haiku</title><link>https://www.haiku-os.org/blog/abx1/2018-04-25_gsoc_2018_xfs_support_for_haiku/</link><pubDate>Wed, 25 Apr 2018 22:29:40 +0530</pubDate><guid>https://www.haiku-os.org/blog/abx1/2018-04-25_gsoc_2018_xfs_support_for_haiku/</guid><description>Hello everyone! My name is Abhinand and I am really happy to say that I am one of the people who has been selected for GSoC 2018. And more importantly, I will be working on adding support for XFS. If you would like to ask something to me/track my progress, I have added the contact links at the bottom of this page.
I would like to begin with a short introduction about me and the work that I did so far.</description></item><item><title>[GSoC 2018] SDHCI MMC Driver</title><link>https://www.haiku-os.org/blog/krish_iyer/2018-04-25_gsoc_2018sdhci_mmc_driver/</link><pubDate>Wed, 25 Apr 2018 22:08:09 +0530</pubDate><guid>https://www.haiku-os.org/blog/krish_iyer/2018-04-25_gsoc_2018sdhci_mmc_driver/</guid><description>Hello everyone! I am B Krishnan Iyer(irc: krish-iyer, telegram: krish_iyer trac: krish_iyer, github: krish-iyer), currently pursuing bachelor's in Electrical and Electronics Engineering at Amrita University. I am one of the three GSoC participants with Haiku. I am greatful to everyone for accepting me as an intern. This summer I will be developing SDHCI MMC driver.
About Me My area of interest lies in Embedded system, apart from academics, I work on developing drivers for microcontrollers.</description></item><item><title>[GSoC 2018] TrackGit - Git Addon for Tracker</title><link>https://www.haiku-os.org/blog/hrily/2018-04-25_gsoc_2018_trackgit_-_git_addon_for_tracker/</link><pubDate>Wed, 25 Apr 2018 17:58:59 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-04-25_gsoc_2018_trackgit_-_git_addon_for_tracker/</guid><description>Hie, I&amp;rsquo;m Hrishikesh Hiraskar (IRC/Trac/Github: hrily) from India. I will be working on TrackGit, a git addon for Git version control for Tracker under GSoC 2018. I&amp;rsquo;m really excited to be a part of Haiku community and for doing this project. I&amp;rsquo;m currently doing my B.Tech. in Computer Engineering at National Institute of Technology Karnataka, Surathkal. You can find more information about me on my website or my blog.
About TrackGit The proposed project focuses on implementing an Addon for Tracker to support the Git version control system.</description></item><item><title>GCI 2017 Wrap Up Report</title><link>https://www.haiku-os.org/news/2018-02-02_gci_2017_wrap_up_report/</link><pubDate>Fri, 02 Feb 2018 00:13:41 +0530</pubDate><guid>https://www.haiku-os.org/news/2018-02-02_gci_2017_wrap_up_report/</guid><description>Like all good things Google Code-In 2017 comes to an end, this year the program attracted over 3555 students in total for Google Code-In and out of those about ⅓ of the students claimed at least one task for Haiku, with 255 students completing at least one Haiku task. Haiku is also proud of its history of getting selected each year in Google’s Code-In. Just like the other 24 organizations, Haiku picked winners out of the 10 students who completed the most tasks for Haiku, finalists and grand prize winners were picked collectively by the diligent team of Haiku’s 20+ mentors.</description></item><item><title>Scripting the GUI with 'hey'</title><link>https://www.haiku-os.org/blog/humdinger/2017-11-05_scripting_the_gui_with_hey/</link><pubDate>Sun, 05 Nov 2017 08:16:58 +0100</pubDate><guid>https://www.haiku-os.org/blog/humdinger/2017-11-05_scripting_the_gui_with_hey/</guid><description>Haiku&amp;rsquo;s GUI is in principle entirely scriptable. You can change a window&amp;rsquo;s position and size and manipulate pretty much every widget in it. The tool to do this is hey. It sends BMessages to an application, thus emulating what happens if the user clicks on a menu, checkbox, or other widgets.
The seminal work on this application scripting is the BeOS Application Scripting chapter of the BeOS Bible by Chris Herborth.</description></item><item><title>Where is Haiku R1?</title><link>https://www.haiku-os.org/blog/kallisti5/2017-10-09_where_is_haiku_r1/</link><pubDate>Mon, 09 Oct 2017 10:48:48 -0500</pubDate><guid>https://www.haiku-os.org/blog/kallisti5/2017-10-09_where_is_haiku_r1/</guid><description>Haiku released R1 Alpha 4.1 on November 14th, 2012. (5 years ago next month).
Since our last release, we have seen a huge number of groundbreaking new features slip into the nightly code including package management.
Along with the addition of Package Management (which was added pretty shortly after R1A4), we were presented with the massive task of building &amp;ldquo;all the ports&amp;rdquo; into packages and maintaining their dependencies within our repositories.</description></item><item><title>[GSoC 2017] Calendar Application: Final Report</title><link>https://www.haiku-os.org/blog/akshayagarwal007/2017-08-28_gsoc_2017_calendar_application_final_report/</link><pubDate>Mon, 28 Aug 2017 11:55:10 +0530</pubDate><guid>https://www.haiku-os.org/blog/akshayagarwal007/2017-08-28_gsoc_2017_calendar_application_final_report/</guid><description>Hello Everyone!
Google Summer of Code 2017 is off to an end and in this report I'll be summarizing the work done throughout the summer.
Introductory blog post
Source code: https://github.com/HaikuArchives/Calendar
List of all blog posts: https://www.haiku-os.org/blog/akshayagarwal007/
List of all Commits:
https://github.com/HaikuArchives/Calendar/commits/master
https://github.com/haiku/haiku/commits?author=AkshayAgarwal007
What has been completed Calendar App
The Calendar app currently has the following features implemented:
Create, modify and delete events. Generate notifications for events.</description></item><item><title>[GSoC 2017] Porting Swift to Haiku - Final Report</title><link>https://www.haiku-os.org/blog/return0e/2017-08-28_gsoc_2017_porting_swift_to_haiku_-_final_report/</link><pubDate>Mon, 28 Aug 2017 07:15:32 +0100</pubDate><guid>https://www.haiku-os.org/blog/return0e/2017-08-28_gsoc_2017_porting_swift_to_haiku_-_final_report/</guid><description>Hello everyone!
This blog-post marks the final report on bringing Swift to Haiku in the Google Summer of Code period. My introductory post on this project can be found here for a brief overview of the project.
Summary In the last 3 coding periods, my contributions to Haiku&amp;rsquo;s LLVM and Clang ports plus reporting some bugs with the Haiku developers have made it possible for the Swift toolchain to be built on Haiku.</description></item><item><title>[GSoC 2017] Preferences GUI Refactoring - Final Report</title><link>https://www.haiku-os.org/blog/anirudhm/2017-08-27_gsoc_2017_preferences_gui_refactoring_-_final_report/</link><pubDate>Sun, 27 Aug 2017 17:36:42 +0530</pubDate><guid>https://www.haiku-os.org/blog/anirudhm/2017-08-27_gsoc_2017_preferences_gui_refactoring_-_final_report/</guid><description>Hello World.
This is Anirudh. Here&amp;rsquo;s my final overall report of my work during Google Summer of Code 2017. My sincere thanks to waddlesplash and Sean Healy, for their excellent mentorship. They immediately responded, and assisted me whenever I needed help. I&amp;rsquo;m grateful to the Haiku team, community members and my fellow GSoC colleagues for their help, constructive criticism, reporting bugs and helping the project shape better.
Link to the source code/repo: https://github.</description></item><item><title>[GSoC 2017] Calendar Application: Weekly Report 7</title><link>https://www.haiku-os.org/blog/akshayagarwal007/2017-08-27_gsoc_2017_calendar_app_weekly_report_7/</link><pubDate>Sun, 27 Aug 2017 03:45:03 +0530</pubDate><guid>https://www.haiku-os.org/blog/akshayagarwal007/2017-08-27_gsoc_2017_calendar_app_weekly_report_7/</guid><description>Hello Everyone!
In this post I would be focusing on the work done in the past two weeks.
I worked on Google Calendar integration and general improvements and bug fixes in the Calendar App. I also worked on implementing a relative datetime formatter and general enhancements/bug fixes involving the Haiku locale kit.
Calendar App Fetching events using Google Calendar API and syncing with the database works now. There are issues with sending JSON data in an http post request, which always results in a parse error in the API response, as a result of which adding/updating events to Google Calendar doesn't work currently.</description></item><item><title>[GSOC 2017 - TCP optimization and fine tuning] Final Report</title><link>https://www.haiku-os.org/blog/a-star/2017-08-26_gsoc_2017_-_tcp_optimization_and_fine_tuning_final_report/</link><pubDate>Sat, 26 Aug 2017 02:23:06 +0530</pubDate><guid>https://www.haiku-os.org/blog/a-star/2017-08-26_gsoc_2017_-_tcp_optimization_and_fine_tuning_final_report/</guid><description>Hello everyone The end of the GSOC period is drawing near. In this blogpost I would like to summarize the work done during this period. To know where it all began, refer to my first blog post which can be found here.
Overview When I started, a running implementation of TCP existed in Haiku. My work was to read it, understand it and improve it. When I say improvement, I mean in terms of implementing new congestion control algorithms, updating the exisiting ones with recent request for comments documents (RFCs) and extending the current capabilities of the implementation.</description></item><item><title>[GSoC 2017] Preferences GUI Refactoring - Weekly Report 6</title><link>https://www.haiku-os.org/blog/anirudhm/2017-08-26_gsoc_2017_preferences_gui_refactoring_-_weekly_report_6/</link><pubDate>Sat, 26 Aug 2017 02:22:21 +0530</pubDate><guid>https://www.haiku-os.org/blog/anirudhm/2017-08-26_gsoc_2017_preferences_gui_refactoring_-_weekly_report_6/</guid><description>Hello World.
The last coding period of Google Summer of Code is about to end, and it&amp;rsquo;s time for us to submit a final report. But I thought to conclude the Weekly Reports with this one, covering the changes of this particular period.
Thanks to Brian Hill (Perelandra0x309) for opening issues in the repo, almost all of the issues posted were fixed and closed.
The search now works on related keywords of all System preflets.</description></item><item><title>[GSoC 2017 - BTRFS write supports] Third coding period - Final recap</title><link>https://www.haiku-os.org/blog/hyche/2017-08-25_gsoc_2017_-_btrfs_write_supports_third_coding_period_-_final_recap/</link><pubDate>Fri, 25 Aug 2017 21:48:17 +0700</pubDate><guid>https://www.haiku-os.org/blog/hyche/2017-08-25_gsoc_2017_-_btrfs_write_supports_third_coding_period_-_final_recap/</guid><description>Hello everyone, Google Summer of Code 2017 is coming to the end. This is my final report which covers third coding sprint, also read my introduction blog[1] for a brief of my project.
Creating and removing directories are now working. Basically, creating directories involve in inserting new inode (metadata of file) and making links between file name and inode. Because directories don&amp;rsquo;t hold any data so there isn&amp;rsquo;t any links between inode and file data, creating new files need to handle it.</description></item><item><title>[GSoC 2017] Porting Swift to Haiku - Week #9 / #10</title><link>https://www.haiku-os.org/blog/return0e/2017-08-18_gsoc_2017_porting_swift_to_haiku_-_week_9__10/</link><pubDate>Fri, 18 Aug 2017 05:56:22 +0100</pubDate><guid>https://www.haiku-os.org/blog/return0e/2017-08-18_gsoc_2017_porting_swift_to_haiku_-_week_9__10/</guid><description>Time for another update on the swift port, which covers the last two weeks of my activity, So here it goes!
Week 9 - My Findings on Porting libdispatch On the 9th week, I added early support for building libdispatch aka &amp;lsquo;Grand Central Dispatch (GCD)&amp;rsquo; which is Apple&amp;rsquo;s event-driven concurrency framework which allows executing high performance code via asynchronous task queues or I/O file descriptors (including sockets), which enables programs to take advantage of multi-core systems and to run Swift programs that utilises this.</description></item><item><title>Recovering from RMLL 2017</title><link>https://www.haiku-os.org/blog/mmu_man/2017-08-15_recovering_from_rmll_2017/</link><pubDate>Tue, 15 Aug 2017 00:00:00 +0100</pubDate><guid>https://www.haiku-os.org/blog/mmu_man/2017-08-15_recovering_from_rmll_2017/</guid><description>&lt;p>&lt;img src="../../files/blog/mmu_man/RMLL2017_DSCN5675.jpg" title="RMLL booths during the week-end…" alt="RMLL booths during the week-end…" width="25%" height="25%" align="right" />It took me some time to write this report, between other stuff and a cold caught in July (WTF?). But still, plenty of stuff happened at this year&amp;rsquo;s edition of &lt;a href="https://2017.rmll.info/">RMLL/LSM&lt;/a> so I had to let you know.&lt;/p>
&lt;p>Since the RMLL didn&amp;rsquo;t take place last year, as no city applied, I was quite impatient to see what this year&amp;rsquo;s edition in Saint Etienne would bring. By the way, if your hackerspace, LUG (or HUG?) wants to organize the next edition, &lt;a href="http://comite.rmll.info/">you should apply quickly&lt;/a>, but be warned, it&amp;rsquo;s quite a job!&lt;/p></description></item><item><title>[gsoc_2017] tcp optimization report 5</title><link>https://www.haiku-os.org/blog/a-star/2017-08-14_gsoc_2017_tcp_optimization_report_5/</link><pubDate>Mon, 14 Aug 2017 02:10:49 +0530</pubDate><guid>https://www.haiku-os.org/blog/a-star/2017-08-14_gsoc_2017_tcp_optimization_report_5/</guid><description>Hello everyone.
After the second evaluation I have been carrying out various tests to compare the output characteristics of the current TCP implementation of Haiku against the one with my patches applied. I shared the links to my patches on the mailing list. They comprise of all ticket numbers in the range 13629 - 13634 [ Trac link ].
Test Setup There are two systems:
My Ubuntu 14.04 system running Haiku hrev51307 x86gcc2 inside Virtual Box.</description></item><item><title>[GSoC 2017] Calendar Application: Weekly Report 6</title><link>https://www.haiku-os.org/blog/akshayagarwal007/2017-08-11_gsoc_2017_calendar_app_weekly_report_6/</link><pubDate>Fri, 11 Aug 2017 02:41:03 +0530</pubDate><guid>https://www.haiku-os.org/blog/akshayagarwal007/2017-08-11_gsoc_2017_calendar_app_weekly_report_6/</guid><description>Hello Everyone!
In this post I would be focusing on the work done in the past two weeks.
I implemented a database backend and worked on generating notification for events. Currently, I am using SQLite3 for data storage, but I would be implementing a BFS backend for the same sooner. Google Calendar integration is currently in progress. Also there is an issue with date/time parsing and formatting in the app which I would be fixing.</description></item><item><title>[GSoC 2017 - BTRFS write support] Week #9 #10 #11 (Second coding period)</title><link>https://www.haiku-os.org/blog/hyche/2017-08-04_gsoc_2017_-_btrfs_write_supports_week_9_10_11_second_coding_period/</link><pubDate>Fri, 04 Aug 2017 12:06:52 +0700</pubDate><guid>https://www.haiku-os.org/blog/hyche/2017-08-04_gsoc_2017_-_btrfs_write_supports_week_9_10_11_second_coding_period/</guid><description>Hi there! It has been 4 weeks since my last blog post. This blog post recaps what I have done in the second coding period and what I am doing and will do in the following weeks. Link to my previous blog post[1].
In the previous weeks I have been doing the implmentation for extent allocator and journal. About the extent allocator, the allocating strategy for now is &amp;ldquo;first fit&amp;rdquo; which means it allocates a first extent that after the address and has size that equal or larger the size we need.</description></item><item><title>[GSoC 2017] Preferences GUI Refactoring - Weekly Report 5</title><link>https://www.haiku-os.org/blog/anirudhm/2017-07-30_gsoc_2017_preferences_gui_refactoring_-_weekly_report_5/</link><pubDate>Sun, 30 Jul 2017 19:19:39 +0530</pubDate><guid>https://www.haiku-os.org/blog/anirudhm/2017-07-30_gsoc_2017_preferences_gui_refactoring_-_weekly_report_5/</guid><description>Hello World.
The second evaluation got over recently, and wanted to update my progress. My last blog post had discussion that custom preflets wanted to be added into SuperPrefs. It has been implemented now. Along with the exisitng boxes for specific categories, there&amp;rsquo;s now a box for Custom preflets, which includes third party preflets which come along with installation of apps. I also was working with implementation of Sorting of the entries in boxes, users can sort it based on Category, or Alphabetically, both has been done now.</description></item><item><title>[GSoC 2017] Porting Swift to Haiku - Week #8</title><link>https://www.haiku-os.org/blog/return0e/2017-07-28_gsoc_2017_porting_swift_to_haiku_-_week_8/</link><pubDate>Fri, 28 Jul 2017 16:12:13 +0100</pubDate><guid>https://www.haiku-os.org/blog/return0e/2017-07-28_gsoc_2017_porting_swift_to_haiku_-_week_8/</guid><description>Hello everyone!
Since last week I worked on enabling Haiku support for running the swift test-suite. This allows the newly built compiler to be put through the same series of test-cases run by the swift buildbots for macOS, Linux and FreeBSD platforms. These tests cover different areas of the toolchain, from simple unit-tests to validation-tests that cover the compiler internals, major standard library API changes and most importantly, compiler stability via testing with malformed inputs.</description></item><item><title>[GSoC 2017] Calendar Application: Weekly Report 5</title><link>https://www.haiku-os.org/blog/akshayagarwal007/2017-07-25_gsoc_2017_calendar_app_weekly_report_5/</link><pubDate>Tue, 25 Jul 2017 10:47:02 +0530</pubDate><guid>https://www.haiku-os.org/blog/akshayagarwal007/2017-07-25_gsoc_2017_calendar_app_weekly_report_5/</guid><description>Hello Everyone!
It's been more than a week since I wrote my last blog post. In this post I would brief you on the work done during this time.
I spent a little more time digging into the Haiku source (mostly the locale kit) to work on bugs and possible improvements as I came across quite a few places that would require it, while working on the Calendar app.
The current date is now highlighted in BCalendarView.</description></item><item><title>Bug: XHCI (usb 3.0) issues</title><link>https://www.haiku-os.org/blog/kallisti5/2017-07-17_bug_xhci_usb_30_issues/</link><pubDate>Mon, 17 Jul 2017 15:59:34 -0500</pubDate><guid>https://www.haiku-os.org/blog/kallisti5/2017-07-17_bug_xhci_usb_30_issues/</guid><description>As we work to stabilize Haiku and move closer to the R1 beta releases, USB driver issues are becomming more apparent.
At the moment, bugs with our XHCI (usb 3.0) stack are high on the problem list. New hardware is beginning to ship with XHCI-only controllers, which means we can no-longer fall back to our stable EHCI (usb 2.0) stack.
A large number of bug reports have been opened around these kinds of issues:</description></item><item><title>[GSOC 2017] TCP optimization Report 4</title><link>https://www.haiku-os.org/blog/a-star/2017-07-14_gsoc_2017_tcp_optimization_report_4/</link><pubDate>Fri, 14 Jul 2017 03:58:50 +0530</pubDate><guid>https://www.haiku-os.org/blog/a-star/2017-07-14_gsoc_2017_tcp_optimization_report_4/</guid><description>Hello everyone.
Since my last report, apart from working on the remaining changes, I have been more focused towards testing the tcp module against the already made changes. In the first week of the previous month I did try to port a testing tool to Haiku but did not succeed. So I have been writing a tool of my own to artifically inject packets into the stack and read the replies.</description></item><item><title>[GSoC 2017] Preferences GUI Refactoring - Weekly Report 4</title><link>https://www.haiku-os.org/blog/anirudhm/2017-07-12_gsoc_2017_preferences_gui_refactoring_-_weekly_report_4/</link><pubDate>Wed, 12 Jul 2017 22:47:21 +0530</pubDate><guid>https://www.haiku-os.org/blog/anirudhm/2017-07-12_gsoc_2017_preferences_gui_refactoring_-_weekly_report_4/</guid><description>Hello World.
It&amp;rsquo;s been almost 3 weeks since my last update. The first evaluation was complete, I&amp;rsquo;d like to thank Haiku for recognizing my work so far. And here&amp;rsquo;s an update on what I worked on for the past few weeks.
I replaced all IconView with BButton, since it has built in functions for label, icon handling.
I worked on categorizing all preflets based on their categories, and sorted them into respective BBox.</description></item><item><title>[GSoC 2017] Porting Swift to Haiku - Week #6 #7</title><link>https://www.haiku-os.org/blog/return0e/2017-07-11_gsoc_2017_porting_swift_to_haiku_-_week_6_7/</link><pubDate>Tue, 11 Jul 2017 23:20:21 +0100</pubDate><guid>https://www.haiku-os.org/blog/return0e/2017-07-11_gsoc_2017_porting_swift_to_haiku_-_week_6_7/</guid><description>TL;DR: Compiling Swift programs works, added C library interoperability and adding support for running the test-suite.
Hello Everyone, This report covers my activities done since the first evaluation of GSoC. I spent the first week looking into the most critical aspects of the compiler and focused my attention on the TaskQueue class. Whenever a task is executed, the TaskQueue tries to read its data via a pipe and it was found that it read 0 bytes from it, despite poll() reporting that there is still data available for reading.</description></item><item><title>[GSoC 2017] Calendar Application: Weekly Report 4</title><link>https://www.haiku-os.org/blog/akshayagarwal007/2017-07-13_gsoc_2017_calendar_app_weekly_report_4/</link><pubDate>Tue, 11 Jul 2017 08:51:03 +0530</pubDate><guid>https://www.haiku-os.org/blog/akshayagarwal007/2017-07-13_gsoc_2017_calendar_app_weekly_report_4/</guid><description>Hello Everyone!
It has been three weeks since my last blog post. In this post I would update you with the current progress on the Calendar Application.
I have been working on the following since the past three weeks:
Writing the Event and Category class. Working on UI of Event Manager. Working on UI of Category Manager and Category Edit Window. Working on a pop-up Calendar control to select event start and end date.</description></item><item><title>[GSoC 2017 - BTRFS Write Supports] Week #6 #7 #8</title><link>https://www.haiku-os.org/blog/hyche/2017-07-07_gsoc_2017_-_btrfs_write_supports_week_6_7_8/</link><pubDate>Fri, 07 Jul 2017 23:15:13 +0700</pubDate><guid>https://www.haiku-os.org/blog/hyche/2017-07-07_gsoc_2017_-_btrfs_write_supports_week_6_7_8/</guid><description>Hello again, Sorry for late report, things are not going as I planned. In order to implement tree manipulation or copy-on-write function, I must first have a blocks/extents allocator that works well. Also, those things need to handle transactions as well.
In the previous weeks, I did some &amp;ldquo;edgy&amp;rdquo; works that are supported functions, add some on-disks structures, modify some parts of the source code, etc. Currently, I am implementing the extent allocator, it can now dump all the free extents and used extents for all roots, included backup roots.</description></item><item><title>[GSOC 2017] TCP optimization Week 4</title><link>https://www.haiku-os.org/blog/a-star/2017-06-24_gsoc_2017_tcp_optimization_week_4/</link><pubDate>Sat, 24 Jun 2017 01:05:41 +0530</pubDate><guid>https://www.haiku-os.org/blog/a-star/2017-06-24_gsoc_2017_tcp_optimization_week_4/</guid><description>Hello everyone. It's been substantial time since I started working on the project and here's the progress report.
On the reading end Finally got over with reading the source code. What took it so long was that I first read most of the rfcs, including those I will be implementing even later on, before reading the current code. That kind of helped me not only to understand the code better but to also jot down the areas, where a change would have to be made, as and when encountering them.</description></item><item><title>[GSoC 2017] Porting Swift to Haiku - Week #4 #5</title><link>https://www.haiku-os.org/blog/return0e/2017-06-22_gsoc_2017_porting_swift_to_haiku_-_week_4_5/</link><pubDate>Thu, 22 Jun 2017 19:08:28 +0100</pubDate><guid>https://www.haiku-os.org/blog/return0e/2017-06-22_gsoc_2017_porting_swift_to_haiku_-_week_4_5/</guid><description>Hello everyone! This report covers the span of the last two weeks of my porting efforts to get swift running on Haiku. I started debugging the runtime library &amp;lsquo;libswiftCore&amp;rsquo; on both Haiku and Linux and focused my attention specifically to the ImageInspection logic in order to fully understand how the runtime extracts &amp;lsquo;type metadata&amp;rsquo; from a swift generated shared object. My mentor korli, recommended me to use the get_next_image_info() function, which is the Haiku equivalent of iterating through the list of loaded libraries in a executable.</description></item><item><title>[GSoC2017: Harfbuzz] Report #3</title><link>https://www.haiku-os.org/blog/digib0y/2017-06-22_gsoc2017_harfbuzz_report_3/</link><pubDate>Thu, 22 Jun 2017 11:01:41 +0530</pubDate><guid>https://www.haiku-os.org/blog/digib0y/2017-06-22_gsoc2017_harfbuzz_report_3/</guid><description>Hi all,
This is my first post during the coding period of GSoC 2017. I have been working on a demo application which renders text using the harfbuzz library.The work on application started before the coding period. You can find the application here.
The work on application started before the coding period, but now the application is successfully running(Thanks to stippi!).
I pointed out few issues in one of my previous blog post.</description></item><item><title>[GSoC 2017] Preferences GUI Refactoring - Weekly Report 3</title><link>https://www.haiku-os.org/blog/anirudhm/2017-06-22_gsoc_2017_preferences_gui_refactoring_-_weekly_report_3/</link><pubDate>Thu, 22 Jun 2017 03:06:12 +0530</pubDate><guid>https://www.haiku-os.org/blog/anirudhm/2017-06-22_gsoc_2017_preferences_gui_refactoring_-_weekly_report_3/</guid><description>Hello World.
Now that we&amp;rsquo;re almost near to the first evaluation, and also it&amp;rsquo;s been 2 weeks since my last blog post. The last blog post had a plain vanilla GUI without any elements apart from the listview of the applications. I worked on adding icons to the GUI, under respective categories. I&amp;rsquo;ve hardcoded the categorization part, after the first evaluation, I&amp;rsquo;ll work on categorizing the applications. I used IconView.h along with some functions from LaunchBox.</description></item><item><title>[GSoC 2017] Calendar Application: Weekly Report 3</title><link>https://www.haiku-os.org/blog/akshayagarwal007/2017-06-21_gsoc_2017_calendar_app_weekly_report_3/</link><pubDate>Wed, 21 Jun 2017 04:41:03 +0530</pubDate><guid>https://www.haiku-os.org/blog/akshayagarwal007/2017-06-21_gsoc_2017_calendar_app_weekly_report_3/</guid><description>Hello Everyone!
In this post I would be focusing on the work done in the past two weeks, issues faced and how I went about resolving them. Also, since the first evaluation is near, the post also contains a brief analysis of the current progress with respect to the deliverables mentioned in the proposal.
Issues faced and how I went about resolving them:
I wasn't able to set the day names header in the calendar view based on the locale preferences, the day names always showed up in English no matter which language is selected in locale preferences.</description></item><item><title>[GSoC 2017 - BTRFS Write Supports] Week #4 #5</title><link>https://www.haiku-os.org/blog/hyche/2017-06-14_gsoc_2017_-_btrfs_write_supports_week_4_5/</link><pubDate>Wed, 14 Jun 2017 22:28:49 +0700</pubDate><guid>https://www.haiku-os.org/blog/hyche/2017-06-14_gsoc_2017_-_btrfs_write_supports_week_4_5/</guid><description>Hello everyone, I spent last 2 weeks mainly for researching and forming an complete idea so that something will not be changed much in the future and some coding. These things are what I did in the previous 2 weeks:
I implemented a &amp;ldquo;cat&amp;rdquo; command in btrfs_shell for testing, since current fs_shell misses read file content command.
Refixed ticket #127883. This is the ticket I fixed as a proof to attend GSoC for Haiku, but it is hardcoded.</description></item><item><title>[GSoC 2017] Preferences GUI Refactoring - Weekly Report 2</title><link>https://www.haiku-os.org/blog/anirudhm/2017-06-06_gsoc_2017_preferences_gui_refactoring_-_weekly_report_2/</link><pubDate>Tue, 06 Jun 2017 23:55:16 +0530</pubDate><guid>https://www.haiku-os.org/blog/anirudhm/2017-06-06_gsoc_2017_preferences_gui_refactoring_-_weekly_report_2/</guid><description>Hello World.
This is my first blog post after the Coding Period officially began, I&amp;rsquo;ve started to write code for the application. During the Community Bonding period, I got the menu listing for SuperPrefs. My last exam got over on June 6. I worked on the basic application layout during the beginning of June. This was how the application looked initially:
The application hosts seperate sections for holding the Preferences based on their category.</description></item><item><title>[GSoC 2017] Porting Swift to Haiku - Week #3</title><link>https://www.haiku-os.org/blog/return0e/2017-06-05_gsoc_2017_porting_swift_to_haiku_-_week_3/</link><pubDate>Mon, 05 Jun 2017 17:10:09 +0100</pubDate><guid>https://www.haiku-os.org/blog/return0e/2017-06-05_gsoc_2017_porting_swift_to_haiku_-_week_3/</guid><description>Hello everyone! This is a rather short update on the Swift port and since the last blog post, I&amp;rsquo;ve worked around a small issue that prevented the compiler from importing libraries by specifying the -sdk parameter with a &amp;lsquo;/&amp;rsquo; which passes the correct header search paths to swiftc. This issue also existed on other platforms such as FreeBSD according to this thread in the swift-dev mailing list [1]. Whilst researching around the frequent swift interpreter crashes when opening a swift source file, the fault lies in libswiftCore being unable to extract type metadata from swift-generated dynamic libraries when calling these functions specified in the ProtocolConformance and Metadata classes.</description></item><item><title>[GSoC 2017] 3D Hardware Acceleration - Weekly Report 2</title><link>https://www.haiku-os.org/blog/vivek/2017-06-04_gsoc_2017_3d_hardware_acceleration_-_weekly_report_2/</link><pubDate>Sun, 04 Jun 2017 23:00:26 +0530</pubDate><guid>https://www.haiku-os.org/blog/vivek/2017-06-04_gsoc_2017_3d_hardware_acceleration_-_weekly_report_2/</guid><description>Hello again Here goes my second weekly report describing my efforts and endeavours in the last two weeks. I haven&amp;rsquo;t produced a lot of code, but I am not sitting idle.
Technical Report Firstly, as advised by Alex (kallisti5), I have a Technical Report[1] prepared - a rough outline of how and what all changes to the codebase are planned for this summer project. It is a very basic roadmap which I will try my best to stick to but cannot guarantee.</description></item><item><title>[GSoC 2017] Week 3-4 of Community Bonding</title><link>https://www.haiku-os.org/blog/akshayagarwal007/2017-06-02_gsoc_2017_calendar_application_week_3_4_report/</link><pubDate>Sun, 04 Jun 2017 08:41:03 +0530</pubDate><guid>https://www.haiku-os.org/blog/akshayagarwal007/2017-06-02_gsoc_2017_calendar_application_week_3_4_report/</guid><description>Hello Everyone!
In this post I would be focusing on my last two weeks of community bonding. The coding period has officially began on 30th, although I had already started it in my second week itself.
I had one or two different things in mind for this week as I mentioned in my previous post. But I ended up working on implementing a locale aware date header, and the calendar widget, which is more important initially as to implement the basic functionalities of the calendar app, and is also the first goal.</description></item><item><title>[GSoC 2017: Harfbuzz] Week #3 #4 of Community Bond</title><link>https://www.haiku-os.org/blog/digib0y/2017-06-01_gsoc_2017_harfbuzz_week_3_4_of_community_bond/</link><pubDate>Thu, 01 Jun 2017 18:58:37 +0530</pubDate><guid>https://www.haiku-os.org/blog/digib0y/2017-06-01_gsoc_2017_harfbuzz_week_3_4_of_community_bond/</guid><description>Hello Everyone,
This is my third blog post and the last post on my work during communty bond period. The coding period has officially started! Yay!
I have started working on a application that renders text using FreeType and Harfbuzz you can find it here. It has two branches one of them successfully compiles and renders some some text in English using already existing technology in Haiku. The other branch "</description></item><item><title>[GSOC 2017] TCP optimization_Week #2 &amp; #3</title><link>https://www.haiku-os.org/blog/a-star/2017-05-29_gsoc_2017_tcp_optimization_week_2__3/</link><pubDate>Mon, 29 May 2017 11:24:19 +0530</pubDate><guid>https://www.haiku-os.org/blog/a-star/2017-05-29_gsoc_2017_tcp_optimization_week_2__3/</guid><description>Hy there!
I am writing this blog as a combined report for the past 2 weeks. As I mentioned on the mailing this, I had college exams till 25th. Really hectic. But I have been able to get some work done from then.
Community bonding Didn't get a chance to know a lot of them but I did break some conversation with a few people. My short talk with axeld on the IRC got me into knowing the names responsible for the current implementation of TCP in Haiku.</description></item><item><title>[GSoC 2017 - BTRFS Write Supports] Week #3</title><link>https://www.haiku-os.org/blog/hyche/2017-05-28_gsoc_2017_-_btrfs_write_supports_week_3/</link><pubDate>Sun, 28 May 2017 18:24:27 +0700</pubDate><guid>https://www.haiku-os.org/blog/hyche/2017-05-28_gsoc_2017_-_btrfs_write_supports_week_3/</guid><description>Hi everyone,
It's me again, this is my third report of my project about what I have done in this week. There is no coding, just reading and reading a lot. Now, I am confident to say that I can fully understand all the things in Btrfs codebase. I lurked a little around Linux's source and mailing list for Btrfs, but it didn't help much since the source is large, complicated and I don't know where to start to read, so I decide to implement Btrfs in my own way and back to read if encounter problems.</description></item><item><title>[GSoC 2017] Porting Swift to Haiku - Week #1 / #2</title><link>https://www.haiku-os.org/blog/return0e/2017-05-22_gsoc_2017_porting_swift_to_haiku_-_week_1_2/</link><pubDate>Mon, 22 May 2017 14:43:06 +0100</pubDate><guid>https://www.haiku-os.org/blog/return0e/2017-05-22_gsoc_2017_porting_swift_to_haiku_-_week_1_2/</guid><description>Hello everyone!
Community Bonding period Last week I introduced myself and my GSoC project on porting Swift to Haiku, which can be found here in case if you missed it. The bonding period so far involved a mix of initial communication with my mentors **jua_** and **korli** (Thanks for merging my HaikuPorter recipes!) alongside receiving assistance from other haiku-devs, notably PulkoMandy and waddlesplash. In addition, I mostly spent the week researching the swift front-end driver internals [1] by reading its documentation, patching more script files used for building swift and meeting several other GSoC students on IRC/mailing lists; and I wish them good luck with their projects.</description></item><item><title>[GSoC 2017] Preferences GUI Refactoring - Weekly Report 1</title><link>https://www.haiku-os.org/blog/anirudhm/2017-05-21_gsoc_2017_preferences_gui_refactoring_-_weekly_report_1/</link><pubDate>Sun, 21 May 2017 01:32:01 +0530</pubDate><guid>https://www.haiku-os.org/blog/anirudhm/2017-05-21_gsoc_2017_preferences_gui_refactoring_-_weekly_report_1/</guid><description>Hello World.
This is an update to my previous blog post which dealt with the introduction to the GSoC project which I’ll be working this summer - Preferences GUI Refactoring. It&amp;rsquo;s been two weeks since the first post went live, so here&amp;rsquo;s the report for the weeks after that. This being the Community Bonding period, I pretty much did what the title says. Got to know about fellow GSoCers, they really are friendly and helpful.</description></item><item><title>[GSoC 2017: Harfbuzz] Week #1 #2 of Community Bond</title><link>https://www.haiku-os.org/blog/digib0y/2017-05-19_gsoc_2017_harfbuzz_week_1_2_of_community_bond/</link><pubDate>Fri, 19 May 2017 23:14:28 +0530</pubDate><guid>https://www.haiku-os.org/blog/digib0y/2017-05-19_gsoc_2017_harfbuzz_week_1_2_of_community_bond/</guid><description>Hello everyone,
As you already know I am working on HarfBuzz Support on Haiku this summer. You can find my introduction post here. In this post I will be you a brief details of my last 2 weeks with Haiku.
Getting to know people:
Considering the fact I have been in Haiku Community earlier I already knew a lot of members. I just wanted to mention a few who helped in these past 2 weeks.</description></item><item><title>[GSoC 2017 - BTRFS Write Supports] Week #2</title><link>https://www.haiku-os.org/blog/hyche/2017-05-19_gsoc_2017_-_btrfs_write_supports_week_2/</link><pubDate>Fri, 19 May 2017 21:42:20 +0700</pubDate><guid>https://www.haiku-os.org/blog/hyche/2017-05-19_gsoc_2017_-_btrfs_write_supports_week_2/</guid><description>Hello everyone,
This is my second report about my project "Adding write supports for BTRFS". There hasn't been much coding in this week and previous week, just some researchs, some style fixes in btrfs code base, and I have managed on setting up fs_shell for btrfs, or now you can say btrfs_shell, based on bfs_shell work. fs_shell is a framework containing all the kernel emulation and the user and scripting interface (Thanks Ingo for the info), this allows to compile and run filesystem (Haiku's, for example btrfs) in userland under Linux or any host systems that can build Haiku.</description></item><item><title>[GSoC 2017] First two weeks of Community Bonding</title><link>https://www.haiku-os.org/blog/akshayagarwal007/2017-05-18_gsoc_2017_first_two_weeks_of_community_bonding/</link><pubDate>Thu, 18 May 2017 08:51:03 +0530</pubDate><guid>https://www.haiku-os.org/blog/akshayagarwal007/2017-05-18_gsoc_2017_first_two_weeks_of_community_bonding/</guid><description>Hello Everyone!
In my previous post I introduced you all to the Calendar Application project that I would be working upon as a part of GSoC 2017. In this post I would be focusing on my first two weeks of the community bonding period.
Getting to know people The first few days were spent in exploring more about the Haiku community, getting to know the mentors and fellow students, and learning in details about their project through their blog posts.</description></item><item><title>[GSOC 2017] Tcp optimization and fine tuning</title><link>https://www.haiku-os.org/blog/a-star/2017-05-10_gsoc_2017_tcp_optimization_and_fine_tuning/</link><pubDate>Wed, 10 May 2017 13:11:55 +0530</pubDate><guid>https://www.haiku-os.org/blog/a-star/2017-05-10_gsoc_2017_tcp_optimization_and_fine_tuning/</guid><description>Hello Haiku!
My name is Ayush (nick: a-star). I am really glad to have been selected for GSOC 2017 and I will be striving to optimize the tcp implementation of Haiku this summer.
A little about me I am in the junior year of computer science and egineering at VITCC, India.
I am a profound Linux user. I have gained formal education on the subject while pursuing the Redhat certifications.</description></item><item><title>[GSoC 2017] Adding write supports for Btrfs</title><link>https://www.haiku-os.org/blog/hyche/2017-05-08_gsoc_2017_adding_write_supports_for_btrfs/</link><pubDate>Mon, 08 May 2017 13:49:47 +0700</pubDate><guid>https://www.haiku-os.org/blog/hyche/2017-05-08_gsoc_2017_adding_write_supports_for_btrfs/</guid><description>Hello everyone,
My name is Hy (Trac: hyche, freenode IRC: ugen), and this first blog is about my introduction and Btrfs. This is the first time I participate in Google Summer of Code, I also know Haiku through this event. My project in this summer is write supports for Btrfs and my main mentors are mmu_man (François Revol) and tqh (Fredrik Holmqvist).
During the community bonding period, I will Set up my development environment (userlandfs and fs_shell).</description></item><item><title>[GSoC 2017] Calendar Application</title><link>https://www.haiku-os.org/blog/akshayagarwal007/2017-05-08_gsoc_2017_calendar_application/</link><pubDate>Mon, 08 May 2017 06:51:03 +0530</pubDate><guid>https://www.haiku-os.org/blog/akshayagarwal007/2017-05-08_gsoc_2017_calendar_application/</guid><description>Introduction Hello I'm Akshay (IRC/Trac: akshay, GitHub: AkshayAgarwal007) from Kolkata, India. I would be working on developing a native Calendar Application for Haiku as a part of Google Summer of Code 2017. My mentors for the project are Scott McCreary and Kacper Kasper. I am very excited for this project.
Why a Calendar Application? Isn't there already one? A Calendar application is a must have application for any operating system and would be beneficial for end users as well as developers.</description></item><item><title>[GSoC 2017] Preferences GUI Refactoring Intro</title><link>https://www.haiku-os.org/blog/anirudhm/_gsoc_2017_preferences_gui_refactoring_intro/</link><pubDate>Sat, 06 May 2017 23:32:54 +0000</pubDate><guid>https://www.haiku-os.org/blog/anirudhm/_gsoc_2017_preferences_gui_refactoring_intro/</guid><description>Hello World.
I&amp;rsquo;m Anirudh Murali (Trac: anirudh; IRC: anirudhm), from the southern region of India. I thank Haiku for selecting me as one of Google Summer of Code 2017 student. I&amp;rsquo;ll be working on the idea: &amp;ldquo;Preferences GUI Refactoring&amp;rdquo; this summer along with my mentors: waddlesplash and Sean Healy.
As of now, if one has to access any Preferences, a right click on the Deskbar, and accessing it with the submenu of Preferences, and still people who are new to Haiku end up selecting the wrong preferences option, atleast it happened for me.</description></item><item><title>[GSoc 2017] Adding Harfbuzz support to Haiku</title><link>https://www.haiku-os.org/blog/digib0y/2017-05-06_gsoc_2017_adding_harfbuzz_support_to_haiku/</link><pubDate>Sat, 06 May 2017 22:36:57 +0000</pubDate><guid>https://www.haiku-os.org/blog/digib0y/2017-05-06_gsoc_2017_adding_harfbuzz_support_to_haiku/</guid><description>I am Deepanshu(Trac: digib0y IRC:digib0y), I am one of the seven students selected for GSoC this year from Haiku. I will be working to add Harfbuzz support this summer.
Quick intro: I am an engineering student of Christ University, India. I am pursuing a degree in Bachelor of Technology in Computer Science and Engineering. I have been a previous Google Code-In student where I worked with Haiku for the first time, I can recall the first time I ever connected to an IRC channel during GCI 2014; it was both my interest in the GCI task and my attraction to the positive, friendly environment on #haiku that convinced me to continue working with Haiku.</description></item><item><title>Back from FOSDEM!</title><link>https://www.haiku-os.org/blog/mmu_man/2017-02-09_back_from_fosdem/</link><pubDate>Thu, 09 Feb 2017 03:21:35 +0100</pubDate><guid>https://www.haiku-os.org/blog/mmu_man/2017-02-09_back_from_fosdem/</guid><description>&lt;p>&lt;a href="../../files/blog/mmu_man/FOSDEM2017_DSCN5468.jpg" title="Haiku &amp; ReactOS booth with the full teams">&lt;img src="../../files/blog/mmu_man/FOSDEM2017_DSCN5468.jpg" title="Haiku &amp; ReactOS booth with the full teams" alt="Haiku &amp; ReactOS booth with the full teams" width="25%" height="25%" align="right" />&lt;/a>So, I just arrived from Brussels back home. One more &lt;a href="https://fosdem.org/2017/">FOSDEM&lt;/a> done. As always it was action-packed, and I couldn&amp;rsquo;t clone myself enough times to see everything. The fact that we had the booth and that 3 out of the 4 talks I proposed were accepted probably didn&amp;rsquo;t help.&lt;/p>
&lt;p>Luckily this time we were three to handle the half-booth, as both Olivier and Adrien made it with me, because yes, we shared the table with &lt;a href="https://reactos.org/">ReactOS&lt;/a> this time, to increase the chances of being picked up.&lt;/p></description></item><item><title>GCI 2016 Wrap Up Report</title><link>https://www.haiku-os.org/news/2017-02-05_gci_2016_wrap_up_report/</link><pubDate>Sun, 05 Feb 2017 12:44:02 +0530</pubDate><guid>https://www.haiku-os.org/news/2017-02-05_gci_2016_wrap_up_report/</guid><description>What happens when you combine 337 students, 20+ mentors, and an endless volley of tasks? During the time from November 2016 to January 2017, 368 Haiku tasks were successfully completed. The seventh year of Google’s Code-In, and the seventh for Haiku as a mentoring organization was a grand success.
Students from all around the world aged 13-17 worked with the project mentors on improving Haiku during the 7 weeks of the contest.</description></item><item><title>Which Launcher?</title><link>https://www.haiku-os.org/blog/moochris/2017-01-22_which_launcher/</link><pubDate>Sun, 22 Jan 2017 12:05:49 +0000</pubDate><guid>https://www.haiku-os.org/blog/moochris/2017-01-22_which_launcher/</guid><description>&lt;p>So you&amp;rsquo;ve installed Haiku from a recently nightly (or sometime soon, the R1 beta) and you&amp;rsquo;re launching applications from the Deskbar menu (the blue &amp;lsquo;leaf&amp;rsquo; menu). Perfect, but there are a few more options to investigate if you want to quickly launch your favourite programs.&lt;/p></description></item><item><title>Google Code-In 2014 Wrap Up Report</title><link>https://www.haiku-os.org/news/2015-02-13_google_codein_2014_wrap_report/</link><pubDate>Fri, 13 Feb 2015 08:53:54 +0000</pubDate><guid>https://www.haiku-os.org/news/2015-02-13_google_codein_2014_wrap_report/</guid><description>&lt;p>Google has now announced the 24 winners for Google Code-In 2014, with Josef Gajdusek and Puck Meerburg being the two winners from Haiku. This is Puck&amp;rsquo;s second time winning for Haiku. This year we got to pick our top 5 out of the top 10 students who completed that most tasks for Haiku. Augustin Cavalier was selected as our backup winner, and Markus Himmel and Chirayu Desai were selected as finalist. Chirayu was a GCI 2013 winner with RTEMS, and made the jump to Haiku when RTEMS took this year off from GCI.&lt;/p>
&lt;p>This was the fifth year of Google&amp;rsquo;s Code-In, and the fifth for Haiku. This year we had 6 students who completed 20 or more tasks, one more than in 2013. We had 36 students who completed three or more tasks and qualified for a Google Code-In T-Shirt, and 53 students who completed two or more tasks. This was the first year of having beginner tasks, aimed at lowering the bar to get more new students introduced into open source. Haiku had 149 total students complete at least one task, many of those were for the beginner tasks. We had 164 beginner tasks completed, which was mostly just to introduce students to booting and using Haiku. Other beginner tasks were to compile Haiku or to install and use Haikuporter to build a package from a recipe file. In total students completed a staggering 435 tasks this time for Haiku.&lt;/p></description></item><item><title>Haiku Down Under 2013 Report</title><link>https://www.haiku-os.org/blog/sikosis/2013-08-25_haiku_down_under_2013_report/</link><pubDate>Sun, 25 Aug 2013 12:03:20 +0000</pubDate><guid>https://www.haiku-os.org/blog/sikosis/2013-08-25_haiku_down_under_2013_report/</guid><description>&lt;p>It was a rather ominous start to the day with fog covering most of the city early in the morning, but thankfully it turned out to be a great day both weather wise and for the Sixth Annual &lt;a href="http://haikudownunder.com/">Haiku Down Under&lt;/a> Users and Developer&amp;rsquo;s (Virtual) Conference held at The University of Queensland, Brisbane, Australia on 18th August, 2013.&lt;/p>
&lt;p>The live feed was provided using the Flash-based UStream service once again and we apologise for those who couldn&amp;rsquo;t follow along. We keep waiting for some better technology to be made available to do the stream and is also open source and Haiku friendly. One day.&lt;/p>
&lt;div align="center">&lt;img src="http://haikudownunder.com/gallery/photo.php?48" width="520" alt="HDU 2013 Flyers" />&lt;/div></description></item><item><title>New in Haiku: Debugger is now default</title><link>https://www.haiku-os.org/node/5004/</link><pubDate>Mon, 24 Dec 2012 08:44:11 +0000</pubDate><guid>https://www.haiku-os.org/node/5004/</guid><description/></item><item><title>The Haiku Tutorial is Here!</title><link>https://www.haiku-os.org/blog/rhapsodyguru/2011-12-06_haiku_tutorial_here/</link><pubDate>Tue, 06 Dec 2011 23:40:40 +0000</pubDate><guid>https://www.haiku-os.org/blog/rhapsodyguru/2011-12-06_haiku_tutorial_here/</guid><description>Greetings Haiku-ers!
So... I have finally gotten around to finishing the Haiku tutorial I set out to complete over a year ago. I was hoping to have it done sooner, but I decided to then prolong graduation for another year. However, my thesis project has been a rocking success, and you can finally see the fruits of my labors. :D
This production should be incorporated into the project as official tutorial material.</description></item><item><title>An Epic Haiku Tutorial Video Series Is Now In The Making!</title><link>https://www.haiku-os.org/blog/rhapsodyguru/2010-11-05_epic_haiku_tutorial_video_series_now_making/</link><pubDate>Fri, 05 Nov 2010 02:32:27 +0000</pubDate><guid>https://www.haiku-os.org/blog/rhapsodyguru/2010-11-05_epic_haiku_tutorial_video_series_now_making/</guid><description>Hello Haiku fans!
I am about to kick off a project that will benefit the Haiku community at large by addressing an area that I feel needs attention. Enter the Haiku video tutorial series. An easy to understand guide that will draw viewers into the beautiful Haiku while presenting all the features and work instructions in a plain and concise manner. Not only will these tutorials be designed to teach, they will also drive home a message which will prove that Haiku is the only OS designed from the ground up for use on the desktop PC.</description></item><item><title>Unit Testing for Fun and Profit</title><link>https://www.haiku-os.org/blog/yourpalal/2010-06-18_unit_testing_fun_and_profit/</link><pubDate>Fri, 18 Jun 2010 17:55:22 +0000</pubDate><guid>https://www.haiku-os.org/blog/yourpalal/2010-06-18_unit_testing_fun_and_profit/</guid><description>
&lt;p>
I noticed the other day that I had a comment below my &lt;a href="../../blog/yourpalal/2010-06-11_progress_layout_api">previous blog post&lt;/a>, I didn't have time to reply that day, the next day I was in bed sick, but TODAY, I can reply!
In the comment, AndrewZ asked if I could post some of my unit testing code, and I thought that would make for an interesting blog post, and here one is.
&lt;/p></description></item><item><title>Haiku Inc.: Contractors (yes more!), Donation Analysis, and Google Checkout</title><link>https://www.haiku-os.org/news/2010-04-07_haiku_inc_contractors_yes_more_donation_analysis_and_google_checkout/</link><pubDate>Tue, 06 Apr 2010 22:22:33 +0000</pubDate><guid>https://www.haiku-os.org/news/2010-04-07_haiku_inc_contractors_yes_more_donation_analysis_and_google_checkout/</guid><description>
&lt;p>
In this installment, we are proud to announce Ingo Weinhold's contract,
a brief summary of our donation history, and a new method for accepting donations.
&lt;/p></description></item><item><title>OpenJDK Hotspot libjvm.so built on Haiku</title><link>https://www.haiku-os.org/blog/andrewbachmann/2009-12-21_openjdk_hotspot_libjvmso_built_haiku/</link><pubDate>Sun, 20 Dec 2009 23:49:51 +0000</pubDate><guid>https://www.haiku-os.org/blog/andrewbachmann/2009-12-21_openjdk_hotspot_libjvmso_built_haiku/</guid><description>&lt;p>As my first blog entry, I present a set of instructions for building the OpenJDK &amp;ldquo;hotspot&amp;rdquo; repository on Haiku. The product of this process will be a partial jre, including the libjvm.so libraries.&lt;/p></description></item><item><title>Bluetooth Bounty Complete</title><link>https://www.haiku-os.org/blog/kvdman/2008-11-29_bluetooth_bounty_complete/</link><pubDate>Sat, 29 Nov 2008 17:30:35 +0000</pubDate><guid>https://www.haiku-os.org/blog/kvdman/2008-11-29_bluetooth_bounty_complete/</guid><description>Oliver Ruiz Dorantes:
http://urnenfeld.blogspot.com/2008/11/5th6th-milestone-phase-1-reached.html
has recently committed:
http://cia.vc/stats/author/oruizdorantes
the last parts and completed phase 1 of Haikuware&amp;rsquo;s bluetooth bounty:
http://www.haikuware.com/bounties/bluetooth-bounty
As such, he was transferred the bounty&amp;rsquo;s pool of $1820.47 (he also received some RAM for his hardware donated by haikuware admin thenerd). The bounty fell a little short of the $1950 he requested, but all in all I think he&amp;rsquo;ll be happy with that sum.
I&amp;rsquo;d like to thank all the bounty contributors that made this possible, as well as Oliver for the hard work he put in to give Haiku the code for a functional bluetooth base!</description></item><item><title>Google Summer of Code Project: Alternate System Timers</title><link>https://www.haiku-os.org/blog/dustin_howett/2008-05-10_summer_of_code_system_timers/</link><pubDate>Sun, 11 May 2008 00:45:58 +0000</pubDate><guid>https://www.haiku-os.org/blog/dustin_howett/2008-05-10_summer_of_code_system_timers/</guid><description>Hello, Everybody! I&amp;rsquo;m Dustin, the student in the 2008 Summer of Code who is going to implement support for system timers other than the TSC in Haiku.
I&amp;rsquo;ve been actively tracking (and trying to involve myself in) Haiku&amp;rsquo;s development for a few months now, but have been passively watching it since Be, Inc. went under and OpenBeOS sprang to life. In that time, I&amp;rsquo;ve gained a basic understanding of the Be/Haiku API, and of limited parts of the Haiku kernel.</description></item><item><title>Haiku takes over Google, SoC renamed</title><link>https://www.haiku-os.org/news/2008-04-01_haiku_takes_over_google_soc_renamed/</link><pubDate>Tue, 01 Apr 2008 13:17:36 +0000</pubDate><guid>https://www.haiku-os.org/news/2008-04-01_haiku_takes_over_google_soc_renamed/</guid><description>With the help of a generous donator, Haiku, Inc. has acquired a major share of Google, Inc. and is now in the process of reorganizing Google for a major focus shift that will allow for wide distribution of Haiku R1 to OEMs. Distribution contracts have been signed with major mobile phone makers for an unprecedented availability of Phone and Handheld Integrated System Haiku (PHISH).
Also, as of this year, the Summer Of Code project is now officially renamed Summer of Assembler Poetry (SoAP).</description></item><item><title>OpenJDK 7 Environment Setup for BeOS R5.0.3</title><link>https://www.haiku-os.org/documents/dev/openjdk_7_enviornment_setup_for_beos_r5_0_3/</link><pubDate>Fri, 04 Jan 2008 05:14:16 +0000</pubDate><guid>https://www.haiku-os.org/documents/dev/openjdk_7_enviornment_setup_for_beos_r5_0_3/</guid><description>This document outlines the steps for installing and configuring an environment on BeOS R5 suitable for preliminary work on the OpenJDK 7 port to Haiku. This document, like the foundation for our porting effort is currently a work in progress.
Requirements to access OpenJDK's Mercurial Repository Python 2.4 This Python package from bebits works well on R5.
Follow the instructions to install it. It's not the cleanest install in the world, (I don't like</description></item><item><title>Current ICMP implementation in HAIKU kernel</title><link>https://www.haiku-os.org/blog/ivo/2007-06-09_current_icmp_implementation_in_haiku_kernel/</link><pubDate>Sat, 09 Jun 2007 22:27:31 +0000</pubDate><guid>https://www.haiku-os.org/blog/ivo/2007-06-09_current_icmp_implementation_in_haiku_kernel/</guid><description>Hi all,
According to current Haiku source ICMP implementation is only a &amp;hellip; framework. Only ICMP echo request messages are processed.
There are essentially two RFCs that should be considered when implementing ICMP (for IPv4). RFC792 - &amp;lsquo;INTERNET CONTROL MESSAGE PROTCOL&amp;rsquo; and RFC1122 - &amp;lsquo;Requirements for Internet Hosts &amp;ndash; Communication Layers&amp;rsquo;.
According to RFC1122, paragraph 3.2.2. there are two types of ICMP messages a host must process:
ICMP Error Messages Destination Unreachable Redirect Source Quench Time Exceeded Parameter Problem ICMP query messages: Echo Information Timestamp Address Mask First of all, I plan to implement a generic icmp_send_data() that should be used whenever sending ICMP messages.</description></item></channel></rss>