<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gsoc on Haiku Project</title><link>https://www.haiku-os.org/tags/gsoc/</link><description>Recent content in gsoc on Haiku Project</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2001-2021 Haiku Inc.</copyright><lastBuildDate>Tue, 27 Jul 2021 12:17:53 +0530</lastBuildDate><atom:link href="https://www.haiku-os.org/tags/gsoc/index.xml" rel="self" type="application/rss+xml"/><item><title>GSOC 2021:Progress Report of Improvements to clang-format</title><link>https://www.haiku-os.org/blog/saloni/2021-07-27_gsoc_2021progress_report_of_improvements_to_clang-format/</link><pubDate>Tue, 27 Jul 2021 12:17:53 +0530</pubDate><guid>https://www.haiku-os.org/blog/saloni/2021-07-27_gsoc_2021progress_report_of_improvements_to_clang-format/</guid><description>This blog will contain all the information about what I have done till now.
I started with the input preferences directory and started solving the issues according to haiku guidelines.
A few changes have been made to clang-format. This work takes a lot of time because it needs a complete understanding of how the llvm code works. As there was number of files, it was difficult to figure out which file should contain the solution of the problem but PulkoMandy really helps me alot.</description></item><item><title>GSoC 2021 Progress Update 3: Coding style checker bot for Gerrit</title><link>https://www.haiku-os.org/blog/ritz/2021-07-21_gsoc_2021_progress_update_3_coding_style_checker_bot_for_gerrit/</link><pubDate>Wed, 21 Jul 2021 17:55:41 +0530</pubDate><guid>https://www.haiku-os.org/blog/ritz/2021-07-21_gsoc_2021_progress_update_3_coding_style_checker_bot_for_gerrit/</guid><description>Tl;dr I have completed the bot with basic functionality for my local gerrit instance
Link to Introductory blog
Link to Progress 1
Link to Progress 2
As I have said before I divided my project in the following parts
For every event (change, patch etc.), trigger the Concourse CI pipeline. Implement pipeline in concourse CI for fetching the Git repo and running the haiku-format tool on the relevant files and creating appropriate reports out of the tool.</description></item><item><title>GSoC 2021 Progress Update 2: Modernizing Cardie (Caya)</title><link>https://www.haiku-os.org/blog/jadedctrl/2021-07-09_gsoc_2021_progress_update_2_modernizing_cardie_caya/</link><pubDate>Fri, 09 Jul 2021 11:58:06 -0500</pubDate><guid>https://www.haiku-os.org/blog/jadedctrl/2021-07-09_gsoc_2021_progress_update_2_modernizing_cardie_caya/</guid><description>Looks like it&amp;rsquo;s time for me to clutter the blog again!
To start: Since the last update, Caya has been hard-forked and renamed to &amp;ldquo;Cardie&amp;rdquo; (short for &amp;ldquo;cardinal&amp;rdquo;), which at least fits the &amp;ldquo;bird theme&amp;rdquo; of libpurple clients.
… And the name&amp;rsquo;s fitting, since it&amp;rsquo;s now a fairly functional libpurple client. :-)
libpurple support There are a few features not implemented yet, which keeps it behind the XMPP add-on in terms of functionality, but the core is there: Configuring and managing accounts for any protocol, joining/creating/leaving rooms, chatting, sending/receiving your own status, room invitations, managing roster, purple-side chat commands, etc.</description></item><item><title>GSoC 2021 Progress Update 2: Coding style checker bot for Gerrit</title><link>https://www.haiku-os.org/blog/ritz/2021-06-27_gsoc_2021_progress_update_2_coding_style_checker_bot_for_gerrit/</link><pubDate>Sun, 27 Jun 2021 14:50:01 +0530</pubDate><guid>https://www.haiku-os.org/blog/ritz/2021-06-27_gsoc_2021_progress_update_2_coding_style_checker_bot_for_gerrit/</guid><description>Link to Introductory blog
Link to Progress 1
On my quest to finding a way to trigger my jobs anytime a commit happens in gerrit I was looking into this repo and trying to make it work. I tried using it as a resource but it turns out either it&amp;rsquo;s not public anymore or it was deleted. Then I went through the list of forks in that repo and found this.</description></item><item><title>GSoC 2021 Progress Update 1: Modernizing Caya</title><link>https://www.haiku-os.org/blog/jadedctrl/2021-06-07_gsoc_2021_progress_update_1_modernizing_caya/</link><pubDate>Mon, 07 Jun 2021 09:19:49 -0500</pubDate><guid>https://www.haiku-os.org/blog/jadedctrl/2021-06-07_gsoc_2021_progress_update_1_modernizing_caya/</guid><description>It&amp;rsquo;s the end of the first GSoC period, so it&amp;rsquo;s about time I clutter the blog again!
A good few changes have been made to Caya― most obviously support for multi-user rooms and some UI changes. Multi-protocol add-ons are now supported, the program is oriented around &amp;ldquo;Conversations&amp;rdquo; rather than &amp;ldquo;Contacts,&amp;rdquo; basic moderation (kicking, banning, muting) works, etc.
The protocol API&amp;lsquo;s expanded because of these general changes, and I don&amp;rsquo;t think it could be called &amp;ldquo;stable&amp;rdquo; for another couple weeks at least― I still need to document it, and some of the new additions might still be consolidated into others.</description></item><item><title>GSoC 2021 Progress Update 1: Coding style checker bot for Gerrit</title><link>https://www.haiku-os.org/blog/ritz/2021-06-05_gsoc_2021_project_update_coding_style_checker_bot_for_gerrit/</link><pubDate>Sat, 05 Jun 2021 19:46:42 +0530</pubDate><guid>https://www.haiku-os.org/blog/ritz/2021-06-05_gsoc_2021_project_update_coding_style_checker_bot_for_gerrit/</guid><description>Hey everyone! I am Hrithik (ritz), You can find about my project in my introductory blog. Here&amp;rsquo;s what I have done so far.
I started by reading Concourse CI documentation in order to get myself familiarise with ci pipeline and various schema involved in it. I also looked at other resources provided by my mentors i.e. Suhel Mehta @suhel_mehta and Alexander von Gluck @kallisti5 . Below are some links if anyone wants to check out.</description></item><item><title>GSoC 2021: Coding style checker bot for Gerrit</title><link>https://www.haiku-os.org/blog/ritz/2021-05-22_gsoc_2021_coding_style_checker_bot_for_gerrit/</link><pubDate>Sat, 22 May 2021 20:31:22 +0530</pubDate><guid>https://www.haiku-os.org/blog/ritz/2021-05-22_gsoc_2021_coding_style_checker_bot_for_gerrit/</guid><description>Introduction Hey everyone! I am Hrithik Kumar, a sophomore at National Institute of Technology Agartala, India majoring in Computer Science and Engineering (CSE). I am happy to say that I will be working on creating a Coding style checker bot for Gerrit as part of the GSoC 2021 project. My mentors are Alexander von Gluck and Suhel Mehta.
IRC nick: ritz Matrix: ritz (@ritzkr:matrix.org) Project Haiku has its own coding guidelines which describe how the code should be formatted.</description></item><item><title>GSoC 2021 Project: Modernizing Caya</title><link>https://www.haiku-os.org/blog/jadedctrl/2021-05-18_gsoc_2021_project_modernizing_caya/</link><pubDate>Thu, 20 May 2021 09:46:10 -0500</pubDate><guid>https://www.haiku-os.org/blog/jadedctrl/2021-05-18_gsoc_2021_project_modernizing_caya/</guid><description>Introduction Hi! I&amp;rsquo;m Jaidyn Levesque (jadedctrl on IRC and elsewhere), a 2nd year Computer Science student. I&amp;rsquo;ve been using *nixes for several years now, and just moved over to Haiku as my main OS a little over a year ago. I&amp;rsquo;m lucky enough to be a mentee this summer, and I&amp;rsquo;m excited to get started!
Project My GSoC project is to modernize Caya, a multi-protocol chat program. &amp;ldquo;Modernize&amp;rdquo; here means a couple different things: General updates, multi-user chats, and libpurple support.</description></item><item><title>Haiku to mentor 4 students in Google Summer of Code 2021</title><link>https://www.haiku-os.org/news/2021-05-17_haiku_mentors_4_students_in_gsoc/</link><pubDate>Mon, 17 May 2021 18:00:00 +0000</pubDate><guid>https://www.haiku-os.org/news/2021-05-17_haiku_mentors_4_students_in_gsoc/</guid><description>The list of accepted students for Google Summer of Code 2021 has just been announced. Over the summer, four students will work on improving Haiku and related applications, with help from our mentor team. Google gives the students a stipend, which allows them to work full-time on the project without the need to find another job.
The goal of the program is to introduce students to the way open source projects work, and encourage them to become long term contributors.</description></item><item><title>GSoC 2020 Final Report: Improving and Extending Services Kit</title><link>https://www.haiku-os.org/blog/leorize/2020-08-31_gsoc_2020_final_report_improving_and_extending_services_kit/</link><pubDate>Mon, 31 Aug 2020 02:00:18 -0500</pubDate><guid>https://www.haiku-os.org/blog/leorize/2020-08-31_gsoc_2020_final_report_improving_and_extending_services_kit/</guid><description>Hi all. This is my final report on my project aiming to improve Services Kit, the networking backend behind most native Haiku application, most notably WebPositive.
Progress made during GSoC You may find the patches here:
Haiku&amp;rsquo;s Gerrit HaikuWebKit&amp;rsquo;s Github Here&amp;rsquo;s the summary of some of the outstanding changes:
BMemoryRingIO is introduced for high-speed cross-thread communication. This is an implemenation of a circular buffer with BDataIO interface. The intended use case for this is for a HTTP/2 implementation, where one thread will be the multiplexer and request threads will make use of this to retrieve from the multiplexer.</description></item><item><title>GSoC 2020 Final Report: XFS File System</title><link>https://www.haiku-os.org/blog/cruxbox/2020-08-30_gsoc_2020_project_xfs_project_final_report/</link><pubDate>Sun, 30 Aug 2020 17:58:00 +0530</pubDate><guid>https://www.haiku-os.org/blog/cruxbox/2020-08-30_gsoc_2020_project_xfs_project_final_report/</guid><description>Hello there! This is the final report on my project which aimed at initiating support for XFS Filesystem on Haiku, by first making a read only driver.
Work done during the program: You can check for the patches here: https://review.haiku-os.org/q/hashtag:gsoc2020+owner:shubhambhagat111%2540yahoo.com
All directory and files work is completed and we should be able to read them from a version 4 XFS Filesystem. I&amp;rsquo;ve come to realize that we can now even try to read version 5 of XFS now that the ground work has been placed.</description></item><item><title>GSoC 2020 Project Update(UFS2): Reading Files</title><link>https://www.haiku-os.org/blog/suhelmehta/2020-08-26_gsoc_2020_project_update_ufs2_reading_files/</link><pubDate>Wed, 26 Aug 2020 16:40:58 +0000</pubDate><guid>https://www.haiku-os.org/blog/suhelmehta/2020-08-26_gsoc_2020_project_update_ufs2_reading_files/</guid><description>Hello Everyone!
This is my third post related to my project, Adding UFS2 file system in Haiku
The link below provides the patches that I have worked on till now.
Know more
Work done till now The following points briefly describes what I have done till now:
Reading a file in a UFS2 formatted disk
Implemented ufs2_open(), ufs2_read() in kernel_interface.cpp Reading data from block pointers</description></item><item><title>GSoC 2020 Project Update(UFS2): Reading Symboliclinks</title><link>https://www.haiku-os.org/blog/suhelmehta/2020-08-26_gsoc_2020_project_update_ufs2_reading_symboliclinks/</link><pubDate>Wed, 26 Aug 2020 16:37:13 +0000</pubDate><guid>https://www.haiku-os.org/blog/suhelmehta/2020-08-26_gsoc_2020_project_update_ufs2_reading_symboliclinks/</guid><description>Hello Everyone!
This is my another post related to my project, Adding UFS2 file system in Haiku
The link below provides the patches that I have worked on till now.
Know more
Work done till now The following points briefly describes what I have done till now:
Reading a symbolic link in a UFS2 formatted disk
Implemented ufs2_read_link() in kernel_interface.cpp Reading data from block pointers</description></item><item><title>GSoC 2020 Project Update: XFS</title><link>https://www.haiku-os.org/blog/cruxbox/2020-08-06_gsoc_2020_project_xfs_project_update/</link><pubDate>Tue, 11 Aug 2020 17:58:00 +0530</pubDate><guid>https://www.haiku-os.org/blog/cruxbox/2020-08-06_gsoc_2020_project_xfs_project_update/</guid><description>Hello there! There is quite a lot to share about the work done this month.
Work done so far: You can check for the patches here: https://review.haiku-os.org/q/hashtag:gsoc2020+owner:shubhambhagat111%2540yahoo.com In short: All directory work is done. This includes ShortForm Directories, Block Directories, Leaf Directories, Node Directories and B+Tree based Directories.
Detailed view at the work:
(Some context: Leaf entries containt hash values of a directory entry name and also the address of that entry.</description></item><item><title>GSoC 2020 Project Update(UFS2): First Evaluation</title><link>https://www.haiku-os.org/blog/suhelmehta/2020-07-10_gsoc_2020_project_updateufs2_first_evaluation/</link><pubDate>Fri, 10 Jul 2020 00:57:38 +0530</pubDate><guid>https://www.haiku-os.org/blog/suhelmehta/2020-07-10_gsoc_2020_project_updateufs2_first_evaluation/</guid><description>Hello Everyone!
This is my second post related to my project, Adding UFS2 file system in Haiku
The link below provides the patches that I have worked on till now.
Know more
Work done till now The following points briefly describes what I have done till now:
Mount the root directory of a UFS2 formatted disk
Implemented ufs2_mount() in kernel_interface.cpp Reading inode from disk</description></item><item><title>GSoC 2020 Project Update: XFS</title><link>https://www.haiku-os.org/blog/cruxbox/2020-06-06_gsoc_2020_xfs_project_update/</link><pubDate>Sun, 07 Jun 2020 20:45:56 +0530</pubDate><guid>https://www.haiku-os.org/blog/cruxbox/2020-06-06_gsoc_2020_xfs_project_update/</guid><description>Hello there! It&amp;rsquo;s been exactly a month since my last post. Sorry for not posting much!
Work done so far: You can check for the patches here: https://review.haiku-os.org/q/hashtag:gsoc2020+owner:shubhambhagat111%2540yahoo.com
But in short this is what is done,
Made some small change in the File System interface docs to make the working of readdir a little more understandable. Inodes can now be read from disk, it was interesting to see how inode was located on the disk itself though.</description></item><item><title>GSoC 2020 Project: Improving and Extending Services Kit</title><link>https://www.haiku-os.org/blog/leorize/2020-05-31_gsoc_2020_project_improving_and_extending_services_kit/</link><pubDate>Sun, 31 May 2020 15:57:12 -0500</pubDate><guid>https://www.haiku-os.org/blog/leorize/2020-05-31_gsoc_2020_project_improving_and_extending_services_kit/</guid><description>It&amp;rsquo;s pretty long overdue for the post, but here I am.
Introduction: I&amp;rsquo;m Leorize, a past GCI participant and a former active member of HaikuPorts. If you hang around the #haiku IRC channel, chances are that you might know me :)
I started contributing to Haiku around 2017, when I joined GCI. Since then, I&amp;rsquo;ve authored many bug fixes and ports, including some notable ports like libuv, mandoc, pkgconf, and pyqt.</description></item><item><title>GSoC 2020 Project: Adding XFS file system in Haiku</title><link>https://www.haiku-os.org/blog/cruxbox/2020-05-06_gsoc_2020_project_adding_xfs_filesystem_support/</link><pubDate>Mon, 11 May 2020 23:35:56 +0530</pubDate><guid>https://www.haiku-os.org/blog/cruxbox/2020-05-06_gsoc_2020_project_adding_xfs_filesystem_support/</guid><description>Sorry for the late post, but here we go!
Introduction: I am Shubham Bhagat, a sophomore, currently majoring in Computer Science Engineering from Indian Institute of Information Technology, Sricity, India. I came across Haiku, last November (2019), while I was looking for an operating system I could contribute to. My interest to contribute came from a mini college course. I knew Haiku was also part of GSoC for many years now, so getting the chance to work as an intern and learn here was a no brainer.</description></item><item><title>GSoC 2020 Project: Adding UFS2 file system in Haiku</title><link>https://www.haiku-os.org/blog/suhelmehta/2020-05-06_gsoc_2020_project_adding_ufs2_file_system_in_haiku/</link><pubDate>Wed, 06 May 2020 14:20:56 +0530</pubDate><guid>https://www.haiku-os.org/blog/suhelmehta/2020-05-06_gsoc_2020_project_adding_ufs2_file_system_in_haiku/</guid><description>Hello everyone! I am one of the selected students for this year Google Summer of Code(GSoC). This is my first blog on Haiku website and in this post I will introduce myself and share details about my project.
Introduction My name is Suhel Mehta and my name on IRC channel is suhel. I am studying Computer Science and Engineering(CSE) at GNDEC(Guru Nanak Dev Engineering College) in Punjab, India. I am also a part of Development team of college that do technical work.</description></item><item><title>Haiku to mentor interns in Google Summer of Code and Outreachy</title><link>https://www.haiku-os.org/news/2019-02-26_haiku_gets_into_gsoc_and_outreachy/</link><pubDate>Tue, 26 Feb 2019 17:47:20 +0000</pubDate><guid>https://www.haiku-os.org/news/2019-02-26_haiku_gets_into_gsoc_and_outreachy/</guid><description>Haiku is proud to once again be part of the Google Summer of Code. Over the summer, students will work on improving Haiku and related applications, with help from our mentor team. Google gives the students a stipend, which allows them to work full-time on the project without the need to find another job.
The goal of the program is to introduce students to the way open source projects work, and encourage them to become long term contributors.</description></item><item><title>Students</title><link>https://www.haiku-os.org/community/gsoc/2019/students/</link><pubDate>Wed, 09 Jan 2019 19:04:24 +0000</pubDate><guid>https://www.haiku-os.org/community/gsoc/2019/students/</guid><description> This year, 2 of our 3 interns in GSoC and Outreachy completed their projects
Rajagopalan Gandhagaran - Webkit2 port Preetpal Kaur (Outreachy) - Input preferences Bharati Ramana Joshi - Btrfs write support (repeated communication issues preventing the project from moving onwards)</description></item><item><title>Students</title><link>https://www.haiku-os.org/community/gsoc/2020/students/</link><pubDate>Wed, 09 Jan 2019 19:04:24 +0000</pubDate><guid>https://www.haiku-os.org/community/gsoc/2020/students/</guid><description> This year, all 4 of our GSoC students completed their projects!
Cruxbox - XFS filesystem support Preetpal Kaur - Input preferences Leorize - Services kit rewrite Suhel Mehta - UFS2 filesystem support</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 13</title><link>https://www.haiku-os.org/blog/hrily/2018-07-30_gsoc_2018_-_trackgit_progress_report_13/</link><pubDate>Mon, 30 Jul 2018 18:04:31 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-07-30_gsoc_2018_-_trackgit_progress_report_13/</guid><description>This is the thirteenth progress report for TrackGit project. I did the following in last week:
Since, the planned work from the proposal is done, Stephan and I agreed on doing some UI improvements to the existing views. Stephan suggested me some improvements, which I did in last week. These are:
Added progress bar to Clone Window I added a progress bar to the clone window. This will give better information about the clone progress.</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 12</title><link>https://www.haiku-os.org/blog/hrily/2018-07-23_gsoc_2018_-_trackgit_progress_report_12/</link><pubDate>Mon, 23 Jul 2018 18:11:03 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-07-23_gsoc_2018_-_trackgit_progress_report_12/</guid><description>This is the twelveth progress report for TrackGit project. I did the following in last week:
Implemented Log Viewer I implemented a log viewer in TrackGit. It shows a window with the commits in the repository so far. Link to commit.
The following screenshot shows the log viewer:
I also added tests for the log command. Link to commit.</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 11</title><link>https://www.haiku-os.org/blog/hrily/2018-07-14_gsoc_2018_-_trackgit_progress_report_11/</link><pubDate>Sat, 14 Jul 2018 12:14:35 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-07-14_gsoc_2018_-_trackgit_progress_report_11/</guid><description>This is the eleventh progress report for TrackGit project. I did the following in last week:
Implemented Create Branch command I implemented Create Branch command. This command creates a branch at head of the repository. There is also an option to switch to the newly created branch. Link to commit.
The following screenshot shows Create Branch window:
Implemented Switch Branch command I implemented option to switch branch. The Switch Branch window gives user with a drop down list of branches in current repository.</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 10</title><link>https://www.haiku-os.org/blog/hrily/2018-07-09_gsoc_2018_-_trackgit_progress_report_10/</link><pubDate>Mon, 09 Jul 2018 18:05:52 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-07-09_gsoc_2018_-_trackgit_progress_report_10/</guid><description>This is the tenth progress report for TrackGit project. I did the following in last week.
Implemented Show conflicts Window Last week I implemented Pull command. While pulling changes, sometimes there might be conflicts while merging the changes. These conflicts are shown when pull command execution is finished. In addition to that, I implemented a &amp;ldquo;Show conflicts&amp;rdquo; option to see the current conflicting files in the repository. This option is only shown when there are conflicts in the repository.</description></item><item><title>[GSoC 2018: XFS support] Week #7 and #8</title><link>https://www.haiku-os.org/blog/abx1/2018-07-02_gsoc_2018_xfs_support_week_7_and_8/</link><pubDate>Mon, 02 Jul 2018 21:28:28 +0530</pubDate><guid>https://www.haiku-os.org/blog/abx1/2018-07-02_gsoc_2018_xfs_support_week_7_and_8/</guid><description>Hi all,
I have been reading through the XFS documentation and looking more into the on-disk structures. Previously, I had looked into AG inode management, but not inode core structure. So I thought it would be better to look into how files, directories and links are stored on disk with inodes.
I implemented struct xfs_dinode_core, the core part of the inode, which includes stat data information about data and attribute forks.</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 9</title><link>https://www.haiku-os.org/blog/hrily/2018-07-02_gsoc_2018_-_trackgit_progress_report_9/</link><pubDate>Mon, 02 Jul 2018 18:00:27 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-07-02_gsoc_2018_-_trackgit_progress_report_9/</guid><description>This is the ninth progress report for TrackGit project. I did the following in last week.
Implemented Pull command I implemented the equivalent of git pull. The implementation was a little trickier as there was no direct API for pull in libgit2. The git pull command is combination of a fetch and then a merge. In merge there are three cases:
Repository up to date Fast forward Merge commit The merge commit can lead to conflicts.</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 8</title><link>https://www.haiku-os.org/blog/hrily/2018-06-25_gsoc_2018_-_trackgit_progress_report_8/</link><pubDate>Mon, 25 Jun 2018 18:24:36 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-06-25_gsoc_2018_-_trackgit_progress_report_8/</guid><description>This is the eighth progress report for TrackGit project. I did the following in last week.
Implemented Commit command I implemented the equivalent of git commit in TrackGit. The implementation was a little bit trickier because libgit2 used a different logic when the commit is first or non-first. The link to commit.
Below is a screenshot of Commit window.
Added test for commit command I also added the test case for commit command.</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 7</title><link>https://www.haiku-os.org/blog/hrily/2018-06-18_gsoc_2018_-_trackgit_progress_report_7/</link><pubDate>Mon, 18 Jun 2018 18:34:50 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-06-18_gsoc_2018_-_trackgit_progress_report_7/</guid><description>This is the seventh progress report for TrackGit project. I did the following in last week.
Merge Request on Haiku At the start of the project, I had made a merge request on Haiku regarding Dynamic Add on menu. There were few comments on it which I forgot to check. I addressed those comments. Link to the merge request.
Implemented Add files command I implemented the Add files command. This option adds the selected files to the git repository.</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 6</title><link>https://www.haiku-os.org/blog/hrily/2018-06-11_gsoc_2018_-_trackgit_progress_report_6/</link><pubDate>Mon, 11 Jun 2018 19:10:45 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-06-11_gsoc_2018_-_trackgit_progress_report_6/</guid><description>This is the sixth progress report for TrackGit project. I did the following in last week.
Addressed Stephen&amp;rsquo;s comments My mentor Stephen had put up few comments on my commits so far. I addressed them earlier this week. You can have a look at the comments thread here and here.
Made clone process threaded The initial implementation of clone was blocking the UI thread. I used the pthread library to make the clone processes threaded.</description></item><item><title>[GSoC 2018: XFS support] Week #6</title><link>https://www.haiku-os.org/blog/abx1/2018-06-05_gsoc_2018_xfs_support_week_6/</link><pubDate>Tue, 05 Jun 2018 13:48:45 +0530</pubDate><guid>https://www.haiku-os.org/blog/abx1/2018-06-05_gsoc_2018_xfs_support_week_6/</guid><description>Hey folks,
After implementing the superblock structure, my next task was to get the identify_partition hook working. I implemented dummy hooks (xfs_identify_parition, xfs_scan_partition) which logs some keyword so that I can trace how it&amp;rsquo;s working and in what order hooks are being called. I didn&amp;rsquo;t focus on mount hook at this point. While building I was getting the segmentation fault and wasn&amp;rsquo;t able to proceed. Adrien suggested to use GDB and try to debug and see what wrong.</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 5</title><link>https://www.haiku-os.org/blog/hrily/2018-06-04_gsoc_2018_-_trackgit_progress_report_5/</link><pubDate>Mon, 04 Jun 2018 20:02:08 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-06-04_gsoc_2018_-_trackgit_progress_report_5/</guid><description>This is the fifth progress report for TrackGit project. I did the following in last week.
Status Test Added test for status command. Link to commit.
Status window Previously, the status was shown in a BAlert. This was not good if the status text was long. So, I implemented a Status window with scrollable text view. Link to Commit.
Implemented TrackGit Application The major change in the TrackGit till now is the implementation of TrackGit Application.</description></item><item><title>[GSoC 2018: XFS support] Week #3, #4 and #5</title><link>https://www.haiku-os.org/blog/abx1/2018-05-28_gsoc_2018_xfs_support_week_3_4_and_5/</link><pubDate>Mon, 28 May 2018 22:19:10 +0530</pubDate><guid>https://www.haiku-os.org/blog/abx1/2018-05-28_gsoc_2018_xfs_support_week_3_4_and_5/</guid><description>Hey everyone,
I was not able to put in complete effort into GSoC, as I was having exams in my University during the past few weeks. I&amp;rsquo;ll be regular with the updates starting with this one.
I was encountering issues related to header files and xfs_shell wasn&amp;rsquo;t bulding properly. It was the problem in JamFile that FS_SHELL wasn&amp;rsquo;t added as an additional define. Doing so made sure that fs-shell wrappers are properly loaded.</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 4</title><link>https://www.haiku-os.org/blog/hrily/2018-05-28_gsoc_2018_-_trackgit_progress_report_4/</link><pubDate>Mon, 28 May 2018 18:18:25 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-05-28_gsoc_2018_-_trackgit_progress_report_4/</guid><description>This is the fourth progress report for TrackGit project. I did the following in last week.
Status Command I implemented the status command. This will pop up a window showing status of the current repository. This menu item will be shown only when the current directory is in some repo path.
The following screenshot shows the Status Window:
Solved a bug in Status While implementing Status commmand, I ran into a bug which took some of my time.</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 3</title><link>https://www.haiku-os.org/blog/hrily/2018-05-21_gsoc_2018_-_trackgit_progress_report_3/</link><pubDate>Mon, 21 May 2018 18:24:19 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-05-21_gsoc_2018_-_trackgit_progress_report_3/</guid><description>This is the third progress report for TrackGit project. I did the following in last week.
Clone Window. I implemented Clone window. It looks something like following:
Clone Command I implemented Clone command. Unfortunately, I&amp;rsquo;m blocked with some ssl object error.
Init Implemented Init of empty repository. Following are steps to Init a git repo through TrackGit:
Init Test I added tests for Init. This is done with the help of CppUnit testing framework.</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 2</title><link>https://www.haiku-os.org/blog/hrily/2018-05-15_gsoc_2018_-_trackgit_progress_report_2/</link><pubDate>Tue, 15 May 2018 19:16:57 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-05-15_gsoc_2018_-_trackgit_progress_report_2/</guid><description>This is the second progress report for TrackGit project. I did the following in last week.
TrackGit repo I created the repository for TrackGit. You can follow it at https://github.com/Hrily/TrackGit.
I also created Wiki to maintain the Weekly Progress report.
Icon for TrackGit I added icon to project using a rdef file.
LibGit2 TrackGit uses libgit2 as interface for git. I tried compiling TrackGit using libgit2 but getting some header errors.</description></item><item><title>[GSoC 2018: XFS support] Week #1 and #2</title><link>https://www.haiku-os.org/blog/abx1/2018-05-07_gsoc_2018_xfs_support_week_1_and_2/</link><pubDate>Mon, 07 May 2018 21:30:08 +0530</pubDate><guid>https://www.haiku-os.org/blog/abx1/2018-05-07_gsoc_2018_xfs_support_week_1_and_2/</guid><description>Hey everyone, I have been working on the project for the past two weeks and would love to share my update here as well.
My first task is to create an empty file system module and test the same on fs_shell. As fs_shell provides an interface to build and test the file system in a commandline tool, it will be easier to test the file system module.
I made an XFS image file using the following commands:</description></item><item><title>[GSoC 2018 - TrackGit] Progress Report 1</title><link>https://www.haiku-os.org/blog/hrily/2018-05-07_gsoc_2018_-_trackgit_progress_report_1/</link><pubDate>Mon, 07 May 2018 15:30:03 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-05-07_gsoc_2018_-_trackgit_progress_report_1/</guid><description>Hie
This is my first progress report. Following are the things I did in last couple of weeks:
Set up the Environment. Started on Dynamic Tracker Menu. Had a nice chat with my mentor Stippi. Learnt how to build Haiku on Haiku. Especially, building and running the Tracker module. Faced few difficulties in Dynamic Tracker Menu. Solved them with some help. About Dynamic Tracker Menu Dynamic Tracker Menu lets addon add items to the popup menu of Tracker based on the files selected.</description></item><item><title>[GSoC 2018] TrackGit - Git Addon for Tracker</title><link>https://www.haiku-os.org/blog/hrily/2018-04-25_gsoc_2018_trackgit_-_git_addon_for_tracker/</link><pubDate>Wed, 25 Apr 2018 17:58:59 +0530</pubDate><guid>https://www.haiku-os.org/blog/hrily/2018-04-25_gsoc_2018_trackgit_-_git_addon_for_tracker/</guid><description>Hie, I&amp;rsquo;m Hrishikesh Hiraskar (IRC/Trac/Github: hrily) from India. I will be working on TrackGit, a git addon for Git version control for Tracker under GSoC 2018. I&amp;rsquo;m really excited to be a part of Haiku community and for doing this project. I&amp;rsquo;m currently doing my B.Tech. in Computer Engineering at National Institute of Technology Karnataka, Surathkal. You can find more information about me on my website or my blog.
About TrackGit The proposed project focuses on implementing an Addon for Tracker to support the Git version control system.</description></item><item><title>Back into Google Summer of Code</title><link>https://www.haiku-os.org/news/2018-02-14_back_into_google_summer_of_code/</link><pubDate>Sun, 18 Feb 2018 17:47:20 +0000</pubDate><guid>https://www.haiku-os.org/news/2018-02-14_back_into_google_summer_of_code/</guid><description>Haiku is proud to once again be part of the Google Summer of Code. Over the summer, students will work on improving Haiku and related applications, with help from our mentor team. Google gives the students a stipend, which allows them to work full-time on the project without the need to find another job.
The goal of the program is to introduce students to the way open source projects work, and encourage them to become long term contributors.</description></item><item><title>Back from GSoC mentor summit</title><link>https://www.haiku-os.org/blog/pulkomandy/2017-10-16_gsoc_summit_report/</link><pubDate>Mon, 16 Oct 2017 20:26:14 +0000</pubDate><guid>https://www.haiku-os.org/blog/pulkomandy/2017-10-16_gsoc_summit_report/</guid><description>Hi there! This week-end was the Google Summer of Code mentor summit. This event gathers mentors from all organizations participating in GSoC and GCI for an event hosted by Google.
Usually the summit happens at the same time as BeGeistert, and as a result I never made it there before. But with no BeGeistert happening this year, I could finally make it.
Normally each organization is allowed to send 2 mentors, but we managed to get 6 people from Haiku to attend this year (by a combination of an extra mentor allowed because we do GCI, putting people on the waiting list and taking the slots freed by other orgs sending only one (or 0) mentor), having some Haiku people working at Google and helping run the event, and an hand-crafted badge to get into the event without registering)</description></item><item><title>[GSoC 2017] Calendar Application: Final Report</title><link>https://www.haiku-os.org/blog/akshayagarwal007/2017-08-28_gsoc_2017_calendar_application_final_report/</link><pubDate>Mon, 28 Aug 2017 11:55:10 +0530</pubDate><guid>https://www.haiku-os.org/blog/akshayagarwal007/2017-08-28_gsoc_2017_calendar_application_final_report/</guid><description>Hello Everyone!
Google Summer of Code 2017 is off to an end and in this report I'll be summarizing the work done throughout the summer.
Introductory blog post
Source code: https://github.com/HaikuArchives/Calendar
List of all blog posts: https://www.haiku-os.org/blog/akshayagarwal007/
List of all Commits:
https://github.com/HaikuArchives/Calendar/commits/master
https://github.com/haiku/haiku/commits?author=AkshayAgarwal007
What has been completed Calendar App
The Calendar app currently has the following features implemented:
Create, modify and delete events. Generate notifications for events.</description></item><item><title>[GSoC 2017] Preferences GUI Refactoring - Final Report</title><link>https://www.haiku-os.org/blog/anirudhm/2017-08-27_gsoc_2017_preferences_gui_refactoring_-_final_report/</link><pubDate>Sun, 27 Aug 2017 17:36:42 +0530</pubDate><guid>https://www.haiku-os.org/blog/anirudhm/2017-08-27_gsoc_2017_preferences_gui_refactoring_-_final_report/</guid><description>Hello World.
This is Anirudh. Here&amp;rsquo;s my final overall report of my work during Google Summer of Code 2017. My sincere thanks to waddlesplash and Sean Healy, for their excellent mentorship. They immediately responded, and assisted me whenever I needed help. I&amp;rsquo;m grateful to the Haiku team, community members and my fellow GSoC colleagues for their help, constructive criticism, reporting bugs and helping the project shape better.
Link to the source code/repo: https://github.</description></item><item><title>[GSoC 2017] Calendar Application: Weekly Report 7</title><link>https://www.haiku-os.org/blog/akshayagarwal007/2017-08-27_gsoc_2017_calendar_app_weekly_report_7/</link><pubDate>Sun, 27 Aug 2017 03:45:03 +0530</pubDate><guid>https://www.haiku-os.org/blog/akshayagarwal007/2017-08-27_gsoc_2017_calendar_app_weekly_report_7/</guid><description>Hello Everyone!
In this post I would be focusing on the work done in the past two weeks.
I worked on Google Calendar integration and general improvements and bug fixes in the Calendar App. I also worked on implementing a relative datetime formatter and general enhancements/bug fixes involving the Haiku locale kit.
Calendar App Fetching events using Google Calendar API and syncing with the database works now. There are issues with sending JSON data in an http post request, which always results in a parse error in the API response, as a result of which adding/updating events to Google Calendar doesn't work currently.</description></item><item><title>[GSOC 2017 - TCP optimization and fine tuning] Final Report</title><link>https://www.haiku-os.org/blog/a-star/2017-08-26_gsoc_2017_-_tcp_optimization_and_fine_tuning_final_report/</link><pubDate>Sat, 26 Aug 2017 02:23:06 +0530</pubDate><guid>https://www.haiku-os.org/blog/a-star/2017-08-26_gsoc_2017_-_tcp_optimization_and_fine_tuning_final_report/</guid><description>Hello everyone The end of the GSOC period is drawing near. In this blogpost I would like to summarize the work done during this period. To know where it all began, refer to my first blog post which can be found here.
Overview When I started, a running implementation of TCP existed in Haiku. My work was to read it, understand it and improve it. When I say improvement, I mean in terms of implementing new congestion control algorithms, updating the exisiting ones with recent request for comments documents (RFCs) and extending the current capabilities of the implementation.</description></item><item><title>[GSoC 2017] Preferences GUI Refactoring - Weekly Report 6</title><link>https://www.haiku-os.org/blog/anirudhm/2017-08-26_gsoc_2017_preferences_gui_refactoring_-_weekly_report_6/</link><pubDate>Sat, 26 Aug 2017 02:22:21 +0530</pubDate><guid>https://www.haiku-os.org/blog/anirudhm/2017-08-26_gsoc_2017_preferences_gui_refactoring_-_weekly_report_6/</guid><description>Hello World.
The last coding period of Google Summer of Code is about to end, and it&amp;rsquo;s time for us to submit a final report. But I thought to conclude the Weekly Reports with this one, covering the changes of this particular period.
Thanks to Brian Hill (Perelandra0x309) for opening issues in the repo, almost all of the issues posted were fixed and closed.
The search now works on related keywords of all System preflets.</description></item><item><title>[GSoC 2017 - BTRFS write supports] Third coding period - Final recap</title><link>https://www.haiku-os.org/blog/hyche/2017-08-25_gsoc_2017_-_btrfs_write_supports_third_coding_period_-_final_recap/</link><pubDate>Fri, 25 Aug 2017 21:48:17 +0700</pubDate><guid>https://www.haiku-os.org/blog/hyche/2017-08-25_gsoc_2017_-_btrfs_write_supports_third_coding_period_-_final_recap/</guid><description>Hello everyone, Google Summer of Code 2017 is coming to the end. This is my final report which covers third coding sprint, also read my introduction blog[1] for a brief of my project.
Creating and removing directories are now working. Basically, creating directories involve in inserting new inode (metadata of file) and making links between file name and inode. Because directories don&amp;rsquo;t hold any data so there isn&amp;rsquo;t any links between inode and file data, creating new files need to handle it.</description></item><item><title>[GSoC 2017] Porting Swift to Haiku - Week #9 / #10</title><link>https://www.haiku-os.org/blog/return0e/2017-08-18_gsoc_2017_porting_swift_to_haiku_-_week_9__10/</link><pubDate>Fri, 18 Aug 2017 05:56:22 +0100</pubDate><guid>https://www.haiku-os.org/blog/return0e/2017-08-18_gsoc_2017_porting_swift_to_haiku_-_week_9__10/</guid><description>Time for another update on the swift port, which covers the last two weeks of my activity, So here it goes!
Week 9 - My Findings on Porting libdispatch On the 9th week, I added early support for building libdispatch aka &amp;lsquo;Grand Central Dispatch (GCD)&amp;rsquo; which is Apple&amp;rsquo;s event-driven concurrency framework which allows executing high performance code via asynchronous task queues or I/O file descriptors (including sockets), which enables programs to take advantage of multi-core systems and to run Swift programs that utilises this.</description></item><item><title>[gsoc_2017] tcp optimization report 5</title><link>https://www.haiku-os.org/blog/a-star/2017-08-14_gsoc_2017_tcp_optimization_report_5/</link><pubDate>Mon, 14 Aug 2017 02:10:49 +0530</pubDate><guid>https://www.haiku-os.org/blog/a-star/2017-08-14_gsoc_2017_tcp_optimization_report_5/</guid><description>Hello everyone.
After the second evaluation I have been carrying out various tests to compare the output characteristics of the current TCP implementation of Haiku against the one with my patches applied. I shared the links to my patches on the mailing list. They comprise of all ticket numbers in the range 13629 - 13634 [ Trac link ].
Test Setup There are two systems:
My Ubuntu 14.04 system running Haiku hrev51307 x86gcc2 inside Virtual Box.</description></item><item><title>[GSoC 2017] Calendar Application: Weekly Report 6</title><link>https://www.haiku-os.org/blog/akshayagarwal007/2017-08-11_gsoc_2017_calendar_app_weekly_report_6/</link><pubDate>Fri, 11 Aug 2017 02:41:03 +0530</pubDate><guid>https://www.haiku-os.org/blog/akshayagarwal007/2017-08-11_gsoc_2017_calendar_app_weekly_report_6/</guid><description>Hello Everyone!
In this post I would be focusing on the work done in the past two weeks.
I implemented a database backend and worked on generating notification for events. Currently, I am using SQLite3 for data storage, but I would be implementing a BFS backend for the same sooner. Google Calendar integration is currently in progress. Also there is an issue with date/time parsing and formatting in the app which I would be fixing.</description></item><item><title>[GSoC 2017 - BTRFS write support] Week #9 #10 #11 (Second coding period)</title><link>https://www.haiku-os.org/blog/hyche/2017-08-04_gsoc_2017_-_btrfs_write_supports_week_9_10_11_second_coding_period/</link><pubDate>Fri, 04 Aug 2017 12:06:52 +0700</pubDate><guid>https://www.haiku-os.org/blog/hyche/2017-08-04_gsoc_2017_-_btrfs_write_supports_week_9_10_11_second_coding_period/</guid><description>Hi there! It has been 4 weeks since my last blog post. This blog post recaps what I have done in the second coding period and what I am doing and will do in the following weeks. Link to my previous blog post[1].
In the previous weeks I have been doing the implmentation for extent allocator and journal. About the extent allocator, the allocating strategy for now is &amp;ldquo;first fit&amp;rdquo; which means it allocates a first extent that after the address and has size that equal or larger the size we need.</description></item><item><title>[GSoC 2017] Preferences GUI Refactoring - Weekly Report 5</title><link>https://www.haiku-os.org/blog/anirudhm/2017-07-30_gsoc_2017_preferences_gui_refactoring_-_weekly_report_5/</link><pubDate>Sun, 30 Jul 2017 19:19:39 +0530</pubDate><guid>https://www.haiku-os.org/blog/anirudhm/2017-07-30_gsoc_2017_preferences_gui_refactoring_-_weekly_report_5/</guid><description>Hello World.
The second evaluation got over recently, and wanted to update my progress. My last blog post had discussion that custom preflets wanted to be added into SuperPrefs. It has been implemented now. Along with the exisitng boxes for specific categories, there&amp;rsquo;s now a box for Custom preflets, which includes third party preflets which come along with installation of apps. I also was working with implementation of Sorting of the entries in boxes, users can sort it based on Category, or Alphabetically, both has been done now.</description></item><item><title>[GSoC 2017] Calendar Application: Weekly Report 5</title><link>https://www.haiku-os.org/blog/akshayagarwal007/2017-07-25_gsoc_2017_calendar_app_weekly_report_5/</link><pubDate>Tue, 25 Jul 2017 10:47:02 +0530</pubDate><guid>https://www.haiku-os.org/blog/akshayagarwal007/2017-07-25_gsoc_2017_calendar_app_weekly_report_5/</guid><description>Hello Everyone!
It's been more than a week since I wrote my last blog post. In this post I would brief you on the work done during this time.
I spent a little more time digging into the Haiku source (mostly the locale kit) to work on bugs and possible improvements as I came across quite a few places that would require it, while working on the Calendar app.
The current date is now highlighted in BCalendarView.</description></item><item><title>[GSoC 2017] 3D Hardware Acceleration - Weekly Report 4</title><link>https://www.haiku-os.org/blog/vivek/2017-07-14_gsoc_2017_3d_hardware_acceleration_-_weekly_report_4/</link><pubDate>Fri, 14 Jul 2017 15:42:36 +0530</pubDate><guid>https://www.haiku-os.org/blog/vivek/2017-07-14_gsoc_2017_3d_hardware_acceleration_-_weekly_report_4/</guid><description>Greetings It has been a while since the last Report. So here I go. Firstly, I would like to thank all the Haiku mentors and developers for the first GSoC evaluation, thank you for believing in me. Now coming to the report.
Progress I am still at the Linux compatibility layer, adding new headers and dependencies one by one. Things are not moving as fast as I would like them to, mainly because of my lack of understanding of Haiku&amp;rsquo;s internals.</description></item><item><title>[GSOC 2017] TCP optimization Report 4</title><link>https://www.haiku-os.org/blog/a-star/2017-07-14_gsoc_2017_tcp_optimization_report_4/</link><pubDate>Fri, 14 Jul 2017 03:58:50 +0530</pubDate><guid>https://www.haiku-os.org/blog/a-star/2017-07-14_gsoc_2017_tcp_optimization_report_4/</guid><description>Hello everyone.
Since my last report, apart from working on the remaining changes, I have been more focused towards testing the tcp module against the already made changes. In the first week of the previous month I did try to port a testing tool to Haiku but did not succeed. So I have been writing a tool of my own to artifically inject packets into the stack and read the replies.</description></item><item><title>[GSoC 2017] Preferences GUI Refactoring - Weekly Report 4</title><link>https://www.haiku-os.org/blog/anirudhm/2017-07-12_gsoc_2017_preferences_gui_refactoring_-_weekly_report_4/</link><pubDate>Wed, 12 Jul 2017 22:47:21 +0530</pubDate><guid>https://www.haiku-os.org/blog/anirudhm/2017-07-12_gsoc_2017_preferences_gui_refactoring_-_weekly_report_4/</guid><description>Hello World.
It&amp;rsquo;s been almost 3 weeks since my last update. The first evaluation was complete, I&amp;rsquo;d like to thank Haiku for recognizing my work so far. And here&amp;rsquo;s an update on what I worked on for the past few weeks.
I replaced all IconView with BButton, since it has built in functions for label, icon handling.
I worked on categorizing all preflets based on their categories, and sorted them into respective BBox.</description></item><item><title>[GSoC 2017] Calendar Application: Weekly Report 4</title><link>https://www.haiku-os.org/blog/akshayagarwal007/2017-07-13_gsoc_2017_calendar_app_weekly_report_4/</link><pubDate>Tue, 11 Jul 2017 08:51:03 +0530</pubDate><guid>https://www.haiku-os.org/blog/akshayagarwal007/2017-07-13_gsoc_2017_calendar_app_weekly_report_4/</guid><description>Hello Everyone!
It has been three weeks since my last blog post. In this post I would update you with the current progress on the Calendar Application.
I have been working on the following since the past three weeks:
Writing the Event and Category class. Working on UI of Event Manager. Working on UI of Category Manager and Category Edit Window. Working on a pop-up Calendar control to select event start and end date.</description></item><item><title>[GSoC 2017 - BTRFS Write Supports] Week #6 #7 #8</title><link>https://www.haiku-os.org/blog/hyche/2017-07-07_gsoc_2017_-_btrfs_write_supports_week_6_7_8/</link><pubDate>Fri, 07 Jul 2017 23:15:13 +0700</pubDate><guid>https://www.haiku-os.org/blog/hyche/2017-07-07_gsoc_2017_-_btrfs_write_supports_week_6_7_8/</guid><description>Hello again, Sorry for late report, things are not going as I planned. In order to implement tree manipulation or copy-on-write function, I must first have a blocks/extents allocator that works well. Also, those things need to handle transactions as well.
In the previous weeks, I did some &amp;ldquo;edgy&amp;rdquo; works that are supported functions, add some on-disks structures, modify some parts of the source code, etc. Currently, I am implementing the extent allocator, it can now dump all the free extents and used extents for all roots, included backup roots.</description></item><item><title>[GSOC 2017] TCP optimization Week 4</title><link>https://www.haiku-os.org/blog/a-star/2017-06-24_gsoc_2017_tcp_optimization_week_4/</link><pubDate>Sat, 24 Jun 2017 01:05:41 +0530</pubDate><guid>https://www.haiku-os.org/blog/a-star/2017-06-24_gsoc_2017_tcp_optimization_week_4/</guid><description>Hello everyone. It's been substantial time since I started working on the project and here's the progress report.
On the reading end Finally got over with reading the source code. What took it so long was that I first read most of the rfcs, including those I will be implementing even later on, before reading the current code. That kind of helped me not only to understand the code better but to also jot down the areas, where a change would have to be made, as and when encountering them.</description></item><item><title>[GSoC2017: Harfbuzz] Report #3</title><link>https://www.haiku-os.org/blog/digib0y/2017-06-22_gsoc2017_harfbuzz_report_3/</link><pubDate>Thu, 22 Jun 2017 11:01:41 +0530</pubDate><guid>https://www.haiku-os.org/blog/digib0y/2017-06-22_gsoc2017_harfbuzz_report_3/</guid><description>Hi all,
This is my first post during the coding period of GSoC 2017. I have been working on a demo application which renders text using the harfbuzz library.The work on application started before the coding period. You can find the application here.
The work on application started before the coding period, but now the application is successfully running(Thanks to stippi!).
I pointed out few issues in one of my previous blog post.</description></item><item><title>[GSoC 2017] Preferences GUI Refactoring - Weekly Report 3</title><link>https://www.haiku-os.org/blog/anirudhm/2017-06-22_gsoc_2017_preferences_gui_refactoring_-_weekly_report_3/</link><pubDate>Thu, 22 Jun 2017 03:06:12 +0530</pubDate><guid>https://www.haiku-os.org/blog/anirudhm/2017-06-22_gsoc_2017_preferences_gui_refactoring_-_weekly_report_3/</guid><description>Hello World.
Now that we&amp;rsquo;re almost near to the first evaluation, and also it&amp;rsquo;s been 2 weeks since my last blog post. The last blog post had a plain vanilla GUI without any elements apart from the listview of the applications. I worked on adding icons to the GUI, under respective categories. I&amp;rsquo;ve hardcoded the categorization part, after the first evaluation, I&amp;rsquo;ll work on categorizing the applications. I used IconView.h along with some functions from LaunchBox.</description></item><item><title>[GSoC 2017] Calendar Application: Weekly Report 3</title><link>https://www.haiku-os.org/blog/akshayagarwal007/2017-06-21_gsoc_2017_calendar_app_weekly_report_3/</link><pubDate>Wed, 21 Jun 2017 04:41:03 +0530</pubDate><guid>https://www.haiku-os.org/blog/akshayagarwal007/2017-06-21_gsoc_2017_calendar_app_weekly_report_3/</guid><description>Hello Everyone!
In this post I would be focusing on the work done in the past two weeks, issues faced and how I went about resolving them. Also, since the first evaluation is near, the post also contains a brief analysis of the current progress with respect to the deliverables mentioned in the proposal.
Issues faced and how I went about resolving them:
I wasn't able to set the day names header in the calendar view based on the locale preferences, the day names always showed up in English no matter which language is selected in locale preferences.</description></item><item><title>[GSoC 2017] 3D Hardware Acceleration - Weekly Report 3</title><link>https://www.haiku-os.org/blog/vivek/2017-06-19_gsoc_2017_3d_hardware_acceleration_-_weekly_report_3/</link><pubDate>Mon, 19 Jun 2017 15:42:36 +0530</pubDate><guid>https://www.haiku-os.org/blog/vivek/2017-06-19_gsoc_2017_3d_hardware_acceleration_-_weekly_report_3/</guid><description>Greetings Almost 2 weeks since the last Weekly Report, so here goes what I have been up to in the last two weeks.
Adding code I am slowly adding new code as you might see here. Each commit represents a new file and its dependencies compiling successfully in my machine(gcc5). In asm/atomic.h I have commented out some of the functions which I believe is not required for DRM. If I find some use of those functions then I will have to revisit this file and make the necessary changes.</description></item><item><title>[GSoC 2017 - BTRFS Write Supports] Week #4 #5</title><link>https://www.haiku-os.org/blog/hyche/2017-06-14_gsoc_2017_-_btrfs_write_supports_week_4_5/</link><pubDate>Wed, 14 Jun 2017 22:28:49 +0700</pubDate><guid>https://www.haiku-os.org/blog/hyche/2017-06-14_gsoc_2017_-_btrfs_write_supports_week_4_5/</guid><description>Hello everyone, I spent last 2 weeks mainly for researching and forming an complete idea so that something will not be changed much in the future and some coding. These things are what I did in the previous 2 weeks:
I implemented a &amp;ldquo;cat&amp;rdquo; command in btrfs_shell for testing, since current fs_shell misses read file content command.
Refixed ticket #127883. This is the ticket I fixed as a proof to attend GSoC for Haiku, but it is hardcoded.</description></item><item><title>[GSoC 2017] Preferences GUI Refactoring - Weekly Report 2</title><link>https://www.haiku-os.org/blog/anirudhm/2017-06-06_gsoc_2017_preferences_gui_refactoring_-_weekly_report_2/</link><pubDate>Tue, 06 Jun 2017 23:55:16 +0530</pubDate><guid>https://www.haiku-os.org/blog/anirudhm/2017-06-06_gsoc_2017_preferences_gui_refactoring_-_weekly_report_2/</guid><description>Hello World.
This is my first blog post after the Coding Period officially began, I&amp;rsquo;ve started to write code for the application. During the Community Bonding period, I got the menu listing for SuperPrefs. My last exam got over on June 6. I worked on the basic application layout during the beginning of June. This was how the application looked initially:
The application hosts seperate sections for holding the Preferences based on their category.</description></item><item><title>[GSoC 2017] Week 3-4 of Community Bonding</title><link>https://www.haiku-os.org/blog/akshayagarwal007/2017-06-02_gsoc_2017_calendar_application_week_3_4_report/</link><pubDate>Sun, 04 Jun 2017 08:41:03 +0530</pubDate><guid>https://www.haiku-os.org/blog/akshayagarwal007/2017-06-02_gsoc_2017_calendar_application_week_3_4_report/</guid><description>Hello Everyone!
In this post I would be focusing on my last two weeks of community bonding. The coding period has officially began on 30th, although I had already started it in my second week itself.
I had one or two different things in mind for this week as I mentioned in my previous post. But I ended up working on implementing a locale aware date header, and the calendar widget, which is more important initially as to implement the basic functionalities of the calendar app, and is also the first goal.</description></item><item><title>[GSoC 2017: Harfbuzz] Week #3 #4 of Community Bond</title><link>https://www.haiku-os.org/blog/digib0y/2017-06-01_gsoc_2017_harfbuzz_week_3_4_of_community_bond/</link><pubDate>Thu, 01 Jun 2017 18:58:37 +0530</pubDate><guid>https://www.haiku-os.org/blog/digib0y/2017-06-01_gsoc_2017_harfbuzz_week_3_4_of_community_bond/</guid><description>Hello Everyone,
This is my third blog post and the last post on my work during communty bond period. The coding period has officially started! Yay!
I have started working on a application that renders text using FreeType and Harfbuzz you can find it here. It has two branches one of them successfully compiles and renders some some text in English using already existing technology in Haiku. The other branch "</description></item><item><title>[GSOC 2017] TCP optimization_Week #2 &amp; #3</title><link>https://www.haiku-os.org/blog/a-star/2017-05-29_gsoc_2017_tcp_optimization_week_2__3/</link><pubDate>Mon, 29 May 2017 11:24:19 +0530</pubDate><guid>https://www.haiku-os.org/blog/a-star/2017-05-29_gsoc_2017_tcp_optimization_week_2__3/</guid><description>Hy there!
I am writing this blog as a combined report for the past 2 weeks. As I mentioned on the mailing this, I had college exams till 25th. Really hectic. But I have been able to get some work done from then.
Community bonding Didn't get a chance to know a lot of them but I did break some conversation with a few people. My short talk with axeld on the IRC got me into knowing the names responsible for the current implementation of TCP in Haiku.</description></item><item><title>[GSoC 2017 - BTRFS Write Supports] Week #3</title><link>https://www.haiku-os.org/blog/hyche/2017-05-28_gsoc_2017_-_btrfs_write_supports_week_3/</link><pubDate>Sun, 28 May 2017 18:24:27 +0700</pubDate><guid>https://www.haiku-os.org/blog/hyche/2017-05-28_gsoc_2017_-_btrfs_write_supports_week_3/</guid><description>Hi everyone,
It's me again, this is my third report of my project about what I have done in this week. There is no coding, just reading and reading a lot. Now, I am confident to say that I can fully understand all the things in Btrfs codebase. I lurked a little around Linux's source and mailing list for Btrfs, but it didn't help much since the source is large, complicated and I don't know where to start to read, so I decide to implement Btrfs in my own way and back to read if encounter problems.</description></item><item><title>[GSoC 2017] Porting Swift to Haiku - Week #1 / #2</title><link>https://www.haiku-os.org/blog/return0e/2017-05-22_gsoc_2017_porting_swift_to_haiku_-_week_1_2/</link><pubDate>Mon, 22 May 2017 14:43:06 +0100</pubDate><guid>https://www.haiku-os.org/blog/return0e/2017-05-22_gsoc_2017_porting_swift_to_haiku_-_week_1_2/</guid><description>Hello everyone!
Community Bonding period Last week I introduced myself and my GSoC project on porting Swift to Haiku, which can be found here in case if you missed it. The bonding period so far involved a mix of initial communication with my mentors **jua_** and **korli** (Thanks for merging my HaikuPorter recipes!) alongside receiving assistance from other haiku-devs, notably PulkoMandy and waddlesplash. In addition, I mostly spent the week researching the swift front-end driver internals [1] by reading its documentation, patching more script files used for building swift and meeting several other GSoC students on IRC/mailing lists; and I wish them good luck with their projects.</description></item><item><title>[GSoC 2017] Preferences GUI Refactoring - Weekly Report 1</title><link>https://www.haiku-os.org/blog/anirudhm/2017-05-21_gsoc_2017_preferences_gui_refactoring_-_weekly_report_1/</link><pubDate>Sun, 21 May 2017 01:32:01 +0530</pubDate><guid>https://www.haiku-os.org/blog/anirudhm/2017-05-21_gsoc_2017_preferences_gui_refactoring_-_weekly_report_1/</guid><description>Hello World.
This is an update to my previous blog post which dealt with the introduction to the GSoC project which I’ll be working this summer - Preferences GUI Refactoring. It&amp;rsquo;s been two weeks since the first post went live, so here&amp;rsquo;s the report for the weeks after that. This being the Community Bonding period, I pretty much did what the title says. Got to know about fellow GSoCers, they really are friendly and helpful.</description></item><item><title>[GSoC 2017: Harfbuzz] Week #1 #2 of Community Bond</title><link>https://www.haiku-os.org/blog/digib0y/2017-05-19_gsoc_2017_harfbuzz_week_1_2_of_community_bond/</link><pubDate>Fri, 19 May 2017 23:14:28 +0530</pubDate><guid>https://www.haiku-os.org/blog/digib0y/2017-05-19_gsoc_2017_harfbuzz_week_1_2_of_community_bond/</guid><description>Hello everyone,
As you already know I am working on HarfBuzz Support on Haiku this summer. You can find my introduction post here. In this post I will be you a brief details of my last 2 weeks with Haiku.
Getting to know people:
Considering the fact I have been in Haiku Community earlier I already knew a lot of members. I just wanted to mention a few who helped in these past 2 weeks.</description></item><item><title>[GSoC 2017 - BTRFS Write Supports] Week #2</title><link>https://www.haiku-os.org/blog/hyche/2017-05-19_gsoc_2017_-_btrfs_write_supports_week_2/</link><pubDate>Fri, 19 May 2017 21:42:20 +0700</pubDate><guid>https://www.haiku-os.org/blog/hyche/2017-05-19_gsoc_2017_-_btrfs_write_supports_week_2/</guid><description>Hello everyone,
This is my second report about my project "Adding write supports for BTRFS". There hasn't been much coding in this week and previous week, just some researchs, some style fixes in btrfs code base, and I have managed on setting up fs_shell for btrfs, or now you can say btrfs_shell, based on bfs_shell work. fs_shell is a framework containing all the kernel emulation and the user and scripting interface (Thanks Ingo for the info), this allows to compile and run filesystem (Haiku's, for example btrfs) in userland under Linux or any host systems that can build Haiku.</description></item><item><title>[GSoC 2017] 3D Hardware Acceleration - Weekly Report 1</title><link>https://www.haiku-os.org/blog/vivek/2017-05-19_gsoc_2017_3d_hardware_acceleration_-_weekly_report_1/</link><pubDate>Fri, 19 May 2017 00:49:04 +0530</pubDate><guid>https://www.haiku-os.org/blog/vivek/2017-05-19_gsoc_2017_3d_hardware_acceleration_-_weekly_report_1/</guid><description>Hello again My previous blog post was a brief introduction to my project - 3D Hardware Acceleration in Haiku. The second week of GSoC demands the second post and so here we go.
Bonding Well, there hasn&amp;rsquo;t been a lot of coding work in the last two week, as much as I would have liked, primarily because I wasn&amp;rsquo;t well for a couple of days. But, I did do what I am supposed to do at this period, i.</description></item><item><title>[GSoC 2017] First two weeks of Community Bonding</title><link>https://www.haiku-os.org/blog/akshayagarwal007/2017-05-18_gsoc_2017_first_two_weeks_of_community_bonding/</link><pubDate>Thu, 18 May 2017 08:51:03 +0530</pubDate><guid>https://www.haiku-os.org/blog/akshayagarwal007/2017-05-18_gsoc_2017_first_two_weeks_of_community_bonding/</guid><description>Hello Everyone!
In my previous post I introduced you all to the Calendar Application project that I would be working upon as a part of GSoC 2017. In this post I would be focusing on my first two weeks of the community bonding period.
Getting to know people The first few days were spent in exploring more about the Haiku community, getting to know the mentors and fellow students, and learning in details about their project through their blog posts.</description></item><item><title>[GSoC 2017] Porting the Swift Programming Language to Haiku</title><link>https://www.haiku-os.org/blog/return0e/2017-05-10_gsoc_2017_porting_the_swift_programming_language_to_haiku/</link><pubDate>Wed, 10 May 2017 12:58:17 +0100</pubDate><guid>https://www.haiku-os.org/blog/return0e/2017-05-10_gsoc_2017_porting_the_swift_programming_language_to_haiku/</guid><description>Introduction Hello everyone! I'm Joseph 'Calvin' Hill, (irc nick: return0e) a third year computer science student at the University of Hull and one of the 7 GSoC students participating with Haiku. I'm also a active contributor to the HaikuPorts organisation, by porting over useful cross-platform software found on other platforms, to be made available on Haiku. This summer, I'll be porting the Swift programming language to Haiku with my mentors Jérôme Duval 'Korli' and Julian Harnath 'jua', with the intention of merging these changes upstream.</description></item><item><title>[GSOC 2017] Tcp optimization and fine tuning</title><link>https://www.haiku-os.org/blog/a-star/2017-05-10_gsoc_2017_tcp_optimization_and_fine_tuning/</link><pubDate>Wed, 10 May 2017 13:11:55 +0530</pubDate><guid>https://www.haiku-os.org/blog/a-star/2017-05-10_gsoc_2017_tcp_optimization_and_fine_tuning/</guid><description>Hello Haiku!
My name is Ayush (nick: a-star). I am really glad to have been selected for GSOC 2017 and I will be striving to optimize the tcp implementation of Haiku this summer.
A little about me I am in the junior year of computer science and egineering at VITCC, India.
I am a profound Linux user. I have gained formal education on the subject while pursuing the Redhat certifications.</description></item><item><title>[GSoC 2017] Adding write supports for Btrfs</title><link>https://www.haiku-os.org/blog/hyche/2017-05-08_gsoc_2017_adding_write_supports_for_btrfs/</link><pubDate>Mon, 08 May 2017 13:49:47 +0700</pubDate><guid>https://www.haiku-os.org/blog/hyche/2017-05-08_gsoc_2017_adding_write_supports_for_btrfs/</guid><description>Hello everyone,
My name is Hy (Trac: hyche, freenode IRC: ugen), and this first blog is about my introduction and Btrfs. This is the first time I participate in Google Summer of Code, I also know Haiku through this event. My project in this summer is write supports for Btrfs and my main mentors are mmu_man (François Revol) and tqh (Fredrik Holmqvist).
During the community bonding period, I will Set up my development environment (userlandfs and fs_shell).</description></item><item><title>[GSoC 2017] Calendar Application</title><link>https://www.haiku-os.org/blog/akshayagarwal007/2017-05-08_gsoc_2017_calendar_application/</link><pubDate>Mon, 08 May 2017 06:51:03 +0530</pubDate><guid>https://www.haiku-os.org/blog/akshayagarwal007/2017-05-08_gsoc_2017_calendar_application/</guid><description>Introduction Hello I'm Akshay (IRC/Trac: akshay, GitHub: AkshayAgarwal007) from Kolkata, India. I would be working on developing a native Calendar Application for Haiku as a part of Google Summer of Code 2017. My mentors for the project are Scott McCreary and Kacper Kasper. I am very excited for this project.
Why a Calendar Application? Isn't there already one? A Calendar application is a must have application for any operating system and would be beneficial for end users as well as developers.</description></item><item><title>[GSoC 2017] Preferences GUI Refactoring Intro</title><link>https://www.haiku-os.org/blog/anirudhm/_gsoc_2017_preferences_gui_refactoring_intro/</link><pubDate>Sat, 06 May 2017 23:32:54 +0000</pubDate><guid>https://www.haiku-os.org/blog/anirudhm/_gsoc_2017_preferences_gui_refactoring_intro/</guid><description>Hello World.
I&amp;rsquo;m Anirudh Murali (Trac: anirudh; IRC: anirudhm), from the southern region of India. I thank Haiku for selecting me as one of Google Summer of Code 2017 student. I&amp;rsquo;ll be working on the idea: &amp;ldquo;Preferences GUI Refactoring&amp;rdquo; this summer along with my mentors: waddlesplash and Sean Healy.
As of now, if one has to access any Preferences, a right click on the Deskbar, and accessing it with the submenu of Preferences, and still people who are new to Haiku end up selecting the wrong preferences option, atleast it happened for me.</description></item><item><title>[GSoc 2017] Adding Harfbuzz support to Haiku</title><link>https://www.haiku-os.org/blog/digib0y/2017-05-06_gsoc_2017_adding_harfbuzz_support_to_haiku/</link><pubDate>Sat, 06 May 2017 22:36:57 +0000</pubDate><guid>https://www.haiku-os.org/blog/digib0y/2017-05-06_gsoc_2017_adding_harfbuzz_support_to_haiku/</guid><description>I am Deepanshu(Trac: digib0y IRC:digib0y), I am one of the seven students selected for GSoC this year from Haiku. I will be working to add Harfbuzz support this summer.
Quick intro: I am an engineering student of Christ University, India. I am pursuing a degree in Bachelor of Technology in Computer Science and Engineering. I have been a previous Google Code-In student where I worked with Haiku for the first time, I can recall the first time I ever connected to an IRC channel during GCI 2014; it was both my interest in the GCI task and my attraction to the positive, friendly environment on #haiku that convinced me to continue working with Haiku.</description></item><item><title>[GSoC 2017] 3D Hardware Acceleration in Haiku</title><link>https://www.haiku-os.org/blog/vivek/2017-05-05_gsoc_2017_3d_hardware_acceleration_in_haiku/</link><pubDate>Fri, 05 May 2017 04:41:03 +0530</pubDate><guid>https://www.haiku-os.org/blog/vivek/2017-05-05_gsoc_2017_3d_hardware_acceleration_in_haiku/</guid><description>Hello everyone My name is Vivek (Trac: vivek-roy, IRC: vivu). I have been selected for Google Summer of Code 2017 to work with Haiku on the project 3D Hardware Acceleration in Haiku.
The Mesa renderer in Haiku presently ventures into software rendering. Haiku uses software for rendering frame buffers and then writes them to the graphics hardware. The goal of my project is to port Direct Rendering Manager (DRM) Driver for i915, from the Linux kernel to Haiku with the help of DragonflyBSD’s Linux Compatibility layer, so that those drivers can be later extended to add OpenGL support (Mesa3D) for hardware accelerated 3D rendering.</description></item><item><title>Back into Google Summer of Code</title><link>https://www.haiku-os.org/news/2017-02-27_back_into_google_summer_of_code/</link><pubDate>Mon, 27 Feb 2017 17:47:20 +0000</pubDate><guid>https://www.haiku-os.org/news/2017-02-27_back_into_google_summer_of_code/</guid><description>After a two year break, the Haiku project is proud to be part of Google Summer of Code again. Over the summer, students will work on improving Haiku and related applications, with help from our mentor team. Google gives the students a stipend, which allows them to work full-time on the project without the need to find another job.
The goal of the program is to introduce students to the way open source projects work, and encourage them to become long term contributors.</description></item><item><title>Jessica's Google Summer of Code</title><link>https://www.haiku-os.org/blog/jessicah/my-2014-google-summer-code/</link><pubDate>Sun, 02 Nov 2014 00:04:22 +0000</pubDate><guid>https://www.haiku-os.org/blog/jessicah/my-2014-google-summer-code/</guid><description>
&lt;p>This year was my first participation in the Google Summer of Code. And despite having to fail my student very early, I still managed to have some fun working with Akshay on USB3 issues.&lt;/p>
&lt;p>With UEFI making no progress during GSoC, it was time to seek out the support of some of my long-time kernel hacker friends. And with a couple days to go before leaving for the GSoC Reunion, one of them came through with phenomenal results. He had gotten the MMU and ELF loading issues mostly sorted out, and we were finally able to load and start the kernel!&lt;/p></description></item><item><title>Fundraiser for Jessica to attend GSoC Reunion</title><link>https://www.haiku-os.org/blog/umccullough/2014-09-15_fundraiser_jessica_attend_gsoc_reunion/</link><pubDate>Mon, 15 Sep 2014 16:49:15 +0000</pubDate><guid>https://www.haiku-os.org/blog/umccullough/2014-09-15_fundraiser_jessica_attend_gsoc_reunion/</guid><description>Update: Jessica raised the funds she needs, thanks to everyone who supported her!
Just a quick note to mention that Jessica Hamilton is raising money to fund a trip to this year&amp;rsquo;s GSoC Reunion. She was one of our selected mentor delegates assigned to attend.
It turns out that the reimbursements from Google are not going to be enough to cover all of her travel costs, and she otherwise can&amp;rsquo;t afford to go.</description></item><item><title>[GSoC 2014 : ARM Port] Final report</title><link>https://www.haiku-os.org/blog/dnivra/2014-08-24_gsoc_2014_arm_port_final_report/</link><pubDate>Sun, 24 Aug 2014 15:39:14 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-08-24_gsoc_2014_arm_port_final_report/</guid><description>Hello everyone,
The coding period of Google Summer of Code 2014(as well as the program itself) ended on Monday August 18, 2014. Here’s an update on the status at the end of the program. I’ve been moving over the past week and thus the delay in the update.
Over the past few weeks, I’ve been working on improving support for ARM. I added a jam target to automatically create a bootable MMC image and fix bugs in the haiku loader and also in the kernel.</description></item><item><title>[GSoC 2014 : ARM Port] Week #16</title><link>https://www.haiku-os.org/blog/dnivra/2014-08-12_gsoc_2014_arm_port_week_16/</link><pubDate>Tue, 12 Aug 2014 13:28:29 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-08-12_gsoc_2014_arm_port_week_16/</guid><description>
Hello everyone!&lt;br />
Here's a quick update for week 16. I didn't have internet access over the past few days due to a technical issue with my ISP and hence the delayed report.&lt;br />&lt;br />
TL;DR – The patch to prevent the kernel from overwriting the loader was merged last week. The next issues that need to be tackled are the KDL faulting when printing the backtrace and fixing an assertion that fails when initializing virtual memory.&lt;br />&lt;br /></description></item><item><title>[GSoC 2014 : ARM Port] Week #15</title><link>https://www.haiku-os.org/blog/dnivra/2014-08-03_gsoc_2014_arm_port_week_15/</link><pubDate>Sun, 03 Aug 2014 10:53:23 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-08-03_gsoc_2014_arm_port_week_15/</guid><description>
Hello everyone!&lt;br />
TL;DR - It was decided that reserving space for the kernel instead of moving the entire memory map to a higher location. I’ve been working on that for most of last week and I think it would take a good part of this week to complete it since I seem to be running into many issues.&lt;br />&lt;br /></description></item><item><title>[GSoC 2014 : ARM Port] Week #14</title><link>https://www.haiku-os.org/blog/dnivra/2014-07-27_gsoc_2014_arm_port_week_14/</link><pubDate>Sun, 27 Jul 2014 05:49:51 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-07-27_gsoc_2014_arm_port_week_14/</guid><description>
Hello everyone!&lt;br />
Here’s the update for week 14 of work on the Haiku ARM port. I was travelling for a good part of week 13 and thus couldn’t get much work done during the time.&lt;br />&lt;br />
TL;DR - The problems of kernel overwriting the loader code and the exceptions when setting up framebuffer have been temporarily solved. The framebuffer related code has been disabled for now and the entire memory map moved to a higher address(when FDT support is implemented, a lot of these problems probably won’t arise). Currently, a fault is raised when the kernel attempts to obtain the same lock twice, which drops to KDL.&lt;br />&lt;br /></description></item><item><title>[GSoC 2014 : ARM Port] Week #12</title><link>https://www.haiku-os.org/blog/dnivra/2014-07-12_gsoc_2014_arm_port_week_12/</link><pubDate>Sat, 12 Jul 2014 09:41:13 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-07-12_gsoc_2014_arm_port_week_12/</guid><description>
Hey everyone!&lt;br />
Here’s a quick update for week #12.&lt;br />&lt;br />
TL;DR - The decompression process fails because the archive is present in a location that isn’t mapped by the MMU and subsequently allocated for the zlib output stream. No solutions have been discussed yet. It shouldn’t be long till the kernel is running hopefully :).&lt;br />&lt;br /></description></item><item><title>[GSoC 2014 : ARM Port] Week #11</title><link>https://www.haiku-os.org/blog/dnivra/2014-07-06_gsoc_2014_arm_port_week_11/</link><pubDate>Sun, 06 Jul 2014 06:47:06 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-07-06_gsoc_2014_arm_port_week_11/</guid><description>
Hey everyone!&lt;br />
Here’s the update for week #11.
&lt;br />&lt;br />
TL;DR - Haiku faults when trying to find the floppyboot archive present in stage2 loader. There seems to be a difference in few offsets/sizes, which causes different bytes to be read every time the loader tries to detect the archive.&lt;br />&lt;br /></description></item><item><title>[GSoC 2014 : ARM Port] Week #10 (mid term update)</title><link>https://www.haiku-os.org/blog/dnivra/2014-07-01_gsoc_2014_arm_port_week_10_mid_term_update/</link><pubDate>Tue, 01 Jul 2014 06:32:15 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-07-01_gsoc_2014_arm_port_week_10_mid_term_update/</guid><description>
Hey everyone!&lt;br />
Here’s the update for week #10. Sorry about the delay in posting there - I had some issues logging into the website over past few days.&lt;br />&lt;br />
TL;DR - MMU is enabled and now working!</description></item><item><title>[GSoC 2014 : ARM Port] Week #8</title><link>https://www.haiku-os.org/blog/dnivra/2014-06-15_gsoc_2014_arm_port_week_8/</link><pubDate>Sun, 15 Jun 2014 12:16:11 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-06-15_gsoc_2014_arm_port_week_8/</guid><description>
Hey everyone!&lt;br />
The bootstrap-mmc target is now finally available! What this means is that you can follow all instructions in [1]</description></item><item><title>LibUSB Port : Quarter Term</title><link>https://www.haiku-os.org/blog/akshay1994/2014-06-11_libusb_port_quarter_term/</link><pubDate>Wed, 11 Jun 2014 10:57:39 +0000</pubDate><guid>https://www.haiku-os.org/blog/akshay1994/2014-06-11_libusb_port_quarter_term/</guid><description>
&lt;p>Hello Everyone!&lt;/p>
&lt;p>Here is an update on the port.&lt;/p></description></item><item><title>[GSoC 2014 : ARM Port] Week #7</title><link>https://www.haiku-os.org/blog/dnivra/2014-06-09_gsoc_2014_arm_port_week_7/</link><pubDate>Mon, 09 Jun 2014 04:38:55 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-06-09_gsoc_2014_arm_port_week_7/</guid><description>Hey everyone!
Just like week 6, this is another short update.
I’ve been working on creating a bootstrap-mmc target for the build system. The current issues I’m facing are
Downloading MLO and u-boot fails and thus build fails since jam doesn’t know how to create those targets otherwise. I managed to fix this but apparently, the fix breaks the current build system so I need to modify the fix such that it doesn’t break the build system.</description></item><item><title>[GSoC 2014: ARM Port] Week #6</title><link>https://www.haiku-os.org/blog/dnivra/2014-06-01_gsoc_2014_arm_port_week_6/</link><pubDate>Sun, 01 Jun 2014 10:08:04 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-06-01_gsoc_2014_arm_port_week_6/</guid><description>Hey everyone!
Here’s an update on week 6(a relatively short one so no TL;DR :) ). I managed to fix the bootable SD card image generation script that I created last week to use mtools and thus eliminate the need for losetup and root permissions. The script is available in a Github[1] repository Meanwhile, I’ve also been working on adding a bootstrap-mmc target to Jam. Right now, the target generates the haiku_loader_nbsd.</description></item><item><title>[GSoC 2014: ARM port] Week #5</title><link>https://www.haiku-os.org/blog/dnivra/2014-05-24_gsoc_2014_arm_port_week_5/</link><pubDate>Sat, 24 May 2014 06:28:27 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-05-24_gsoc_2014_arm_port_week_5/</guid><description>
Hey everyone!&lt;br />
Here’s an update on week #5.&lt;br />&lt;br />
TL;DR - I created a bootable SD card image that boots up when emulating BeagleBoard-xM in qemu. Control is passed to haiku_loader, which then crashes. A link to the necessary u-boot files and an sh compatible shell script(that generates the SD card image) is provided at the end.&lt;br />&lt;br />
&lt;b>Update: There's a better script that does not require losetup/root permissions listed in &lt;a href='../../blog/dnivra/2014-06-01_gsoc_2014_arm_port_week_6'>update for week #6.&lt;/a>&lt;/b>
&lt;br />&lt;br /></description></item><item><title>[GSoC 2014: ARM port] Week #3</title><link>https://www.haiku-os.org/blog/dnivra/2014-05-12_gsoc_2014_arm_port_week_3/</link><pubDate>Mon, 12 May 2014 09:44:00 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-05-12_gsoc_2014_arm_port_week_3/</guid><description>
Hey everyone!&lt;br />&lt;br />
Here’s an update on progress during week #3. Sorry about the delay - exams have started for me.&lt;br />&lt;br />
TL;DR - I didn’t succeed in creating the bootable SD card image since I’ve been preparing for exams. There are some instructions and probably next steps in this direction listed here. More work on this will be done after exams.&lt;br />&lt;br /></description></item><item><title>An extensive interview with Haiku developer - Paweł Dziepak.</title><link>https://www.haiku-os.org/news/2014-05-10_extensive_interview_haiku_developer_pawe%C5%82_dziepak/</link><pubDate>Sat, 10 May 2014 08:08:17 +0000</pubDate><guid>https://www.haiku-os.org/news/2014-05-10_extensive_interview_haiku_developer_pawe%C5%82_dziepak/</guid><description>&lt;p align="justify">&lt;em>I have interviewed &lt;strong>Paweł Dziepak&lt;/strong> during my private conversation with him, on polish Haiku IRC channel (&lt;strong>#haiku-pl, Freenode&lt;/strong>). We talked for two nights, on 28 and 29 of April 2014. &lt;strong>Paweł&lt;/strong> is known to the community as &lt;strong>pdziepak&lt;/strong>, I am &lt;strong>Premislaus&lt;/strong>. There are many great people involved with &lt;strong>Haiku Project&lt;/strong>, everyone is worth interviewing - I will try to do that in the future (&lt;strong>Ingo&lt;/strong>, &lt;strong>Axel&lt;/strong>, &lt;strong>Stephan&lt;/strong>, beware!). Why &lt;strong>pdziepak&lt;/strong> this time? The big role in the decision played ease of communication, since we are the same nationality, we talk pretty often with each other on IRC channel. Besides, he is an excellent programmer, engineer with vision! Despite his young age, he doesn't do mobile apps, his field of interest are kernel architectures. Unfortunately, he didn't have current photo and he said no when I proposed him to take a stylish one, either selfie or in an elevator.&lt;/em>&lt;/a>
&lt;p align="justify">&lt;em>We had deep and sincere conversation about &lt;strong>Haiku Project and Community&lt;/strong> condition. I also asked him about Open Source movement in general. The part of that I present to you below:&lt;/em>&lt;/a></description></item><item><title>[GSoC 2014: ARM port] Week #1 and #2</title><link>https://www.haiku-os.org/blog/dnivra/2014-05-04_gsoc_2014_arm_port_week_1_and_2/</link><pubDate>Sun, 04 May 2014 08:52:55 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-05-04_gsoc_2014_arm_port_week_1_and_2/</guid><description>
Hey everyone!
Here’s an update on what’s happened so far.
&lt;p>TL;DR - PulkoMandy managed to build the bootstrap image and kallisti5 has made some progress in running the image on the qemu. This is a significant progress since bootstrap image build never succeeded but not quite usable on BBB. I’ve not made much significant contribution. Instructions for building the bootstrap image are at the end. Otherwise, read on.&lt;/p></description></item><item><title>[GSoC 2014] Port of the Go programming language: introduction</title><link>https://www.haiku-os.org/blog/zhuowei/2014-04-28_gsoc_2014_port_go_programming_language_introduction/</link><pubDate>Tue, 29 Apr 2014 03:00:15 +0000</pubDate><guid>https://www.haiku-os.org/blog/zhuowei/2014-04-28_gsoc_2014_port_go_programming_language_introduction/</guid><description>
I have chosen to take up Bruno Albuquerque's suggestion of porting the reference compiler and runtime of &lt;a href="http://golang.org/">the Go programming language&lt;/a> to Haiku.</description></item><item><title>[GSoC 2014] UEFI bootloader</title><link>https://www.haiku-os.org/blog/choupy/2014-04-28_gsoc_2014_uefi_bootloader/</link><pubDate>Mon, 28 Apr 2014 15:09:50 +0000</pubDate><guid>https://www.haiku-os.org/blog/choupy/2014-04-28_gsoc_2014_uefi_bootloader/</guid><description>
&lt;h2>Me, myself and I&lt;/h2>
&lt;p>Hello everyone, my name is Louis Feuvrier, I am a french student located in
Paris (GMT+2) studying computer science at EPITA. I am lucky enough to be part
of a laboratory (LSE) as my curriculum which allows me to work on interesting
and low-level problems! Here's the one that will keep me awake at night in the
following months (but hopefully not too much!)&lt;/p>
&lt;p>Besides computer stuff, I enjoy listening to music, playing video games,
watching tv shows or going to gigs.&lt;/p></description></item><item><title>[GSoC 2014] LibUSB Port</title><link>https://www.haiku-os.org/blog/akshay1994/2014-04-28_gsoc_2014_libusb_port/</link><pubDate>Mon, 28 Apr 2014 13:24:01 +0000</pubDate><guid>https://www.haiku-os.org/blog/akshay1994/2014-04-28_gsoc_2014_libusb_port/</guid><description>
Hello Everyone!&lt;br/>
&lt;br/>
Google Summer of Code 2014 is now underway, and I am one of the four students selected to work with Haiku. My project is completing the LibUSB Port to Haiku.&lt;br/>&lt;br/></description></item><item><title>[GSoC 2014] Haiku ARM port</title><link>https://www.haiku-os.org/blog/dnivra/2014-04-24_gsoc_2014_haiku_arm_port/</link><pubDate>Thu, 24 Apr 2014 09:29:26 +0000</pubDate><guid>https://www.haiku-os.org/blog/dnivra/2014-04-24_gsoc_2014_haiku_arm_port/</guid><description>
Hello everyone!&lt;br />
Most of you know that 4 students have been chosen to work with Haiku during the Google Summer of Code(GSoC) 2014. My name is Arvind and I am one of the 4 students(yaay!). I will be improving the ARM port and hopefully make significant progress. &lt;br />&lt;br /></description></item><item><title>BFS Partition Resizer: Final Report</title><link>https://www.haiku-os.org/blog/ahenriksson/2012-09-05_bfs_partition_resizer_final_report/</link><pubDate>Wed, 05 Sep 2012 09:55:19 +0000</pubDate><guid>https://www.haiku-os.org/blog/ahenriksson/2012-09-05_bfs_partition_resizer_final_report/</guid><description>
&lt;p>
First of all, I apologize for the delay. I have now returned from my vacation,
had a few days to settle in and explain to my neighbours that I'm not dead (!).
Anyways, on to the interesting stuff.
&lt;/p>
&lt;p>
On the surface, the status of things is mostly the same as in my last report,
with a few bugs less. I thought I had dedicated more than enough time for
bugfixing, but that turned out to not be the case. This is partly due to the
slower development cycle when testing natively (compile, copy driver to image,
boot virtual machine, test, repeat), and the bugs only showing up after doing
several resizes with other IO going on. All the bugs of this kind that I know
about have been eliminated.
&lt;/p>
To summarize the things I have accomplished during the summer:
&lt;ul>
&lt;li>Resize support in BFS driver, save for vnode mapping and growing a full
file system.&lt;/li>
&lt;li>Getting the resizing "pipeline" from userspace to driver to a working
state (still needs some checking to verify that it's robust).&lt;/li>
&lt;/ul></description></item><item><title>Google Summer of Code 2012: Wrap up report</title><link>https://www.haiku-os.org/blog/mmadia/2012-08-31_google_summer_code_2012_wrap_report/</link><pubDate>Fri, 31 Aug 2012 00:41:19 +0000</pubDate><guid>https://www.haiku-os.org/blog/mmadia/2012-08-31_google_summer_code_2012_wrap_report/</guid><description>
&lt;img src="../../files/gsoc2012logo_300x200.png" alt="Google Summer of Code 2012 Logo png" border="8" align="right" />
&lt;p>
Friday, August 24th marked the end of
&lt;a href="http://www.google-melange.com/gsoc/homepage/google/gsoc2012">Google Summer of Code 2012&lt;/a>.
This was the sixth year that the Haiku project participated
and was one of 180 fellow mentoring organizations.
This year, five of 1,212 students were mentored by Haiku.
To give a frame of reference to the competitiveness in Google Summer of Code,
over 400 mentoring organizations and over 4,000 students applied to participate.
For both mentoring organizations (and students), it is an honor and pleasure
to be selected in Google Summer of Code.
&lt;/p>
&lt;p>
For those not in the know, Google Summer of Code is "a global program
that offers student developers stipends to write code for various
open source software projects". In other words, simply by being one
of the mentoring organizations, many youthful computer-savvy students
may learn about HAIKU for the first time. For a carefully selected few,
they have the opportunity to receive priority from our mentors in
teaching them how to develop software for Haiku. This is a unique opportunity,
as there is no other outreach effort of this magnitude available to the Haiku project.
&lt;/p></description></item><item><title>x86_64 port: final report</title><link>https://www.haiku-os.org/blog/xyzzy/2012-08-28_x86_64_port_final_report/</link><pubDate>Tue, 28 Aug 2012 09:57:09 +0000</pubDate><guid>https://www.haiku-os.org/blog/xyzzy/2012-08-28_x86_64_port_final_report/</guid><description>&lt;p>Since the three-quarter term report, I have continued porting userland servers and apps. The app server is fully functional, as are Deskbar and Tracker and a few other apps. I also cross-compiled all of the basic development optional packages (GCC/Binutils, autotools, make, etc.) for x86_64. Another screenshot showing the current state of things is below:&lt;/p></description></item><item><title>OpenJDK port: final report</title><link>https://www.haiku-os.org/blog/hamish/2012-08-26_openjdk_port_final_report/</link><pubDate>Sun, 26 Aug 2012 23:43:25 +0000</pubDate><guid>https://www.haiku-os.org/blog/hamish/2012-08-26_openjdk_port_final_report/</guid><description>&lt;p>Since my three-quarter term report I&amp;rsquo;ve been working on adding audio input support to the jsound port and fixing various bugs in the JDK. Since the AWT/Java2d and jsound ports are now completed, my goals for the summer have been accomplished! The OpenJDK port is now in a fairly usable state, and community members have been using it to run some large scale Swing apps such as NetBeans and ThinkFree office.&lt;/p>
&lt;p>The next thing I would like to do is merge my work in to the Haiku port repository at the OpenJDK project. From there I&amp;rsquo;d like to look into the possibility of acquiring access to the Java TCK, which will allow for comprehensive testing of the port. This will no doubt uncover many bugs and keep me busy for a while. Here are some other possible areas of expansion for the future:&lt;/p></description></item><item><title>NFSv4 client: final report</title><link>https://www.haiku-os.org/blog/pawe%C5%82_dziepak/2012-08-26_nfsv4_client_final_report/</link><pubDate>Sun, 26 Aug 2012 18:46:23 +0000</pubDate><guid>https://www.haiku-os.org/blog/pawe%C5%82_dziepak/2012-08-26_nfsv4_client_final_report/</guid><description>&lt;p>Since three quarter term I've added NFS-level support for named attributes what means that virtually all important NFS version 4 feature are now implemented, as I described them in my blog posts during the coding period. What still needs to be done is to improve support of Haiku's extended attributes and a lot of bugfixing. There is also a room for performance improvement and several possibilities to organize code in a better way.&lt;/p></description></item><item><title>NFSv4 client: three quarter term report</title><link>https://www.haiku-os.org/blog/pawe%C5%82_dziepak/2012-08-06_nfsv4_client_three_quarter_term_report/</link><pubDate>Mon, 06 Aug 2012 22:09:02 +0000</pubDate><guid>https://www.haiku-os.org/blog/pawe%C5%82_dziepak/2012-08-06_nfsv4_client_three_quarter_term_report/</guid><description>&lt;p>I&amp;rsquo;ve recently been working on caching in NFSv4 client. It was essential in order to allow the client to be comfortably used. I can gladly say that the traffic generated by NFS client has been greatly reduced, thanks to metadata, directory, lookup and file caching. I&amp;rsquo;ve also implemented support for open delegations which, though not always available, allow the client to perform virtually all file operations without immediate server participation.&lt;/p></description></item><item><title>BFS Partition Resizer: Three-quarter-term Report</title><link>https://www.haiku-os.org/blog/ahenriksson/2012-08-06_bfs_partition_resizer_threequarterterm_report/</link><pubDate>Mon, 06 Aug 2012 20:31:34 +0000</pubDate><guid>https://www.haiku-os.org/blog/ahenriksson/2012-08-06_bfs_partition_resizer_threequarterterm_report/</guid><description>For this period, I have been working on getting resizing to work from within Haiku, rather than just in bfs_shell. In its current state, the code works, sometimes, if you don't stress it too much and write data to the partition while resizing. On the bright side, recovery from various errors is working well :). In terms of functionality, the only thing missing is the ability to grow full or almost full file system.</description></item><item><title>OpenJDK port: three quarter term report</title><link>https://www.haiku-os.org/blog/hamish/2012-08-05_openjdk_port_three_quarter_term_report/</link><pubDate>Sun, 05 Aug 2012 22:03:19 +0000</pubDate><guid>https://www.haiku-os.org/blog/hamish/2012-08-05_openjdk_port_three_quarter_term_report/</guid><description>Since midterm I have been working on the jsound port, which provides audio, MIDI input/output and the ability to control mixer volume and other parameters.
After getting my head around some of the media kit concepts the implementation has gone smoothly. I implemented audio output support first, as I guessed this would be the most used component. It works well. Then I implemented MIDI input and output support. This is untested so far because I don&amp;rsquo;t have any MIDI hardware.</description></item><item><title>cpuidle: three quarter term report</title><link>https://www.haiku-os.org/blog/yongcong/2012-08-05_cpuidle_three_quarter_term_report/</link><pubDate>Sun, 05 Aug 2012 11:34:33 +0000</pubDate><guid>https://www.haiku-os.org/blog/yongcong/2012-08-05_cpuidle_three_quarter_term_report/</guid><description>I began to implement the acpi cpuidle driver so that the power saving feature can benefit all x86 platforms(In theory although). The acpi is more complicated than I thought. The main time is spent on implementing &amp;ldquo;_CST&amp;rdquo; evaluation and decoding.
First of all, to evaluate any acpi object/method needs acpi handle. Since haiku doesn&amp;rsquo;t export AcpiWalkSpace method of acpica, so after system booting, I can get the acpi processor handle. the only solution is using the device manager so that the acpi cpuidle driver can be loaded during boot.</description></item><item><title>x86_64 port: three quarter term report</title><link>https://www.haiku-os.org/blog/xyzzy/2012-08-04_x86_64_port_three_quarter_term_report/</link><pubDate>Sat, 04 Aug 2012 10:50:42 +0000</pubDate><guid>https://www.haiku-os.org/blog/xyzzy/2012-08-04_x86_64_port_three_quarter_term_report/</guid><description>&lt;p>I have continued to make good progress since my midterm report. All the kernel functionality except for user debugging is implemented, and I have ported a basic set of drivers, including PCI, disk drivers, BFS and PS/2 input. For most drivers, porting is just a matter of fixing compiler warnings. For some, there are 64-bit issues which make porting more difficult. For example, the USB stack will require a bit more work as it currently assumes that addr_t is 32-bit everywhere.&lt;/p>
&lt;p>I have also made some progress in porting userland to x86_64. I currently have libroot, libbe, bash, and most of the command line utilities ported. I have got an interactive bash shell running on top of consoled (which is usually used to run gdb on if app_server crashes).&lt;/p></description></item><item><title>Midterm Results: All students passed!</title><link>https://www.haiku-os.org/blog/mmadia/2012-07-17_midterm_results_all_students_passed/</link><pubDate>Tue, 17 Jul 2012 22:14:17 +0000</pubDate><guid>https://www.haiku-os.org/blog/mmadia/2012-07-17_midterm_results_all_students_passed/</guid><description>Over the weekend, Google processed the results for the midterm evaluations for Google Summer of Code 2012. I&amp;rsquo;m pleased to announce that all five students passed their midterm evaluations! As you may have seen, the students have been posting details on their progress and future plans on their blogs. Last month, two students even gained commit access. Alex Smith received it for Haiku&amp;rsquo;s repository and Hamish Morrison received access to OpenJDK.</description></item><item><title>OpenJDK port: midterm report</title><link>https://www.haiku-os.org/blog/hamish/2012-07-14_openjdk_port_midterm_report/</link><pubDate>Sat, 14 Jul 2012 23:47:17 +0000</pubDate><guid>https://www.haiku-os.org/blog/hamish/2012-07-14_openjdk_port_midterm_report/</guid><description>&lt;p>After my quarter term report I worked on various bugs in the AWT port reported by testers, such as keyboard input problems. I also began reading up on the media kit in preparation for the next part of my project: the jsound port. This will bring audio and MIDI functionality to the OpenJDK port. Over the last week I made a start on the implementation for PCM input/output.&lt;/p></description></item><item><title>BFS Partition Resizer: Midterm Report</title><link>https://www.haiku-os.org/blog/ahenriksson/2012-07-13_bfs_partition_resizer_midterm_report/</link><pubDate>Fri, 13 Jul 2012 16:23:40 +0000</pubDate><guid>https://www.haiku-os.org/blog/ahenriksson/2012-07-13_bfs_partition_resizer_midterm_report/</guid><description>
&lt;p>A lot of things have happened since the last status update! As far as I
can tell, the kernel part of the file system resizer is mostly complete.
Some details remain, along with a healthy dose of bugs to be fixed. In
addition, I've written a 'resizefs' command for bfs_shell. Let's look at
a typical session with the mighty resizefs!&lt;/p>
&lt;pre class="terminal">
fssh:/> resizefs 100
File system information:
Bitmap: 1 blocks (was 1)
Log start: block 2 (was 2)
Log length: 512 blocks (was 512)
Block size: 2048 bytes
Error: Not enough space left.
Status: Invalid argument
&lt;/pre></description></item><item><title>NFSv4 client: midterm report</title><link>https://www.haiku-os.org/blog/pawe%C5%82_dziepak/2012-07-11_nfsv4_client_midterm_report/</link><pubDate>Wed, 11 Jul 2012 16:58:10 +0000</pubDate><guid>https://www.haiku-os.org/blog/pawe%C5%82_dziepak/2012-07-11_nfsv4_client_midterm_report/</guid><description>&lt;p>Having implemented mandatory hooks by quarter term I had good base for implementing other operations like write, rename, create, etc. Moreover, improvements in file system migration and user ID mapping. Apart from that, file locks required most work, since they are both more complicated than other NFS operations and Haiku VFS originally did not allow the file system to handle them its own way.&lt;/p></description></item><item><title>cpuidle: midterm report</title><link>https://www.haiku-os.org/blog/yongcong/2012-07-11_cpuidle_midterm_report/</link><pubDate>Wed, 11 Jul 2012 13:04:01 +0000</pubDate><guid>https://www.haiku-os.org/blog/yongcong/2012-07-11_cpuidle_midterm_report/</guid><description>&lt;p>With the good preparation in quarter term/bonding period, I have completed the generic cpuidle kernel module, native intel cpuidle module and cpuidle driver(for states/info reporting). By original plan, these tasks will be all completed by the end of 3/4 term&amp;hellip;&lt;/p></description></item><item><title>x86_64 port: midterm report</title><link>https://www.haiku-os.org/blog/xyzzy/2012-07-11_x86_64_port_midterm_report/</link><pubDate>Wed, 11 Jul 2012 11:08:36 +0000</pubDate><guid>https://www.haiku-os.org/blog/xyzzy/2012-07-11_x86_64_port_midterm_report/</guid><description>&lt;p>Since my quarter term report I have made a great deal of progress. The boot loader x86_64 support is finished, and the kernel can now be booted to the point of searching for the boot volume. A screenshot of this:&lt;/p></description></item><item><title>BFS Partition Resizer: Quarter Term Report</title><link>https://www.haiku-os.org/blog/ahenriksson/2012-06-25_bfs_partition_resizer_quarter_term_report/</link><pubDate>Mon, 25 Jun 2012 10:58:26 +0000</pubDate><guid>https://www.haiku-os.org/blog/ahenriksson/2012-06-25_bfs_partition_resizer_quarter_term_report/</guid><description>For the 1/4 term milestone, my goal was to have inode-moving working. This is mostly completed, you can view the code at http://web.student.chalmers.se/~andrhen/move_inode_v2.patch
For this period, I have the following things planned:
Allocation of new block positions: I have a good grasp of what needs to be done for this, and it&amp;rsquo;s not a lot of work.
Moving file data: Last week I thought I had this nailed down, but it turned out to be a little more involved than that.</description></item><item><title>NFSv4 client: quarter term report</title><link>https://www.haiku-os.org/blog/pawe%C5%82_dziepak/2012-06-24_nfsv4_client_quarter_term_report/</link><pubDate>Sun, 24 Jun 2012 18:09:43 +0000</pubDate><guid>https://www.haiku-os.org/blog/pawe%C5%82_dziepak/2012-06-24_nfsv4_client_quarter_term_report/</guid><description>&lt;p>I have already implemented all mandatory hooks (and several others), what means that NFSv4 client now allows to browse directories and read files on remote filesystems. Last several days I spent on improving the existing code and supporting some less usual NFSv4 describes, that includes reclaiming share reservations, support for server migration and volatile filehandles. I also needed to deal with NFSv4 that do not provide file's inode number, that was solved only partially since proper workaround will be much easier to implement when file metadata and directory contents are cached.&lt;/p></description></item><item><title>cpuidle: quarter term report</title><link>https://www.haiku-os.org/blog/yongcong/2012-06-22_cpuidle_quarter_term_report/</link><pubDate>Fri, 22 Jun 2012 15:42:42 +0000</pubDate><guid>https://www.haiku-os.org/blog/yongcong/2012-06-22_cpuidle_quarter_term_report/</guid><description>&lt;p>I completed my 1/4 goal ahead of proposal schedule. By the original plan, I should investigate whether we need necessary changes to x86 idle routine and x86 architecture specific instruction usage. The results were reported to gsoc maillist on 3rd Jun. Here are the copied results:&lt;/p>
&lt;ol>
&lt;li>no need to change x86 idle routine&lt;/li>
&lt;li>monitor/mwait works perfectly. I have measured the power consumption when using idle implemented with &amp;ldquo;monitor/mwait&amp;rdquo;, it&amp;rsquo;s the same as the version implemented with &amp;ldquo;hlt&amp;rdquo;.&lt;/li>
&lt;/ol></description></item><item><title>x86_64 port: quarter term report</title><link>https://www.haiku-os.org/blog/xyzzy/2012-06-22_x86_64_port_quarter_term_report/</link><pubDate>Fri, 22 Jun 2012 12:27:28 +0000</pubDate><guid>https://www.haiku-os.org/blog/xyzzy/2012-06-22_x86_64_port_quarter_term_report/</guid><description>As I mentioned in my first blog post, I had exams until a couple of weeks ago, so I didn&amp;rsquo;t start working on my project properly until then. However, I am now working full time so I expect to make a lot more progress in the coming weeks.
So far I have made it possible to compile the kernel for x86_64 by adding stub implementations of all the architecture functions and fixing compilation errors/warnings (all architectures that Haiku supports at the moment are 32-bit, so there were various problems in the code when compiling for 64-bit).</description></item><item><title>OpenJDK port: quarter term report</title><link>https://www.haiku-os.org/blog/hamish/2012-06-22_openjdk_port_quarter_term_report/</link><pubDate>Fri, 22 Jun 2012 01:32:54 +0000</pubDate><guid>https://www.haiku-os.org/blog/hamish/2012-06-22_openjdk_port_quarter_term_report/</guid><description>&lt;p>Since my last blog entry I have mostly completed the implementation of the AWT/Java2D port. It is still in need of a lot of testing, but it is stable enough to run a lot of Swing apps out of the box. For example, here&amp;rsquo;s jEdit and SwingSet:&lt;/p></description></item><item><title>NFSv4 client: community bonding report</title><link>https://www.haiku-os.org/blog/pawe%C5%82_dziepak/2012-05-28_nfsv4_client_community_bonding_report/</link><pubDate>Mon, 28 May 2012 10:59:03 +0000</pubDate><guid>https://www.haiku-os.org/blog/pawe%C5%82_dziepak/2012-05-28_nfsv4_client_community_bonding_report/</guid><description>During community bonding period, apart from reading specifications, I also analyzed other NFSv4 client implementations, looking for interesting ideas and solutions. One thing I noticed which may be worth using in my NFSv4 client implementation is caching of some parts of generated RPC request.
In addition to that I also got more familiar with what Haiku expects from file system modules. I have written a very simple dummy file system and check how things work.</description></item><item><title>cpuidle: GSoC community bonding report</title><link>https://www.haiku-os.org/blog/yongcong/2012-05-27_cpuidle_gsoc_community_bonding_report/</link><pubDate>Sun, 27 May 2012 13:38:12 +0000</pubDate><guid>https://www.haiku-os.org/blog/yongcong/2012-05-27_cpuidle_gsoc_community_bonding_report/</guid><description>As we all know, cpuidle can&amp;rsquo;t save any power if cpu is wakeup frequently during idle&amp;ndash; cpu doesn&amp;rsquo;t have chance to go to deep sleep. So to get power savings, besides cpuidle support, we must remove those unnecessary wakeups.
During the bonding period, I added some code to dump system timer wakeup events and found the cpu wakeup during idle is too high, ~550 wakeup/s. Then with the help of KDL, I found one obvious wakeup source &amp;ndash; the scheduler&amp;rsquo;s quantumTimer.</description></item><item><title>OpenJDK port: community bonding report</title><link>https://www.haiku-os.org/blog/hamish/2012-05-24_openjdk_port_community_bonding_report/</link><pubDate>Thu, 24 May 2012 20:09:44 +0000</pubDate><guid>https://www.haiku-os.org/blog/hamish/2012-05-24_openjdk_port_community_bonding_report/</guid><description>&lt;p>Over the community bonding period I&amp;rsquo;ve been researching the best approach to take for the AWT port, and over the past week or two I&amp;rsquo;ve been implementing a prototype.&lt;/p>
&lt;p>AWT demands the implementation of a number of &amp;lsquo;peers&amp;rsquo; for buttons, text boxes, etc. which have historically been implemented using the native widgets of the underlying platform. The time taken to implement and maintain these peers is quite large, especially considering that these AWT widgets have been superseded by Swing and are rarely used anymore.&lt;/p>
&lt;p>An alternative implementation approach used by the &lt;a href="http://openjdk.java.net/projects/caciocavallo/">Caciocavallo project&lt;/a> involves providing native heavyweights for the windows and views and then calling on Swing to provide drawing and event handling for the various widgets. This eases the porting of AWT and reduces the amount of platform-specific code to maintain. This approach is also taken by the recent port of OpenJDK to Mac OS X.&lt;/p>
&lt;p>Over the past week or two I&amp;rsquo;ve written a prototype implementation using the Caciocavallo Swing AWT peers. It&amp;rsquo;s very incomplete thus far, but I&amp;rsquo;ve got drawing working pretty reliably, as well as some event handling including mouse input. Screenshot below the fold.&lt;/p></description></item><item><title>GSoC Introduction: BFS Partition Resizer</title><link>https://www.haiku-os.org/blog/ahenriksson/2012-04-30_gsoc_introduction_bfs_partition_resizer/</link><pubDate>Mon, 30 Apr 2012 12:43:00 +0000</pubDate><guid>https://www.haiku-os.org/blog/ahenriksson/2012-04-30_gsoc_introduction_bfs_partition_resizer/</guid><description>The goal of this project is to create code for resizing a BFS volume in a safe manner, through the existing volume resizing interface. At first utilized with a command line tool, and toward the end of the summer hopefully integrated with DriveSetup if time allows.
During the community bonding period, I want to get my development environment set up, and gain some basic familiarity with writing to disk. To accomplish that, I&amp;rsquo;m going to write a small program that can read and write sectors to the hard drive.</description></item><item><title>GSoC Introduction: NFSv4 client</title><link>https://www.haiku-os.org/blog/pawe%C5%82_dziepak/2012-04-30_gsoc_introduction_nfsv4_client/</link><pubDate>Mon, 30 Apr 2012 02:04:35 +0000</pubDate><guid>https://www.haiku-os.org/blog/pawe%C5%82_dziepak/2012-04-30_gsoc_introduction_nfsv4_client/</guid><description>My GSoC project is to implement a Network File System version 4 client. NFS since its early versions became one of the most popular way of sharing files among Unix-like (and not only) systems. The fourth version brings many changes to the protocol that both simplify implementation and make it more efficient. That includes better support of client side caching which can significantly improve performance. In addition to that neither mountd nor NLM needs to be used anymore since services they provide are now part of the protocol.</description></item><item><title>GSoC Introduction: x86_64 port</title><link>https://www.haiku-os.org/blog/xyzzy/2012-04-29_gsoc_introduction_x86_64_port/</link><pubDate>Sun, 29 Apr 2012 14:52:49 +0000</pubDate><guid>https://www.haiku-os.org/blog/xyzzy/2012-04-29_gsoc_introduction_x86_64_port/</guid><description>My name is Alex, I am a first year computer science student with a strong interest in operating systems and low-level software. My GSoC project this year is to begin a port of Haiku to the x86_64 architecture. Almost all modern x86 CPUs have 64-bit support, therefore a port of Haiku will allow it to take full advantage of these CPUs. The GSoC coding period is almost certainly too little time to finish a port of the whole OS, however my plan is to have ported at least the boot loader, kernel and some modules/drivers.</description></item><item><title>GSoC Introduction: OpenJDK port</title><link>https://www.haiku-os.org/blog/hamish/2012-04-27_gsoc_introduction_openjdk_port/</link><pubDate>Fri, 27 Apr 2012 16:38:08 +0000</pubDate><guid>https://www.haiku-os.org/blog/hamish/2012-04-27_gsoc_introduction_openjdk_port/</guid><description>My Google Summer of Code project for this year is to provide a complete port of OpenJDK 7 to Haiku. Over the past few months I've been working on putting together a bootstrapping environment for building OpenJDK on Haiku, and porting the virtual machine and core libraries. Over the summer I hope to bring the port to a mostly-complete state by adding support for AWT, Java2d and jsound. This will allow Swing and AWT-based applications to run on Haiku.</description></item><item><title>2011 Google Summer of Code Mentor Summit</title><link>https://www.haiku-os.org/blog/scottmc/2011-11-02_2011_google_summer_code_mentor_summit/</link><pubDate>Wed, 02 Nov 2011 03:12:34 +0000</pubDate><guid>https://www.haiku-os.org/blog/scottmc/2011-11-02_2011_google_summer_code_mentor_summit/</guid><description>The GSoC Mentor Summit this year happened to be the weekend before BeGeistert, which allowed Matt Madia to make it to both events. This time Haiku had four mentors make the trip. Jérôme Deval flew in from Paris, Philippe Saint-Pierre traveled in from Quebec, Matt joined us from New Jersey, and I drove down from just north of the Golden Gate Bridge. Google allows two mentors per org, plus a third if the org participated in Google Code-In last year.</description></item><item><title>Google Summer of Code 2011 Results!</title><link>https://www.haiku-os.org/news/2011-09-03_google_summer_code_2011_results/</link><pubDate>Sat, 03 Sep 2011 18:44:35 +0000</pubDate><guid>https://www.haiku-os.org/news/2011-09-03_google_summer_code_2011_results/</guid><description>
&lt;p>
&lt;em>Hot summer of code&lt;br />
Students learned a lot, had fun&lt;br />
Everyone wins!&lt;br />&lt;/em>
&lt;/p>
&lt;p>
&lt;b>Friday August 26th 2011&lt;/b> marked the end of Google Summer of Code&amp;trade; 2011 and, once again, Haiku did great with 4 out of the 8 initial students passing the final evaluation (7 were actually evaluated, 1 having unfortunately failed at midterm). The raw numbers might be a little bit deceiving, given that the fundamental goal of the program is ultimately to attract new contributors to the project; and early indications are pointing toward a success in that perspective.
&lt;/p></description></item><item><title>UVC Driver: Final Report GSoC 2011</title><link>https://www.haiku-os.org/blog/gabrielhartmann/2011-08-24_uvc_driver_final_report_gsoc_2011/</link><pubDate>Wed, 24 Aug 2011 21:53:48 +0000</pubDate><guid>https://www.haiku-os.org/blog/gabrielhartmann/2011-08-24_uvc_driver_final_report_gsoc_2011/</guid><description>The Google Summer of Code for 2011 is over now for me. The final state of the UVC driver project while very far from perfect is at least at a point where incremental improvement can be made. Literally the day (maybe 2 days, depending which timezone you&amp;rsquo;re in) before the &amp;ldquo;firm pencils down&amp;rdquo; date I finally managed to get data all the way from the camera to the screen. The decoding of that information is totally wrong at this point, but coloured pixels show up on the screen and they appear to react when things move in front of the camera.</description></item><item><title>UVC Driver -- GSoC Three-quarter-term Report</title><link>https://www.haiku-os.org/blog/gabrielhartmann/2011-08-01_uvc_driver_gsoc_threequarterterm_report/</link><pubDate>Mon, 01 Aug 2011 20:25:57 +0000</pubDate><guid>https://www.haiku-os.org/blog/gabrielhartmann/2011-08-01_uvc_driver_gsoc_threequarterterm_report/</guid><description>Not so long ago, at the half way mark of the GSoc, I was optimistic that I was near to actually interpretting data from the camera in such a way as to produce images on screen. I was successfully grabbing payload data from the camera, the camera&amp;rsquo;s in-use light was on, things were looking good. Since that point, progress has been repeatedly stalled by strange and difficult to debug behaviour.</description></item><item><title>Contacts Kit, Mid-term</title><link>https://www.haiku-os.org/blog/barrett/2011-07-19_contacts_kit_midterm/</link><pubDate>Tue, 19 Jul 2011 17:16:40 +0000</pubDate><guid>https://www.haiku-os.org/blog/barrett/2011-07-19_contacts_kit_midterm/</guid><description>From my latest post, i had to do more work on the base classes, i realized that my implementation of BContactField was too inflexible for the use so my progresses were not fast as i hoped. The main problem was to provide something that can fit the simplicity of the Person format (people files) and the complexity of VCard. The result was BContactField. Starting from a number of fields (defined in ContactDefs.</description></item><item><title>ZFS Port: Midterm Report</title><link>https://www.haiku-os.org/blog/generalmaximus/2011-07-19_zfs_port_midterm_report/</link><pubDate>Tue, 19 Jul 2011 09:44:46 +0000</pubDate><guid>https://www.haiku-os.org/blog/generalmaximus/2011-07-19_zfs_port_midterm_report/</guid><description>My midterm goal was porting libzpool -- which contains most of the ZFS code -- to Haiku. Another midterm goal was to get ztest -- the ZFS testing tool --- to run on Haiku. Being able to run ztest in a loop for an entire day means that about 80% of the ported code is working fine (though the remaining 20% is the most difficult part of the entire porting process).</description></item><item><title>UVC Driver -- GSoC Midterm Report</title><link>https://www.haiku-os.org/blog/gabrielhartmann/2011-07-10_uvc_driver_gsoc_midterm_report/</link><pubDate>Sun, 10 Jul 2011 23:31:45 +0000</pubDate><guid>https://www.haiku-os.org/blog/gabrielhartmann/2011-07-10_uvc_driver_gsoc_midterm_report/</guid><description>&lt;p>Since my last blog entry a lot of progress has been made. Currently I&amp;rsquo;m right on the cusp of actually producing images on the screen that have been captured by my camera. Successful communication is occurring between the driver and the camera in at least two different forms.&lt;/p>
&lt;p>The first form of communication to be successfully implemented involves the setting of values within the camera which affect image capture. These are the familiar brightness, contrast, sharpness etc. settings which most cameras support. Nearly all of the options available to my camera are now presented for manipulation by end-users and successfully communicated to the camera. These values are maintained within the camera between power cycles and this fact is successfully communicated to the user via the available controls. The controls can be viewed and modified in the media preferences application or the cortex demo application. ParameterWeb control documentation indicates a range of different style controls within the continuous or discrete parameter varieties. However it appears to me that the only discrete value input method currently supported with an appropriate gui interface is the binary on/off option. This is suitable for features like the auto value for white balance which can only be either on or off. However the powerline frequency setting which has three possible values was unable to be represented with the appropriate discrete control of the B_RECSTATE type which has three possible states. To simulate this capability a continuous control was modified to only allow three values which are indicated by placing the sliding control within a +/-10 range of the desired value. The slider snaps to the available values to indicate this behaviour. One future feature which would perhaps be desirable is controls with auto settings which indicate in real time by their movement what values the camera is using in its auto mode. Right now sliders are simply frozen in their last position when the auto mode is in effect. I had some brief discussion with my mentors about this feature, but it was deemed to be unnecessary at this stage as a lot of work is left to be done in actual image capture.&lt;/p></description></item><item><title>ZFS Port: Quarter Term Report</title><link>https://www.haiku-os.org/blog/generalmaximus/2011-06-17_zfs_port_quarter_term_report/</link><pubDate>Fri, 17 Jun 2011 03:32:54 +0000</pubDate><guid>https://www.haiku-os.org/blog/generalmaximus/2011-06-17_zfs_port_quarter_term_report/</guid><description>My quarter term goals for the ZFS port included porting all the libzpool dependencies to Haiku. Out of four major dependencies -- libavl, libnvpair, libuutil and libumem -- I already have two -- libavl and libnvpair -- building on Haiku. libumem and libuutil will take another few days, which puts me at least a week behind my original schedule.
I'm currently working on porting libuutil, which is presenting a few roadblocks but nothing that can't be fixed in one day's work.</description></item><item><title>Contacts Kit, Quarter-term</title><link>https://www.haiku-os.org/blog/barrett/2011-06-14_contacts_kit_quarterterm/</link><pubDate>Tue, 14 Jun 2011 22:46:45 +0000</pubDate><guid>https://www.haiku-os.org/blog/barrett/2011-06-14_contacts_kit_quarterterm/</guid><description>These weeks were prolific in terms of design and experiments but due to university commitments i am a bit late with the expected goals. At this point i have an implementation of BContact / BRawContact and i&amp;rsquo;m working to get the VCard translator functional. In these hours my focus is the communication part between the raw contacts and translators.
One of the latest design decisions was to make BRawContact own a translator that is suitable for writing the format specified by the user, otherwise it will use the default B_CONTACT_FORMAT (a flattened BMessage) for the final file.</description></item><item><title>UVC Driver -- GSoC Quarter-term Report</title><link>https://www.haiku-os.org/blog/gabrielhartmann/2011-06-13_uvc_driver_gsoc_quarterterm_report/</link><pubDate>Mon, 13 Jun 2011 20:45:16 +0000</pubDate><guid>https://www.haiku-os.org/blog/gabrielhartmann/2011-06-13_uvc_driver_gsoc_quarterterm_report/</guid><description>On June 7, I turned in my dissertation and my semester ended. On June 10, I had my first final exam. Now it&amp;rsquo;s time to produce a progress report for Haiku. Almost miraculously, I&amp;rsquo;ve actually managed to squeeze some Haiku development time in and am making progress of a kind.
The most tangible progress is mostly in the form of debug messages and crashes into Kernel debug land, but I consider anything that I do which has a measurable effect to be progress.</description></item><item><title>ZFS Port: Community Bonding Report</title><link>https://www.haiku-os.org/blog/generalmaximus/2011-05-30_zfs_port_community_bonding_report/</link><pubDate>Mon, 30 May 2011 19:39:53 +0000</pubDate><guid>https://www.haiku-os.org/blog/generalmaximus/2011-05-30_zfs_port_community_bonding_report/</guid><description>I was busy with finals throughout the Community Bonding period, which left me with little time to work on GSoC-related tasks. I still have 3 exams left with the last one being on June 7. That's when the fun starts. For now I'm merely playing with ZFS on FreeBSD on a virtual machine. I still need to make my way through at least the ZFS On-Disk Specification. Even though the information contained in this document is not strictly required for porting ZFS to Haiku, it's a useful read nonetheless.</description></item><item><title>Contacts Kit, Community Bonding Period</title><link>https://www.haiku-os.org/blog/barrett/2011-05-30_contacts_kit_community_bonding_period/</link><pubDate>Mon, 30 May 2011 11:17:14 +0000</pubDate><guid>https://www.haiku-os.org/blog/barrett/2011-05-30_contacts_kit_community_bonding_period/</guid><description>During the community bonding period, i have researched around the project to prepare my work for the coding days that will follow. I also promised to talk with the other devs in the ml, it was not necessary in these days&amp;hellip;i&amp;rsquo;m working with the help of Alex to a document describing the entire API in order to discuss it in the ml.
The first problem was to choose a Default Media Format for contact translators, my choice has been addressed to a flattened BMessage.</description></item><item><title>A USB Video Driver for High-end Webcams (GSoC Proposal)</title><link>https://www.haiku-os.org/blog/gabrielhartmann/2011-05-02_usb_video_driver_highend_webcams_gsoc_proposal/</link><pubDate>Mon, 02 May 2011 03:04:18 +0000</pubDate><guid>https://www.haiku-os.org/blog/gabrielhartmann/2011-05-02_usb_video_driver_highend_webcams_gsoc_proposal/</guid><description>&lt;p>As part of the Google Summer of Code I&amp;rsquo;ll be working on developing a driver for Haiku that allows for the use of high-end webcams. By high-end webcams I mean in this case those which adhere to the USB video device class (UVC) specification. Preliminary work will involve bringing Haiku&amp;rsquo;s support for the Enhanced Host Controller Interface (EHCI) to a point where UVC driver development proper can begin. Understanding the state of EHCI support and what work needs to be done in order to begin UVC development is my major goal for the community bonding period.&lt;/p>
&lt;p>UVC development will entail the detection and exposure of camera features via Haiku&amp;rsquo;s media kit. This will require (if I understand correctly) the production of a node with an attendant ParameterWeb which will hold the actual feature definitions. Then ideally any interested application will be able to issue commands to a UVC compliant camera and receive back appropriate responses in the form of image frames or video streams in various formats and resolutions, or status reports depending on the camera. The primary test camera will be a Logitech Quickcam Pro 9000 which supports a fairly wide range of resolutions, contains a microphone, and has a hardware button (presumably for taking still photographs). I have also noticed during the course of some computer vision research with the camera that it has what appears to be a hardware driven exposure compensation feature. There is also a similar feature exposed through the Windows Logitech driver software, but when this is turned off some exposure compensation still occurs. It will be intersting to see whether this feature is genuinely rooted in the hardware or is a result of hidden propietary Logitech software.&lt;/p></description></item><item><title>GSoC Introduction: ZFS Port</title><link>https://www.haiku-os.org/blog/generalmaximus/2011-04-30_gsoc_introduction_zfs_port/</link><pubDate>Sat, 30 Apr 2011 18:08:13 +0000</pubDate><guid>https://www.haiku-os.org/blog/generalmaximus/2011-04-30_gsoc_introduction_zfs_port/</guid><description>I'm Ankur Sethi, a 20 year old hacker from New Delhi, India. I mostly program in Python and Objective-C (on Mac OS X/iOS). This summer, I will work on porting ZFS to Haiku as part of Google Summer of Code 2011. My proposal lives here.
ZFS is a combined file system and logical volume manager built by Sun Microsystems (now Oracle) for OpenSolaris. Besides having a 'Z' in the name -- which automatically grants it +100 awesome points -- ZFS sports a feature set that will enable developers to build some incredibly neat applications on top of Haiku.</description></item><item><title>GSOC Introduction: Jrabbit, Batisseur and you</title><link>https://www.haiku-os.org/blog/jrabbit/2011-04-28_gsoc_introduction_jrabbit_batisseur_and_you/</link><pubDate>Thu, 28 Apr 2011 23:45:10 +0000</pubDate><guid>https://www.haiku-os.org/blog/jrabbit/2011-04-28_gsoc_introduction_jrabbit_batisseur_and_you/</guid><description>I'm Jack (Jrabbit). I am a python hacker. Bâtisseur is a broad system for making Haiku package development simple and quick. It will borrow concepts from OpenSuse Build and Canonical's Launchpad [Specifically Soyuz]. Some documents pertaining to it can be found in this repo. The end goal will be a modern build system for packages that can scale up or down and a system of achievements for participating in it.</description></item><item><title>2010 Google Summer of Code Mentor Summit</title><link>https://www.haiku-os.org/blog/scottmc/2010-11-02_2010_google_summer_code_mentor_summit/</link><pubDate>Tue, 02 Nov 2010 18:14:00 +0000</pubDate><guid>https://www.haiku-os.org/blog/scottmc/2010-11-02_2010_google_summer_code_mentor_summit/</guid><description>&lt;p>This year&amp;rsquo;s Google Summer of Code Mentor Summit again fell on the same weekend as BeGeistert. This year Niels was able to make the trip. Niels and I attended the summit representing Haiku. We attended some of the same sessions but split up for others. As was the case last year we met a lot of developers from the other orgs, some I had met either at last years summit or other open source events. I talked with the VLC, FFMpeg and BeagleBoard guys on Friday night. One (or more) of the beagleboard.org guys works for TI in Community Development, and was exited to hear that Haiku was working on an Arm port and suggested he may be able to hook us up with Free Hardware. We may just have to cover the taxes to get such hardware to a developer in Europe is all. I have contacted him and will post an update on this when we get a response.&lt;/p>
&lt;p>&lt;img src="../../files/screenshots/DSC_2139-1024.JPG" width="480" />&lt;br />
Here&amp;rsquo;s the group picture. &lt;a href="../../files/screenshots/DSC_2139-1024.JPG">click to see larger view&lt;/a>&lt;/p></description></item><item><title>Google Summer of Code Conclusion</title><link>https://www.haiku-os.org/blog/jvff/2010-09-21_google_summer_code_conclusion/</link><pubDate>Tue, 21 Sep 2010 01:45:26 +0000</pubDate><guid>https://www.haiku-os.org/blog/jvff/2010-09-21_google_summer_code_conclusion/</guid><description>&lt;p>Google Summer of Code 2010 is now over. It was a wonderful experience, and I learned a lot about Haiku&amp;rsquo;s internals, about file system development, and about myself. I successfully completed my proposal to a point an initial version of the Ext3 file system is available to the Haiku kernel for testing. There are some things that remain to be completed, like sparse files, proper revoke support, multi-transaction truncation and some more thorough testing, but overall, it was successful.&lt;/p></description></item><item><title>Google Summer of Code 2010: Wrap up report</title><link>https://www.haiku-os.org/news/2010-09-12_google_summer_code_2010_wrap_report/</link><pubDate>Sun, 12 Sep 2010 15:36:09 +0000</pubDate><guid>https://www.haiku-os.org/news/2010-09-12_google_summer_code_2010_wrap_report/</guid><description>
&lt;img src="../../files/gsoc2010logo-big.jpg" alt="Google Summer of Code 2010 Logo jpeg" border="8" align="right" />
&lt;p>
In the past four years, the Haiku Project has had both the honor and privilege
of being a Mentoring Organization in &lt;a href="http://socghop.appspot.com/"
>Google Summer of Code&amp;trade;&lt;/a>. This is a wonderful opportunity for the Project,
as it exposes Haiku to many potential youthful and energetic minds that are interested in developing Open Source Software. Even more exciting, it provides a unique opportunity of generating income for the Project while growing a handful of carefully selected students into knowledgeable and potential long-term contributors.
&lt;/p></description></item><item><title>Services Kit features overview</title><link>https://www.haiku-os.org/blog/shisui/2010-08-19_services_kit_features_overview/</link><pubDate>Thu, 19 Aug 2010 09:45:10 +0000</pubDate><guid>https://www.haiku-os.org/blog/shisui/2010-08-19_services_kit_features_overview/</guid><description>
&lt;p>
The coding period of the Google Summer of Code is now over since this Monday,
and it's time to give to the Haiku Community a debrief of what has been done on
my initial project, what has been modified, and what remains to do.
&lt;/p></description></item><item><title>Ext3 Journal Implementation</title><link>https://www.haiku-os.org/blog/jvff/2010-08-05_ext3_journal_implementation/</link><pubDate>Thu, 05 Aug 2010 00:49:14 +0000</pubDate><guid>https://www.haiku-os.org/blog/jvff/2010-08-05_ext3_journal_implementation/</guid><description>&lt;p>The fundamental parts of the journal code are finished. Although they still need more testing, and they can change as more of the Ext3 code is written, they are ready for supporting the first steps in write support for ext2 and ext3 volumes. This blog post explains the code, and how it is organized to handle ext2 and ext3 volumes.&lt;/p></description></item><item><title>lklhaikufs: features galore</title><link>https://www.haiku-os.org/blog/lucian/2010-07-16_lklhaikufs_features_galore/</link><pubDate>Fri, 16 Jul 2010 21:02:30 +0000</pubDate><guid>https://www.haiku-os.org/blog/lucian/2010-07-16_lklhaikufs_features_galore/</guid><description>The LKL-based Haiku driver has progressed well in the last few weeks.
The set of features already implemented:
mounting and unmounting ext3, ext4 disk images*, both read-only and read-write listing file system attributes (read-only/read-write, file system size, number of files created, number of files remaining to be created, etc.) browsing the contents of any folder on the file system listing file permissions, owner, group, type (directory, symlink, regular file, etc.</description></item><item><title>Services Kit is Going Well</title><link>https://www.haiku-os.org/blog/shisui/2010-07-11_services_kit_going_well/</link><pubDate>Sun, 11 Jul 2010 20:02:11 +0000</pubDate><guid>https://www.haiku-os.org/blog/shisui/2010-07-11_services_kit_going_well/</guid><description>
&lt;p>
It's been a month and half since the very beginning of the GSoC coding period, and this is
my first blog post about Services Kit. In fact, it's quite difficult to write interesting things
for both developers and non-developers, I waited to have some materials before writing a report of
my work and ... it's time !
&lt;/p>
&lt;p>
If you manage to build complex applications over the original BeOS Network Kit, you will quickly
face a major problem. Indeed, if it's a good C++ wrapper of the BSD sockets API, it's only a
wrapper, providing useful classes to handle a network link, but no more. Services Kit is here
to provide a more complete set of useful classes which will let developers to get rid of internet
protocols and to only think of the good part of a web service client application.
&lt;/p></description></item><item><title>Anatomy of an elf</title><link>https://www.haiku-os.org/blog/lucian/2010-07-08_anatomy_elf/</link><pubDate>Thu, 08 Jul 2010 03:30:54 +0000</pubDate><guid>https://www.haiku-os.org/blog/lucian/2010-07-08_anatomy_elf/</guid><description>
&lt;p>
Porting LKL to Haiku's kernel API may not have been very hard, but convincing Haiku to &lt;em>load&lt;/em> a properly built LKL-based add-on has presented some interesting and challenging problems.
&lt;/p></description></item><item><title>Booting LKL inside Haiku</title><link>https://www.haiku-os.org/blog/lucian/2010-07-08_booting_lkl_inside_haiku/</link><pubDate>Thu, 08 Jul 2010 01:57:52 +0000</pubDate><guid>https://www.haiku-os.org/blog/lucian/2010-07-08_booting_lkl_inside_haiku/</guid><description>
&lt;p>The first milestone in this GSoC journey to building a generic file system driver based on Linux kernel code is booting LKL (Linux Kernel Library) inside Haiku.
&lt;/p>
&lt;p>
For the short attention span: it works :)
&lt;pre>
...
KERN: KDiskDeviceManager::_AddDiskSystem() done: No error
KERN: file system: file_systems/iso9660/v1
KERN: KDiskDeviceManager::_AddDiskSystem(file_systems/iso9660/v1)
KERN: KDiskDeviceManager::_AddDiskSystem() done: No error
KERN: lklhaikufs: unhandled pheader type 0x4
KERN: file system: file_systems/lklhaikufs/v1
KERN: KDiskDeviceManager::_AddDiskSystem(file_systems/lklhaikufs/v1)
KERN: khaiku_env_timer:: LKL_TIMER_INIT
KERN: [lkl-console] Linux version 2.6.29 (gringo@lethe) (gcc version 4.4.4 (GCC) ) #10 Fri Jun 18 14:45:38 EEST 2010
KERN: [lkl-console] Built 1 zonelists in Zone order, mobility grouping on. Total pages: 16256
KERN: [lkl-console] Kernel command line:
KERN: [lkl-console] lkl: IRQs initialized
KERN: [lkl-console] PID hash table entries: 256 (order: 8, 1024 bytes)
KERN: [lkl-console] lkl: timer initialized
KERN: [lkl-console] Dentry cache hash table entries: 8192 (order: 3, 32768 bytes)
KERN: [lkl-console] Inode-cache hash table entries: 4096 (order: 2, 16384 bytes)
KERN: [lkl-console] Memory available: 64900k/65536k RAM, (862k kernel code, 270k data)
KERN: [lkl-console] Mount-cache hash table entries: 512
KERN: [lkl-console] bio: create slab &lt;bio-0> at 0
KERN: [lkl-console] io scheduler noop registered (default)
KERN: [lkl-console] lkl: syscall interface initialized
KERN: [lkl-console] console [lkl_console0] enabled
KERN: [lkl-console] Warning: unable to open an initial console.
KERN: [lkl-console] Switched to NOHz mode on CPU #0
KERN: [lkl-console] System halted.
KERN: khaiku_env_timer:: LKL_TIMER_SHUTDOWN
KERN: [lkl-console] lkl: IRQs freed
KERN: lkl: halt user callback called
KERN: KDiskDeviceManager::_AddDiskSystem() done: No error
KERN: file system: file_systems/nfs/v1
KERN: KDiskDeviceManager::_AddDiskSystem(file_systems/nfs/v1)
...
&lt;/pre>
&lt;/p>
These are messages from &lt;tt>/var/log/syslog&lt;/tt> that are generated when Haiku searches for available file system add-ons. One of those drivers is my &lt;tt>lklhaikufs&lt;/tt> driver. Messages with &lt;tt>[lkl-console]&lt;/tt> are from LKL (similar to what you see when a normal Linux kernel boots) :)</description></item><item><title>Getting haiku_loader to play nicely with elves</title><link>https://www.haiku-os.org/blog/nmentley/2010-06-19_getting_haiku_loader_play_nicely_elves/</link><pubDate>Sat, 19 Jun 2010 15:04:42 +0000</pubDate><guid>https://www.haiku-os.org/blog/nmentley/2010-06-19_getting_haiku_loader_play_nicely_elves/</guid><description>&lt;p>One of the first steps I&amp;rsquo;m taking in setting up x86_64 support for haiku is updating haiku_loader to support elf64 binaries. I felt like it would be a bit more logical to be able to boot a 64bit kernel before trying to build one.&lt;/p>
&lt;p>There are a few hurdles to jump before haiku_loader is ready to load a 64bit haiku kernel. For example, we need to add the code to detect weather a kernel is an elf32 or elf64 binary. We need to load it accordingly and finally we&amp;rsquo;ll need to modify how the kernel_args data structure is handled to support 64bit pointers.&lt;/p></description></item><item><title>Unit Testing for Fun and Profit</title><link>https://www.haiku-os.org/blog/yourpalal/2010-06-18_unit_testing_fun_and_profit/</link><pubDate>Fri, 18 Jun 2010 17:55:22 +0000</pubDate><guid>https://www.haiku-os.org/blog/yourpalal/2010-06-18_unit_testing_fun_and_profit/</guid><description>
&lt;p>
I noticed the other day that I had a comment below my &lt;a href="../../blog/yourpalal/2010-06-11_progress_layout_api">previous blog post&lt;/a>, I didn't have time to reply that day, the next day I was in bed sick, but TODAY, I can reply!
In the comment, AndrewZ asked if I could post some of my unit testing code, and I thought that would make for an interesting blog post, and here one is.
&lt;/p></description></item><item><title>Ext3 Indexed Directory Lookup</title><link>https://www.haiku-os.org/blog/jvff/2010-06-14_ext3_indexed_directory_lookup/</link><pubDate>Mon, 14 Jun 2010 15:58:53 +0000</pubDate><guid>https://www.haiku-os.org/blog/jvff/2010-06-14_ext3_indexed_directory_lookup/</guid><description>&lt;p>The first milestone of the ext3 implementation was to have read support. Since ext2 read support is already implemented, the only missing feature (as far as I can tell) for ext3 read implementation was support for indexed directories. In ext3, indexed directories use a tree structured called HTree. This tree has a fixed depth and its keys are file name hashes. Each node of the tree is a file system block inside the directory file (ie. linked by the directory i-node).&lt;/p></description></item><item><title>Progress In the Layout API</title><link>https://www.haiku-os.org/blog/yourpalal/2010-06-11_progress_layout_api/</link><pubDate>Fri, 11 Jun 2010 09:09:43 +0000</pubDate><guid>https://www.haiku-os.org/blog/yourpalal/2010-06-11_progress_layout_api/</guid><description>
&lt;p>
Here is my first blog post about my progress so far for my gsoc project, a little later than it should be, but at least it's here!
So, what have I been working on? Two things, basically: archiving with cross-references, and view-less layouts.
I've been chatting with my mentor and things are getting revised fairly quickly, so instead of writing about implementation, I'll write about the ideas and results of what I'm working on!
&lt;/p></description></item><item><title>Of DVD add-ons and media nodes</title><link>https://www.haiku-os.org/blog/engleek/2010-06-10_dvd_addons_and_media_nodes/</link><pubDate>Thu, 10 Jun 2010 14:44:02 +0000</pubDate><guid>https://www.haiku-os.org/blog/engleek/2010-06-10_dvd_addons_and_media_nodes/</guid><description>&lt;p>Extending the media kit with the ability to read DVD is a challenge, but a unique opportunity to learn about the kit architecture and Haiku software integration. This time I&amp;rsquo;ll be talking about my actual first development steps concerning DVD support.&lt;/p></description></item><item><title>First steps in DVD land</title><link>https://www.haiku-os.org/blog/engleek/2010-06-08_first_steps_dvd_land/</link><pubDate>Tue, 08 Jun 2010 10:39:21 +0000</pubDate><guid>https://www.haiku-os.org/blog/engleek/2010-06-08_first_steps_dvd_land/</guid><description>&lt;p>The first objective of this project is to give Media Player the ability to play DVD&amp;rsquo;s. Here&amp;rsquo;s a quick introduction of the tools I chose for the job.&lt;/p></description></item><item><title>GSoC: Improve and Extend Media Player</title><link>https://www.haiku-os.org/blog/engleek/2010-04-28_gsoc_improve_and_extend_media_player/</link><pubDate>Wed, 28 Apr 2010 19:24:19 +0000</pubDate><guid>https://www.haiku-os.org/blog/engleek/2010-04-28_gsoc_improve_and_extend_media_player/</guid><description>&lt;p>As an operating system with a short boot time and a small footprint, Haiku is looking very interesting for the general public.&lt;/p>
&lt;p>With WebPositive well on it&amp;rsquo;s way to becomming a great browser, users will want a great media experience to go with it.&lt;/p>
&lt;p>I propose to work on Media Player and the Media Kit, in order to improve it with new functionalities: DVD playback, streaming support, tray icon controls&amp;hellip;&lt;/p></description></item><item><title>GSoC proposal : "Creating Services Kit core elements"</title><link>https://www.haiku-os.org/blog/shisui/2010-04-28_gsoc_proposal_creating_services_kit_core_elements/</link><pubDate>Wed, 28 Apr 2010 17:03:00 +0000</pubDate><guid>https://www.haiku-os.org/blog/shisui/2010-04-28_gsoc_proposal_creating_services_kit_core_elements/</guid><description>
Haiku is currently missing a subsystem allowing application to be connected to Web 2.0, although this is becoming important relatively to the interaction between users and "the world" through the Internet. The development of the Services Kit would permits to Haiku applications to access various web services, such as micro-blogging (twitter, ...), pasting services (pastebin, pastie, ...), social networks (last.fm, ...).</description></item><item><title>GSoC: IPv6 implementation for Haiku</title><link>https://www.haiku-os.org/blog/kfx/2010-04-28_gsoc_ipv6_implementation_haiku/</link><pubDate>Wed, 28 Apr 2010 08:17:33 +0000</pubDate><guid>https://www.haiku-os.org/blog/kfx/2010-04-28_gsoc_ipv6_implementation_haiku/</guid><description>&lt;p>With the exhaustion of IPv4 addresses that is expected to happen soon, the next Internet protocol version IPv6 has become more important than ever. All major desktop operating systems (Windows, Mac OS, Linux) already have IPv6 support. The main objective of this Summer of Code project is to create an IPv6 implementation in Haiku kernel. This work will allow user-space application developers to add IPv6 support to their programs, and Haiku users to have IPv6 connectivity to the Internet or other networks.&lt;/p>
&lt;p>The full proposal follows.&lt;/p></description></item><item><title>GSoC: x86_64 Port</title><link>https://www.haiku-os.org/blog/nmentley/2010-04-28_gsoc_x86_64_port/</link><pubDate>Wed, 28 Apr 2010 03:51:45 +0000</pubDate><guid>https://www.haiku-os.org/blog/nmentley/2010-04-28_gsoc_x86_64_port/</guid><description>&lt;p>Currently Haiku is stuck in the 32bit world. This is fine for the initial BeOS R5 compatible release, but this is extremely limiting for future releases. It's a reasonable goal for Haiku to have a mature 64bit x86 port by the time the R2 release comes out. However ports don't become mature overnight. If full time work is put into porting haiku to the x86_64 platform this summer it'll be feasible to finish the port in a reasonable time to have it throughly tested and ready for the R2 release.&lt;/p>
&lt;p>My project for the GSoC is to start the Haiku x86_64 port by completely porting the kernel and modifying the bootloader to load a x86_64 haiku kernel.&lt;/p></description></item><item><title>Taking the Haiku Layout API Public</title><link>https://www.haiku-os.org/blog/yourpalal/2010-04-28_taking_haiku_layout_api_public/</link><pubDate>Wed, 28 Apr 2010 03:22:43 +0000</pubDate><guid>https://www.haiku-os.org/blog/yourpalal/2010-04-28_taking_haiku_layout_api_public/</guid><description>
&lt;p>
&lt;h4 class="icon-kernel-medium">Project Outline&lt;/h4>
My GSoC project revolves around polishing and preparing Haiku's Layout API for public consumption. Currently, this is only supposed to be used in Haiku's included applications, so third party applications must manually position and resize all their GUI elements, which can be really tedious and inflexible. I will also be modifying some Haiku-provided applications to use the Layout API, which will help me find bugs and help with Haiku's ongoing localization.
&lt;/p></description></item><item><title>My GSOC Application: Implement ext2/3 Read and Write Support for Haiku</title><link>https://www.haiku-os.org/blog/jvff/2010-04-28_my_gsoc_application_implement_ext23_read_and_write_support_haiku/</link><pubDate>Wed, 28 Apr 2010 01:04:58 +0000</pubDate><guid>https://www.haiku-os.org/blog/jvff/2010-04-28_my_gsoc_application_implement_ext23_read_and_write_support_haiku/</guid><description>&lt;p>Haiku currently has ext2 read-only support. My project is to extend the code to allow for full ext3 support. The code will be MIT licensed and will be object-oriented (inspired by Haiku&amp;rsquo;s BFS implementation), allowing for easy understanding, learning and maintainability.&lt;/p>
&lt;p>The full Google Summer of Code application follows:&lt;/p></description></item><item><title>Haiku file system drivers for any Linux supported file system</title><link>https://www.haiku-os.org/blog/lucian/2010-04-28_haiku_file_system_drivers_any_linux_supported_file_system/</link><pubDate>Wed, 28 Apr 2010 00:00:42 +0000</pubDate><guid>https://www.haiku-os.org/blog/lucian/2010-04-28_haiku_file_system_drivers_any_linux_supported_file_system/</guid><description>
&lt;p>Haiku has great support for its own file system, but most others are only available read-only or not accessible. Providing reliable read-write support to one such file system is a complex task, and needs to be repeated for each type of file system.
&lt;/p>
&lt;p>
Linux contains state of the art, full featured implementations for a large number of file systems.
&lt;/p>
&lt;p>
lkl-haiku-fsd is a generic driver based on the Linux kernel library (LKL), reusing Linux' optimized and debugged file system implementations.
&lt;/p></description></item><item><title>Seven students to be mentored by Haiku in Google Summer of Code 2010!</title><link>https://www.haiku-os.org/news/2010-04-22_seven_students_be_mentored_haiku_google_summer_code_2010/</link><pubDate>Thu, 22 Apr 2010 19:14:08 +0000</pubDate><guid>https://www.haiku-os.org/news/2010-04-22_seven_students_be_mentored_haiku_google_summer_code_2010/</guid><description>
&lt;p>
For this year's Google Summer of Code&amp;trade; program, we at Haiku have been allocated seven students!
Initially, we were allocated six students, but through a combination of good fortune and due diligence of our administrator Matthew Madia, an extra slot was allocated in the final days! In 2010, 367 mentoring orgs applied and there were 5539 proposals submitted by students.
Of those, Haiku is one of &lt;a href="http://socghop.appspot.com/gsoc/program/accepted_orgs/google/gsoc2010">152 accepted organizations&lt;/a>
and had 26 submitted proposals.
&lt;/p></description></item><item><title>Wrap-up Reports 2009 : Google Summer of Code, Haiku Code Drive</title><link>https://www.haiku-os.org/news/2009-09-20_wrapup_reports_2009_google_summer_code_haiku_code_drive/</link><pubDate>Mon, 21 Sep 2009 03:18:34 +0000</pubDate><guid>https://www.haiku-os.org/news/2009-09-20_wrapup_reports_2009_google_summer_code_haiku_code_drive/</guid><description>&lt;p>This year eight students were funded to work with Haiku during the summer months, six from Google in their &lt;a href="http://code.google.com/soc/">Google Summer of Code&lt;/a> program and two from Haiku Inc. for Haiku Code Drive. It is both my pleasure and honor to announce that overall this year has been more successful than last. Five of the six Google Summer of Code students passed, as well as one of two Haiku Code Drive students. On top of this achievement, Adrien Destugues and Bryce Groff were granted commit access for Haiku. Maxime Simon was approved by WebKit to receive commit access as well!&lt;/p>
&lt;p>Before getting into the actual results for each student, it is worth re-visiting how we got here. This is the third year in which Haiku was selected to participate in Google Summer of Code. Each year we, as an organization, strive to improve our process for both the participating students and our community. Perhaps the most significant modification was the introduction of requiring students to resolve one or more tickets in our bug tracker. The intention was to ensure each applicant had a minimal level of exposure to our project. This includes navigating and building Haiku&amp;rsquo;s source code, as well as communicating through our mailing lists and other collaboration tools. Having the requirement fairly open ended allowed the applicants to provide our mentors with initial insight to their motivation, skill, and communicative abilities. The results speak for themselves: an increased number of passing students puts the proverbial stamp of approval on this new addition to our selection process. And now for the summaries for each student&amp;hellip;&lt;/p></description></item><item><title>Locale kit : building a preflet</title><link>https://www.haiku-os.org/blog/pulkomandy/2009-08-09_locale_kit_building_preflet/</link><pubDate>Sun, 09 Aug 2009 22:15:50 +0000</pubDate><guid>https://www.haiku-os.org/blog/pulkomandy/2009-08-09_locale_kit_building_preflet/</guid><description>The end of GSoC is in less than two weeks now, so it's time to clean things up and get what I started working. I spent the previous week reading ICU documentation to understand how it worked, and this week I used this information to build the locale preflet.
This is not as simple as it looks. First, I had no experience of programming with the Interface kit so I had to learn how things worked.</description></item><item><title>Locale Kit : ICU integration on the way</title><link>https://www.haiku-os.org/blog/pulkomandy/2009-07-25_locale_kit_icu_integration_way/</link><pubDate>Sat, 25 Jul 2009 14:46:56 +0000</pubDate><guid>https://www.haiku-os.org/blog/pulkomandy/2009-07-25_locale_kit_icu_integration_way/</guid><description>&lt;p>&lt;span class="inline inline-left">&lt;a href="../../images/locale_kit_interfacing_icu">&lt;img src="../../files/screenshots/ICU_Interfacing.thumbnail.png" alt="Locale Kit Interfacing with ICU" title="Locale Kit Interfacing with ICU" class="image image-thumbnail " width="200" height="171" />&lt;/a>&lt;span class="caption" style="width: 198px;">&lt;strong>Locale Kit Interfacing with ICU&lt;/strong>&lt;/span>&lt;/span>&lt;/p>
&lt;p>This week two important things happened for my GSoC project: I got commit access to Haiku and I finished working on the catalog part. This mean I can now work more efficiently without having to send my patches trough the GSoC mailing list (you may have noticed I still need my code to be reviewed, however :/).&lt;/p>
&lt;p>The catalogs allow strings in an application to be translated. At a first glance you may think this is the only needed thing in a Locale Kit and my work is finished, but it is not the case. The first missing part is the preflet allowing you to select your favorite language. The locale kit will now always try French, if not found default to German, then finally to English. I think this is not the setup most of you want to use.&lt;/p></description></item><item><title>ZeroConf Support Progress</title><link>https://www.haiku-os.org/blog/majie/2009-07-20_zeroconf_support_progress/</link><pubDate>Mon, 20 Jul 2009 16:33:17 +0000</pubDate><guid>https://www.haiku-os.org/blog/majie/2009-07-20_zeroconf_support_progress/</guid><description>Hi guys.
Sorry for no update in the previous weeks.
I&amp;rsquo;v made some progress. mDNSResponder, which provides the underlying ZeroConf functionalities, has been ported to Haiku. It runs on Haiku correctly. In order to make it run, minor updates in our network stack were also applied.
I&amp;rsquo;m currently working on the service browser. It is almost finished. I&amp;rsquo;m also trying to write some wrapper classes so developers who need ZeroConf features can easily use them.</description></item><item><title>Locale kit: quick developer guide</title><link>https://www.haiku-os.org/blog/pulkomandy/2009-07-16_locale_kit_quick_developper_guide/</link><pubDate>Thu, 16 Jul 2009 16:36:17 +0000</pubDate><guid>https://www.haiku-os.org/blog/pulkomandy/2009-07-16_locale_kit_quick_developper_guide/</guid><description>
This week I was at the RMLL in Nantes, and I was busy showing Haiku to other people and explaining them why it was so much better than linux. I had little time for GSoC coding.
Still, I made some cleanup and fixed some small bugs. The catalog part of the locale kit is now working fine and can be used to internationalize applications.
Here is a small guide for those who want to get an application speaking in their own language.
&lt;h2>Sourcecode changes&lt;/h2>
You have to alter your source code to get it working. We've tried to make this need as little changes as possible. First, you have to #include two files : Catalog.h and Locale.h. They are system headers from the locale kit. Now you have to tell the locale kit to initialize a catalog for you. A catalog is a class that you will use to map strings to their translated equivalents. The locale kit will automatically find the right data files for you, depending on the system-wide language preferences, you application mime signature, and some other magic (see the part of this post about the build system changes). So, you only have to add two lines of code:
&lt;pre>
BCatalog cat;
be_locale->GetAppCatalog(&amp;cat);
&lt;/pre></description></item><item><title>Locale kit: cross tools, messing with jamfiles</title><link>https://www.haiku-os.org/blog/pulkomandy/2009-07-05_locale_kit_cross_tools_messing_jamfiles/</link><pubDate>Sun, 05 Jul 2009 21:29:39 +0000</pubDate><guid>https://www.haiku-os.org/blog/pulkomandy/2009-07-05_locale_kit_cross_tools_messing_jamfiles/</guid><description>This week i&amp;rsquo;ve been working on a big red post-it that was on last week&amp;rsquo;s picture. It was about wo things : make the catalog handling tools work as build tools, and test them in some special cases.
The first part took me almost the whole week. I started doing a full port of the locale kit, but noticed it would probably be too complex to do that. Instead, I started over with a simpler solution.</description></item><item><title>Locale Kit: the big picture</title><link>https://www.haiku-os.org/blog/pulkomandy/2009-06-27_locale_kit_big_picture/</link><pubDate>Sat, 27 Jun 2009 19:14:14 +0000</pubDate><guid>https://www.haiku-os.org/blog/pulkomandy/2009-06-27_locale_kit_big_picture/</guid><description>almost-UML diagram of the locale kit
This week, I finally got the plaintext catalog add on working. Then today, Oliver reviewed my work and we had a meeting on IRC. We agreed on some changes to the internal architecture of the locale kit, and also to the classes I added. Some classes in this kit have unappropriate names, and the kit was designed with zeta compatibility in mind, whereas in today&amp;rsquo;s Be-World it seems more important to focus on gettext.</description></item><item><title>Summer of Code: Progress within the first month</title><link>https://www.haiku-os.org/news/2009-06-26_summer_code_progress_within_first_month/</link><pubDate>Fri, 26 Jun 2009 18:29:35 +0000</pubDate><guid>https://www.haiku-os.org/news/2009-06-26_summer_code_progress_within_first_month/</guid><description>
&lt;div class="field field-type-text field-field-body">
&lt;div class="field-items">
&lt;div class="field-item odd">
&lt;p>There have been some exciting developments from our Google Summer of Code and Haiku Code Drive students, even though it is only the first of three month. Here's a brief summary from most of the students. Be sure to visit their blogs for additional information and the occasional screenshot.&lt;/p>
&lt;h4>Adrien Destugues&lt;/h4>
&lt;p>Lately, his work has been focusing on the catalogs for translating applications. These provide the mappings from one language to another. The initial mechanism is functional with Haiku's API and allows any application to be translated. This functionality is better explained in his &lt;a href="../../blog/pulkomandy/2009-06-19/locale_kit_somewhat_weekly_report">blog post&lt;/a>. The &lt;a href="http://icu-project.org/">International Components for Unicode&lt;/a> or simply known as "ICU" and a preflet for selecting the desired locale are other major aspects to be implemented. Amongst other features, ICU will provide the formatting conversions for date, time, monetary, and locale specific characters. Further down the road (and beyond GSoC) is an API wrapper for the gettext library, which can interface with posix applications.&lt;/p></description></item><item><title>Another week down.</title><link>https://www.haiku-os.org/blog/bebop/2009-06-22_another_week_down/</link><pubDate>Mon, 22 Jun 2009 10:10:53 +0000</pubDate><guid>https://www.haiku-os.org/blog/bebop/2009-06-22_another_week_down/</guid><description>Well another week has passed. I cannot say that to many eventful things have happened with my project. I have been working on getting all of the logic in DriveSetup to work the way I think that it should. I finally connected my development computer up to the network today though and thought I would post a screen shot. The two partitions were created with DriveSetup! Not a whole lot to look at but I pictures are always fun :)</description></item><item><title>Locale Kit: (somewhat) weekly report</title><link>https://www.haiku-os.org/blog/pulkomandy/2009-06-19_locale_kit_somewhat_weekly_report/</link><pubDate>Fri, 19 Jun 2009 18:42:41 +0000</pubDate><guid>https://www.haiku-os.org/blog/pulkomandy/2009-06-19_locale_kit_somewhat_weekly_report/</guid><description>Mid-term evaluations for GSoC are already coming&amp;hellip;
I&amp;rsquo;m still working on the catalogs for translating applications. I got the system working and integrated it into Haiku, so now any application can be translated. However, there is still a lot of work to do. I&amp;rsquo;m now working on a plaintext catalog add on.
Catalogs are the files that store translated strings. There is a catalog add-on called &amp;ldquo;default&amp;rdquo; that is used in applications.</description></item><item><title>In the beginning (or DriveSetup creation)</title><link>https://www.haiku-os.org/blog/bebop/2009-06-15_beginning_or_drivesetup_creation/</link><pubDate>Tue, 16 Jun 2009 02:08:36 +0000</pubDate><guid>https://www.haiku-os.org/blog/bebop/2009-06-15_beginning_or_drivesetup_creation/</guid><description>Another week has gone by and I am glad to say that some progress has been made. Just a few minutes ago I was able to create a brand new partition from within DriveSetup. The setup is as follows: Create a new empty Intel partition map (thanks Stippi), in that map create a new partition that spans the whole disk. It works! After that I initialized the partition with BFS and can install Haiku on it.</description></item><item><title>Progress, Style And More</title><link>https://www.haiku-os.org/blog/bebop/2009-06-05_progress_style_and_more/</link><pubDate>Sat, 06 Jun 2009 01:56:22 +0000</pubDate><guid>https://www.haiku-os.org/blog/bebop/2009-06-05_progress_style_and_more/</guid><description>First up, Progress. The GSoC program is around two and a half weeks in and I thought it would be a good time for a few words. First of all a big thanks to Google and Haiku for making the transition from school to summer easy. Last summer I got an internship in a C# shop. For the first part of the summer I was not only trying to get my head around the code base, I was also learning all the in's and out's of the .</description></item><item><title>Locale Kit: everything about catalogs and catalog add ons</title><link>https://www.haiku-os.org/blog/pulkomandy/2009-06-01_locale_kit_everything_about_catalogs_and_catalog_add_ons/</link><pubDate>Mon, 01 Jun 2009 19:52:17 +0000</pubDate><guid>https://www.haiku-os.org/blog/pulkomandy/2009-06-01_locale_kit_everything_about_catalogs_and_catalog_add_ons/</guid><description>Today I have started to write a catalog add-on to save catalogs in plain text for easy translation. I&amp;rsquo;ve spent some time looking at the involved C++ classes, and here is what I found.
A catalog is a collection of strings, stored as &amp;lt;hash,value&amp;gt; pairs. It is used in the locale kit to translate the text in an application to the system language at runtime. When an application starts, it asks the locale roster to find its catalog and return it back.</description></item><item><title>Locale Kit : status update n.2</title><link>https://www.haiku-os.org/blog/pulkomandy/2009-05-27_locale_kit_status_update_n2/</link><pubDate>Wed, 27 May 2009 11:51:14 +0000</pubDate><guid>https://www.haiku-os.org/blog/pulkomandy/2009-05-27_locale_kit_status_update_n2/</guid><description>These two weeks I&amp;rsquo;ve been quite busy with other things, so the project didn&amp;rsquo;t move as much as I wanted. However, I managed to get the catalog engine to internationalize an app for the first time. It&amp;rsquo;s not a big application, just a very simple Hello World test program. And the lack of a tool for translating catalogs means I had to edit them by hand to get the translation done.</description></item><item><title>Interviews : Google Summer of Code Applicants</title><link>https://www.haiku-os.org/news/2009-05-04_interviews_google_summer_code_applicants/</link><pubDate>Mon, 04 May 2009 14:27:51 +0000</pubDate><guid>https://www.haiku-os.org/news/2009-05-04_interviews_google_summer_code_applicants/</guid><description>
&lt;div class="field field-type-text field-field-body">
&lt;div class="field-items">
&lt;div class="field-item odd">
&lt;p>
In celebration and recognition of the hard work put in by all of this year's &lt;i>Google Summer of Code&lt;/i> applicants, several of Haiku's news sites have coordinated with each other to provide those students with an opportunity to be interviewed. These interviews will be covered by &lt;a href="http://www.beosnews.com/">BeOSNews&lt;/a>, &lt;a href="http://begroovy.com/">BeGroovy&lt;/a>, &lt;a href="http://www.haiku-gazette.de/">Haiku Gazette&lt;/a>, &lt;a href="http://www.haikuware.com/">Haikuware&lt;/a>, and &lt;a href="http://joomla.iscomputeron.com/">IsComputerOn&lt;/a>, and will be spread out over the following two weeks.
&lt;/p>
&lt;p>Update: All of the received interviews have now been posted! I would like to congratulate and thank all of the participating newsites on this extensive collaboration effort. If any additional translations become available, feel free to &lt;a href="../../user/331/contact">Contact Me&lt;/a>&lt;/p>
&lt;p>Update: IsComputerOn has conducted another interview with Alexey Burshtein&lt;/p></description></item><item><title>Locale Kit : status update n.1</title><link>https://www.haiku-os.org/blog/pulkomandy/2009-05-03_locale_kit_status_update_n1/</link><pubDate>Sun, 03 May 2009 16:34:27 +0000</pubDate><guid>https://www.haiku-os.org/blog/pulkomandy/2009-05-03_locale_kit_status_update_n1/</guid><description>The work on the Locale Kit as part of the Summer of Code has already started :) This week we have been working on proper integration of my work in the Haiku tree. So you can now checkout Haiku from svn and get the Locale Kit as part of it. Of course, some parts are still broken (or not yet written), but some of the tests seems to be already working.</description></item><item><title>GSoC 2009 Project: CIFS Client Implementation</title><link>https://www.haiku-os.org/blog/obaro_ogbo/2009-04-22_gsoc_2009_project_cifs_client_implementation/</link><pubDate>Wed, 22 Apr 2009 17:20:48 +0000</pubDate><guid>https://www.haiku-os.org/blog/obaro_ogbo/2009-04-22_gsoc_2009_project_cifs_client_implementation/</guid><description>Greetings one and all! I am Obaro Ogbo, one of the students selected for GSoC 2009. I also use the name nastee on irc and on Haiku Bug Tracker. I am a 3rd year student of Computer Science and Technology at Bells University of Technology Ota, Nigeria, and it appears I&amp;rsquo;m the first ever Nigerian GSoC student :-).
I began programming with Java, then learnt C before studying C++. I&amp;rsquo;ve done little PHP and Perl coding, however I&amp;rsquo;m learning Lisp presently.</description></item><item><title>Update DriveSetup/Disk_Device</title><link>https://www.haiku-os.org/blog/bebop/2009-04-21_update_drivesetupdisk_device/</link><pubDate>Wed, 22 Apr 2009 04:21:48 +0000</pubDate><guid>https://www.haiku-os.org/blog/bebop/2009-04-21_update_drivesetupdisk_device/</guid><description>I live in Honolulu Hawaii, I enjoy Surfing, Swimming, Sun and Code. I am working on my BS in Computer Science at the University of Hawaii at Manoa and minoring in Geography. Next year will be my senior year. I have taken courses in concurrent programming as well as networking. Next year I will be taking an operating systems course. I also have some experience in machine architecture and optimization. My current side project is writing an application for the Geography Department, that is a complete suite of tools for stereogrammetry.</description></item><item><title>Implementing ZeroConf support for Haiku with mDNSResponder</title><link>https://www.haiku-os.org/blog/majie/2009-04-21_implementing_zeroconf_support_haiku_mdnsresponder/</link><pubDate>Wed, 22 Apr 2009 03:43:33 +0000</pubDate><guid>https://www.haiku-os.org/blog/majie/2009-04-21_implementing_zeroconf_support_haiku_mdnsresponder/</guid><description>Personal Profile Ma Jie Brief bio My name is Ma Jie, And Jie is my given name. I'm a senior college student from China. Although not majored in Computer Science, I still love to do computer programming in my spare time. I have a National Computer Rank Examination certificate on computer network technology and got third prize of a national Java programming competition. The PoorMan server of Haiku is my first contribution to the open source world.</description></item><item><title>Porting Haiku to ARM architecture</title><link>https://www.haiku-os.org/blog/pfoetchen/2009-04-21_porting_haiku_arm_architecture/</link><pubDate>Tue, 21 Apr 2009 23:35:47 +0000</pubDate><guid>https://www.haiku-os.org/blog/pfoetchen/2009-04-21_porting_haiku_arm_architecture/</guid><description>Personal Profile Johannes Wischert Brief bio - I'm a computer science student living in Germany. I'm 25 years old now. I wrote my first program with 8 or 9 years or so and never stopped since then... After my studies I want to work somewhere in the embedded systems development but by now I enjoy my studies and take my time to finish. Project idea information Project title - Port the Haiku Kernel to ARM-Architecture List of project goals - generic u-boot Bootloader using the u-boot apis as far as possible to ease porting to other platforms that use u-boot Kernel that runs on the arm-processor and supports all applicable features that the x86 kernel has Device driver for at least the SD-card and the Serial-Port Working system running on a Beagleboard or similar device Project description - To get the system running on an ARM-CPU we first need a working Haiku ARM toolchain to compile the code I already got the toolchain to run and produce working binaries (tested under qemu) so this part of the system already works more or less.</description></item><item><title>Integrate WebKit in Haiku native browser, My GSoC proposal.</title><link>https://www.haiku-os.org/blog/maximesimon/2009-04-21_integrate_webkit_haiku_native_browser_my_gsoc_proposal/</link><pubDate>Tue, 21 Apr 2009 14:13:34 +0000</pubDate><guid>https://www.haiku-os.org/blog/maximesimon/2009-04-21_integrate_webkit_haiku_native_browser_my_gsoc_proposal/</guid><description>&lt;h3>Personal Profile&lt;/h3>
&lt;ul>
&lt;li>&lt;h4>Maxime Simon&lt;/h4>&lt;/li>
&lt;li>&lt;h4>Brief biography:&lt;/h4>
&lt;p>I am currently in my third year studying Computer Science at Rennes 1 University in France.&lt;/p>
&lt;p>I have some experience with development thanks to several academic projects, chiefly written using the Java and C languages.&lt;/p>
&lt;p>Our first big project used an obscure language called &amp;ldquo;oRis&amp;rdquo;, an object and agent-oriented language developed as part of the doctoral thesis of Fabrice Harrouet. The project&amp;rsquo;s objective was to design a simulation of pathfinding robots, with basic behaviour and capable of cooperating to achieve goals in a virtual maze. This project enabled us to learn how to manage a project using Subversion, and how to organise its development.
The project was managed at this page:
&lt;a href=http://code.google.com/p/csr/>&lt;a href="http://code.google.com/p/csr/">http://code.google.com/p/csr/&lt;/a>&lt;/a>&lt;/p></description></item><item><title>GSoC project : Internationalization for Haiku</title><link>https://www.haiku-os.org/blog/pulkomandy/2009-04-21_gsoc_project_internationalization_haiku/</link><pubDate>Tue, 21 Apr 2009 08:02:29 +0000</pubDate><guid>https://www.haiku-os.org/blog/pulkomandy/2009-04-21_gsoc_project_internationalization_haiku/</guid><description>Hello world ! As you know, I am one of the selected students for this year summer of code. In this post I will introduce myself and give some details about my project.
My name is Adrien Destugues, some of you may know me as PulkoMandy as i&amp;rsquo;ve been lurking on the irc channel and mailing lists for some time. I already applied for the Summer of Code and Haiku Code Drive last year but unfortunately I was not selected.</description></item><item><title>Google Allocates Six Students for Haiku in Summer of Code 2009!</title><link>https://www.haiku-os.org/news/2009-04-17_google_allocates_six_students_haiku_summer_code_2009/</link><pubDate>Sat, 18 Apr 2009 00:26:33 +0000</pubDate><guid>https://www.haiku-os.org/news/2009-04-17_google_allocates_six_students_haiku_summer_code_2009/</guid><description>
&lt;div class="field field-type-text field-field-body">
&lt;div class="field-items">
&lt;div class="field-item odd">
&lt;p>We are pleased to announce that Google has allotted us with six students for this year's Summer of Code program! This is quite an achievement, seeing as how Google accepted only 1000 students, which is about 10% less than in 2008. As with the year before, the quality of the proposals submitted by students has increased significantly. This year, students who applied to Haiku were suggested to fix an issue in our &lt;a href="http://dev.haiku-os.org">bug tracker&lt;/a>. This provided our mentors with a glimpse into the students' programming ability, as well as their ambition. Those contributions, several of which have already been committed to our SVN repository, proved to be a valuable resource when ranking the students. This allowed our mentors to strike a balance between projects that fill a need in Haiku and projects by students who have also shown themselves to be a worthy &lt;i>Google Summer of Code&lt;/i> student. These students went above and beyond our requirements and expectations. They gave us hope that come October, November, and beyond, they will still be making contributions to our community. Since retaining students as community developers is one of the goals of Summer of Code, it weighed heavily in our decision. Without further ado, here is the list of students who will be sponsored by Google to contribute to Haiku in &lt;i>Google's Summer of Code 2009&lt;/i>:&lt;/p></description></item><item><title>Haiku makes it into Google Summer of Code for third year in a row</title><link>https://www.haiku-os.org/news/2009-03-18_haiku_makes_it_google_summer_code_third_year_row/</link><pubDate>Wed, 18 Mar 2009 23:59:59 +0000</pubDate><guid>https://www.haiku-os.org/news/2009-03-18_haiku_makes_it_google_summer_code_third_year_row/</guid><description>Haiku GSoC 2009 flier (pdf &amp; hi res PNG) Haiku's application for Google Summer of Code 2009&amp;trade; has been accepted!
This year, the role of Haiku's Google Summer of Code primary administrator has been taken up by Matt Madia, with Stephan Aßmus acting as the backup administrator. Over the past few days, Google program administrators evaluated a total of 395 Mentoring organization applications and published their list of those accepted on Wednesday, March 18th 19:00 UTC.</description></item><item><title>Google Summer of Code 2008 and Haiku Code Drive harvest</title><link>https://www.haiku-os.org/news/2008-10-07_google_summer_of_code_2008_and_haiku_code_drive_harvest/</link><pubDate>Wed, 08 Oct 2008 09:18:11 +0000</pubDate><guid>https://www.haiku-os.org/news/2008-10-07_google_summer_of_code_2008_and_haiku_code_drive_harvest/</guid><description>
&lt;div class="field field-type-text field-field-body">
&lt;div class="field-items">
&lt;div class="field-item odd">
&lt;p>We're very glad that Haiku has been part of Google's Summer of Code this year again. We were granted five student projects to improve Haiku. But since we had so many good and worthwhile project proposals, we set out to start our very own Haiku Code Drive. We asked for your help in the form of donations, and we were absolutely overwhelmed by the response we got from you, our community: we were able to sponsor 4 more student projects to work on Haiku.&lt;/p>
&lt;p>Yes, of course, you know all of that already. The reason for this review is that, since both coding events are officially over by now, I wanted to give you an overview of what has happened, and how the students fared. Not all projects have been success stories, but we were lucky to have found some very talented students this year. We're glad we had you!&lt;/p></description></item><item><title>Haiku Grows Swap Support</title><link>https://www.haiku-os.org/news/2008-08-29_haiku_grows_swap_support/</link><pubDate>Fri, 29 Aug 2008 15:34:30 +0000</pubDate><guid>https://www.haiku-os.org/news/2008-08-29_haiku_grows_swap_support/</guid><description>Thanks to Google Summer of Code student Zhao Shuai successfully finishing his project Haiku does now feature support for swapping. As of revision 27233 it is enabled by default, using a swap file twice the size of the accessible RAM. The swap file size can be changed (or swap support disabled) via the VirtualMemory preferences.
Swap support finally allows building Haiku in Haiku on a box with less than about 800 MB RAM, as long as as the swap file is large enough.</description></item><item><title>Sub-pixel antialiasing report #2 [GSoC]</title><link>https://www.haiku-os.org/blog/andrej_spielmann/2008-07-23_sub_pixel_antialiasing_report_2_gsoc/</link><pubDate>Wed, 23 Jul 2008 19:00:30 +0000</pubDate><guid>https://www.haiku-os.org/blog/andrej_spielmann/2008-07-23_sub_pixel_antialiasing_report_2_gsoc/</guid><description>&lt;p>Another few weeks have passed since my last update, so here is another short report on the status of my project.
I hope everyone is enjoying the results of my work that have already been integrated into the main source trunk. Now I am pleased to announce that also the second part of my project is almost finished.&lt;/p></description></item><item><title>Sub-pixel antialiasing report #1 [GSoC]</title><link>https://www.haiku-os.org/blog/andrej_spielmann/2008-06-26_sub_pixel_antialiasing_report_1_gsoc/</link><pubDate>Thu, 26 Jun 2008 14:06:39 +0000</pubDate><guid>https://www.haiku-os.org/blog/andrej_spielmann/2008-06-26_sub_pixel_antialiasing_report_1_gsoc/</guid><description>&lt;p>The first month of GSoC coding period is almost over and it&amp;rsquo;s time for a summary.
This month wasn&amp;rsquo;t particularly easy. I was working hard to distribute my effort between Haiku and my exams accordingly. I must confess, I was probably doing more schoolwork than Haiku :-)
Nevertheless, I did make some progress and now I am very happy to announce some of the first actual results of my project!&lt;/p></description></item><item><title>Timers (GSoC) Update #1</title><link>https://www.haiku-os.org/blog/dustin_howett/2008-06-11_timers_gsoc_update_1/</link><pubDate>Wed, 11 Jun 2008 05:32:25 +0000</pubDate><guid>https://www.haiku-os.org/blog/dustin_howett/2008-06-11_timers_gsoc_update_1/</guid><description>Just posting a very brief entry to let you all know what&amp;rsquo;s up with HPET support in Haiku.
So far, I&amp;rsquo;ve been able to mostly separate all the x86 timers into individual (but still statically linked into the kernel) modules, and have them used based on priority.
Currently, they break booting on my system (qemu works, though, with the ISA timer).
Brief TODO (in no particular order):
Modify how each arch advertises which timers it supports Migrate the other arch timers into modules (low priority, since the other architectures are not fully supported, I believe) Move priority &amp; init code into the generic section, out of x86 (this can only be done when all other archs are migrated) Implement HPET support (currently stubbed out, but the module is there.</description></item><item><title>Haiku Code Drive 2008 to Sponsor Four Students</title><link>https://www.haiku-os.org/news/2008-05-30_haiku_code_drive_2008_to_sponsor_four_students/</link><pubDate>Fri, 30 May 2008 20:00:00 +0000</pubDate><guid>https://www.haiku-os.org/news/2008-05-30_haiku_code_drive_2008_to_sponsor_four_students/</guid><description>
&lt;div class="field field-type-text field-field-body">
&lt;div class="field-items">
&lt;div class="field-item odd">
&lt;p>It's official! Thanks to the incredible generosity of our community, and with a little help from Google, the Haiku Code Drive 2008 will sponsor four students, bringing the number of students that will be coding for Haiku this summer to nine. This is one more student than last year's eight sponsored by the GSoC alone! Shown below are the four selected students and their projects, in the order that the community ranked them through the &lt;a href="../../poll/2008-08-22/haiku_code_drive_2008_poll">Haiku Code Drive poll&lt;/a>:&lt;/p>
&lt;a name="bfs">&lt;/a>
&lt;p class="icon-person-medium">&lt;strong>Salvatore Benedetto:&lt;/strong> &lt;a href="../../community/haiku-code-drive-2008/projects#bfs">BFS stress-testing, UDF port to new FS Haiku API&lt;/a>&lt;/p>
&lt;a name="cups">&lt;/a>
&lt;p class="icon-person-medium">&lt;strong>Jovan Ivankovic:&lt;/strong> &lt;a href="../../community/haiku-code-drive-2008/projects#cups">CUPS port&lt;/a>&lt;/p>
&lt;a name="icmp">&lt;/a>
&lt;p class="icon-person-medium">&lt;strong>Yin Qiu:&lt;/strong> &lt;a href="../../community/haiku-code-drive-2008/projects#icmp">ICMP error handling and propagation&lt;/a>&lt;/p>
&lt;a name="dv">&lt;/a>
&lt;p class="icon-person-medium">&lt;strong>JiSheng Zhang:&lt;/strong> &lt;a href="../../community/haiku-code-drive-2008/projects#dv">DV media node&lt;/a>&lt;/p>
&lt;p>The response from the community to our call for donations to fund this program was incredible. In just two weeks, we received 120 donations from 24 countries (Australia, Austria, Belgium, Brazil, Canada, Czech Republic, Denmark, Finland, France, Germany, Hungary, Indonesia, Ireland, Italy, Lithuania, Netherlands, New Zealand, Poland, Russia, Slovakia, Sweden, Switzerland, the United Kingdom and USA), for a total of approximately $7,500. The promptness, degree of generosity, and global reach of the response by the community to the Haiku Code Drive is unprecedented in the history of our project, and hopefully a sign of things to come in the future.&lt;/p></description></item><item><title>Google Summer of Code project: Sub-pixel anti-aliasing</title><link>https://www.haiku-os.org/blog/andrej_spielmann/2008-05-14_google_summer_of_code_project_sub_pixel_anti_aliasing/</link><pubDate>Wed, 14 May 2008 23:22:41 +0000</pubDate><guid>https://www.haiku-os.org/blog/andrej_spielmann/2008-05-14_google_summer_of_code_project_sub_pixel_anti_aliasing/</guid><description>Hello Everybody!
My name is Andrej Spielmann and I am the GSoC student who will be implementing anti-aliasing based on LCD sub-pixels to Haiku’s graphics engine (App server, Painter, etc.). Stephan Assmus is going to be my mentor on this project and Oliver Ruiz Dorantes seems to be my backup mentor and an eager investigator to the Slovak language and cuisine :-)
A short introduction of myself: I was born in Slovakia (Bratislava) and I still live there during vacations.</description></item><item><title>Google Summer of Code Project: Alternate System Timers</title><link>https://www.haiku-os.org/blog/dustin_howett/2008-05-10_summer_of_code_system_timers/</link><pubDate>Sun, 11 May 2008 00:45:58 +0000</pubDate><guid>https://www.haiku-os.org/blog/dustin_howett/2008-05-10_summer_of_code_system_timers/</guid><description>Hello, Everybody! I&amp;rsquo;m Dustin, the student in the 2008 Summer of Code who is going to implement support for system timers other than the TSC in Haiku.
I&amp;rsquo;ve been actively tracking (and trying to involve myself in) Haiku&amp;rsquo;s development for a few months now, but have been passively watching it since Be, Inc. went under and OpenBeOS sprang to life. In that time, I&amp;rsquo;ve gained a basic understanding of the Be/Haiku API, and of limited parts of the Haiku kernel.</description></item><item><title>GSoc Swap File Project</title><link>https://www.haiku-os.org/blog/upczhsh/2008-05-01_gsoc_swap_file_project/</link><pubDate>Thu, 01 May 2008 05:41:01 +0000</pubDate><guid>https://www.haiku-os.org/blog/upczhsh/2008-05-01_gsoc_swap_file_project/</guid><description>Hi everyone! I am the GSoc student to implement the swap file support.
Haven&amp;rsquo;t been here for a long time since I spent a week prepareing for the school&amp;rsquo;s exam. The annoying exam ended yesterday, and now I have time to make some preparations for this summer.
I have got a basic unstanding of the Haiku vm system during the application period. In the next few days, I will investigate how paging is implemented in Linux and FreeBSD (I&amp;rsquo;ve stated doing that but was interrupted by the exam)and continue to work on my haiku vm tutorial.</description></item><item><title>Haiku Gets Five Student Slots for GSoC 2008</title><link>https://www.haiku-os.org/news/2008-04-21_haiku_gets_five_students_spots_for_gsoc_2008/</link><pubDate>Mon, 21 Apr 2008 20:42:33 +0000</pubDate><guid>https://www.haiku-os.org/news/2008-04-21_haiku_gets_five_students_spots_for_gsoc_2008/</guid><description>
&lt;div class="field field-type-text field-field-body">
&lt;div class="field-items">
&lt;div class="field-item odd">
&lt;p>After a quite intensive and challenging review and selection process, we are pleased to announce that Haiku has been assigned &lt;a href="http://code.google.com/soc/2008/haiku/about.html">five (5) student slots for the Google Summer of Code 2008&lt;/a>. This year, Google accepted many more mentor organizations than ever before, which made the allotment of students slots a lot more competitive. We also received applications of very high quality, which is definitely a blessing, but also made the Haiku mentor's task of narrowing down to a final selection much tougher. After thorough review of all the applications, and carefully taking into consideration factors such as immediate benefits for our project, the likelihood of getting long-term contributors, and the availability of an appropriate mentor for any given project, we have come up with the final list of students that will be coding for Haiku during the GSoC 2008 program. Here it is:&lt;/p></description></item><item><title>Haiku takes over Google, SoC renamed</title><link>https://www.haiku-os.org/news/2008-04-01_haiku_takes_over_google_soc_renamed/</link><pubDate>Tue, 01 Apr 2008 13:17:36 +0000</pubDate><guid>https://www.haiku-os.org/news/2008-04-01_haiku_takes_over_google_soc_renamed/</guid><description>With the help of a generous donator, Haiku, Inc. has acquired a major share of Google, Inc. and is now in the process of reorganizing Google for a major focus shift that will allow for wide distribution of Haiku R1 to OEMs. Distribution contracts have been signed with major mobile phone makers for an unprecedented availability of Phone and Handheld Integrated System Haiku (PHISH).
Also, as of this year, the Summer Of Code project is now officially renamed Summer of Assembler Poetry (SoAP).</description></item><item><title>Haiku Makes it Into Google Summer of Code 2008</title><link>https://www.haiku-os.org/news/2008-03-17_haiku_makes_it_into_google_summer_of_code_2008/</link><pubDate>Mon, 17 Mar 2008 19:09:19 +0000</pubDate><guid>https://www.haiku-os.org/news/2008-03-17_haiku_makes_it_into_google_summer_of_code_2008/</guid><description>We are very pleased to announce that, for the second straight year, Haiku has been accepted as a mentor organization for the Google Summer of Code. The student application period will start soon, so if you are a student who would like to work on a Haiku project for the GSoC 2008, please check out our List of GSoC Ideas and Students: How to Apply pages for detailed information on how to apply.</description></item><item><title>$4,000 Donation Received from Google for GSoC 2007 Participation</title><link>https://www.haiku-os.org/news/2007-11-22_4000_donation_received_google_gsoc_2007_participation/</link><pubDate>Fri, 23 Nov 2007 01:49:03 +0000</pubDate><guid>https://www.haiku-os.org/news/2007-11-22_4000_donation_received_google_gsoc_2007_participation/</guid><description>
&lt;div class="field field-type-text field-field-body">
&lt;div class="field-items">
&lt;div class="field-item odd">
&lt;p>Haiku Inc. recently received from Google a check for $4,000 for its participation in the last &lt;a href="http://code.google.com/soc/2007/">Google Summer of Code 2007&lt;/a> program. This is ten percent of the total $40,000 that Google disbursed to sponsor the &lt;a href="http://haiku-os.org/news/2007-04-11/its_official_eight_students_to_code_for_haiku_at_gsoc_2007">eight Haiku related projects&lt;/a> alloted for GSoC 2007. We want to thank Google for giving us the opportunity to participate in the program for the first time this year, and hope they will consider us again for next year.&lt;/p>
&lt;p>The Google Summer of Code is a program designed to sponsor students to work in open source projects during the three summer months. Open source software projects like Haiku apply to become mentoring organizations, and put forward projects that students from all over the world can apply for. The mentoring organizations provide mentors to guide the students throughout the program and to assist them in the successful completion of their project. For each successfully completed project, Google pays $4,500 to the student and $500 to the mentoring organization.&lt;/p></description></item><item><title>NORCAL-HUG Event: GSoC 2007 Haiku Mentor Appreciation Day</title><link>https://www.haiku-os.org/news/2007-09-30_norcal_hug_event_gsoc_2007_haiku_mentor_appreciation_day/</link><pubDate>Sun, 30 Sep 2007 23:43:18 +0000</pubDate><guid>https://www.haiku-os.org/news/2007-09-30_norcal_hug_event_gsoc_2007_haiku_mentor_appreciation_day/</guid><description>Jorge 'Koki' Mare and his fellow NorCal Haiku User Group members have graciously put together an event in honor of Stephan Aßmus, Oliver Ruiz Dorantes and myself to take place Sunday, October 7th. This will be from 1PM to 5PM at the Wild Palms Hotel in Sunnyvale, CA, where we are staying for the Google SoC Mentor Summit. If you live in the area, please check Jorge's post on the NORCAL-HUG site and sign up!</description></item><item><title>Haiku at the Google Summer of Code Mentor Summit, October 6th</title><link>https://www.haiku-os.org/news/2007-09-20_haiku_at_the_google_summer_of_code_mentor_summit_october_6th/</link><pubDate>Thu, 20 Sep 2007 23:18:20 +0000</pubDate><guid>https://www.haiku-os.org/news/2007-09-20_haiku_at_the_google_summer_of_code_mentor_summit_october_6th/</guid><description>Each year after the Summer of Code is over, Google holds an informal Mentor Summit at their Mountain View, CA office to allow mentors to meet each other and talk about their experiences in the program. This also allows Google to get first-hand suggestions on what was done right and what could be improved in the program. This year the Summit is being held on Saturday, October 6th.
I am glad to report that three Haiku mentors will be attending the Summit: Stephan Aßmus, Oliver Ruiz Dorantes and myself.</description></item><item><title>2007 Google Summer of Code Summary</title><link>https://www.haiku-os.org/news/2007-09-19_2007_google_summer_of_code_summary/</link><pubDate>Wed, 19 Sep 2007 22:31:07 +0000</pubDate><guid>https://www.haiku-os.org/news/2007-09-19_2007_google_summer_of_code_summary/</guid><description>2007 was our first year involved in the Google Summer of Code. Looking back on it, it is easy to say that it was a resounding success. We were able to handle 8 students. Work accomplished included a mostly-complete FireWire stack, major improvements in networking, and more. Click Read More for summaries of every student projects.
FireWire stack for Haiku Student: JiSheng Zhang
Mentor: Jérôme Duval
JiSheng spent his summer porting the FreeBSD Firewire stack to Haiku.</description></item><item><title>Impression about my GSoC with HAIKU and USB isochronous support status</title><link>https://www.haiku-os.org/blog/emitrax/2007-09-05_impression_about_my_gsoc_haiku_and_usb_isochronous_support_status/</link><pubDate>Wed, 05 Sep 2007 13:32:07 +0000</pubDate><guid>https://www.haiku-os.org/blog/emitrax/2007-09-05_impression_about_my_gsoc_haiku_and_usb_isochronous_support_status/</guid><description>During this summer I had the chance to improve myself, and work on the USB isochronous support of HAIKU. I wrote some code for every layer of the HAIKU USB stack: USBKit library, usb_raw driver, usb bus manager and most of all the uhci driver. I also spent/waisted some weeks with the usb_webcam media addon, but sadly with not success. Anyway here is what I did.
UHCI driver: Basically I added all the necessary code to handle isochronous transfer in both direction (in and out).</description></item><item><title>My feelings about GSOC and Firewire status</title><link>https://www.haiku-os.org/blog/absabs/2007-08-30_my_feelings_about_gsoc_and_firewire_status/</link><pubDate>Fri, 31 Aug 2007 02:36:49 +0000</pubDate><guid>https://www.haiku-os.org/blog/absabs/2007-08-30_my_feelings_about_gsoc_and_firewire_status/</guid><description>During this summer I was working under my mentor Jerome Duval&amp;rsquo;s guidance. This is the first time I tried to be part of the GSOC program.
I started reading as many documents about HAIKU as I can find before I was accepted on 11th April. I checked out the haikus&amp;rsquo;s source and built it and tested it on qemu. I was shocked by its clean and user-friendly desktop. I started reading its source after 1st May.</description></item><item><title>All is well</title><link>https://www.haiku-os.org/blog/sil2100/2007-07-19_all_is_well/</link><pubDate>Thu, 19 Jul 2007 12:15:53 +0000</pubDate><guid>https://www.haiku-os.org/blog/sil2100/2007-07-19_all_is_well/</guid><description>&lt;p>Even though I had some private issues this week, all is going well with the PackageInstall. In its current form it is able to properly install all 3 test BeOS packages I tried on it, creating files and directories along with their data and attributes without flaw. So, what&amp;rsquo;s left to do right now?&lt;/p></description></item><item><title>And those decisions lead us to...</title><link>https://www.haiku-os.org/blog/meianoite/2007-06-24_and_those_decisions_lead_us_to/</link><pubDate>Mon, 25 Jun 2007 01:21:38 +0000</pubDate><guid>https://www.haiku-os.org/blog/meianoite/2007-06-24_and_those_decisions_lead_us_to/</guid><description>&lt;p>&lt;i>(Or: knitting a delicate fabric, part II: sewing it all together)
(Or: Right, Joker, the underwear might be on the outside, but I get to drive the Batmobile!)
(Or: I just &lt;b>had&lt;/b> to say something about Batman and the Batmobile. Couldn&amp;rsquo;t help it.)&lt;/i>&lt;/p>
&lt;p>Cool, &lt;a href="../../blog/meianoite/2007-06-24/some_design_decisions">now we have&lt;/a> a space- and time-efficient data structure (which is nothing more than a nice structure to handle non-overlapping numeric ranges) we can use to implement the simplified stride scheduling thing I&amp;rsquo;ve been discussing ou the previous posts, which will remain small most of the time, and won&amp;rsquo;t change its shape like mad, so it&amp;rsquo;s also very gentle on the CPU cache. Not only that, but the same effects hold for &lt;b>any&lt;/b> trees, shall we decide that red-black trees aren&amp;rsquo;t adequate and set ourselves to use splay trees, AA trees, AVL trees, Huffman trees, unbalanced binary trees (please: &lt;b>no&lt;/b>.), whatever. So far we took care of the (not any more) skewed proportions due to randomness (by using strides), the mapping of &amp;ldquo;tickets&amp;rdquo; to tasks (by using trees to store the queues, &amp;ldquo;indexes&amp;rdquo; as the tickets, offsets to simulate &amp;ldquo;special&amp;rdquo; tickets, and lazy evaluation to efficiently implement offset propagation to upper queues), and the order of complexity (by using the queues as the node elements of the tree, where the key is base priority times number of threads in that queue).&lt;/p></description></item><item><title>Some design decisions</title><link>https://www.haiku-os.org/blog/meianoite/2007-06-24_some_design_decisions/</link><pubDate>Sun, 24 Jun 2007 22:39:30 +0000</pubDate><guid>https://www.haiku-os.org/blog/meianoite/2007-06-24_some_design_decisions/</guid><description>&lt;p>&lt;i>(Or: knitting a delicate fabric, part I: the wool&lt;a href="#note1">[1]&lt;/a>)&lt;/i>&lt;/p>
&lt;blockquote>I sincerely hope you've read &lt;a href="../../blog/meianoite/2007-06-17/introduction_to_the_new_haiku_scheduler_and_other_tidbits#disclaimer">the disclaimer&lt;/a> by now, but I guess I'd better link to it anyway :) Thanks.&lt;/blockquote>
&lt;p>I spent &lt;a href="../../blog/meianoite/2007-06-22/going_back_to_the_basics_kinda">the better part of the last post&lt;/a> explaining how simple strides would &lt;a href="https://en.wikipedia.org/wiki/Heuristic_%28computer_science%29#Heuristic_algorithms">yield an approximation&lt;/a> of the ideal shuffling of tickets. What I didn&amp;rsquo;t explain, however, was why the hell am I insisting on using tickets when strides/passes &lt;a href="../../blog/meianoite/2007-06-22/going_back_to_the_basics_kinda#stride">avoids those issues&lt;/a> completely.&lt;/p>
&lt;p>Well, the thing is, I didn&amp;rsquo;t ditch my previous attempt completely. It &lt;a href="../../blog/meianoite/2007-06-17/the_first_or_nth_even_attempt_a_cautionary_tale#flaw">had flaws&lt;/a>, but there were some gems there as well. I don&amp;rsquo;t know a single programmer who can&amp;rsquo;t recognise it&amp;rsquo;s possible to find sound ideas and really clever excerpts of code even when, on the whole, the code was crap.&lt;/p>
&lt;p>(Yes, programmers and software architects are a proud bunch of people.)&lt;/p>
&lt;p>And tickets are making a comeback, but in a very different context.&lt;/p>
&lt;p>Anyway, suppose we&amp;rsquo;re starting with a clean slate, and all we have so far are the tasks and their respective priorities. Now let&amp;rsquo;s scribble a little in that slate :)&lt;/p></description></item><item><title>Going back to the basics... kinda.</title><link>https://www.haiku-os.org/blog/meianoite/2007-06-22_going_back_to_the_basics_kinda/</link><pubDate>Fri, 22 Jun 2007 05:52:42 +0000</pubDate><guid>https://www.haiku-os.org/blog/meianoite/2007-06-22_going_back_to_the_basics_kinda/</guid><description>&lt;p>&lt;i>(Or: what you finally learn to do after a number of false starts)&lt;/i>&lt;/p>
&lt;blockquote>But first, the obligatory &lt;a href="../../blog/meianoite/2007-06-17/introduction_to_the_new_haiku_scheduler_and_other_tidbits#disclaimer">disclaimer&lt;/a>, in case you missed it. Thanks.&lt;/blockquote>
&lt;p>After I admitted the &lt;a href="../../blog/meianoite/2007-06-17/the_first_or_nth_even_attempt_a_cautionary_tale#flaw">basic flaws&lt;/a> of my previous attempts, I decided to go back to the basics and use a &amp;ldquo;bottom-up&amp;rdquo; approach to come up with a solution that suited the needs of the Haiku scheduler: fairness, responsiveness, responsive, scalability, succinctness and efficiency.&lt;/p>
&lt;p>Right. So let&amp;rsquo;s keep in mind that the BeBook &lt;a href="http://www.beunited.org/bebook/The%20Kernel%20Kit/Threads.html#set_thread_priority()">already hints&lt;/a> at what the priority numbers should roughly mean: frequency of scheduling. We have &lt;a href="http://svn.berlios.de/viewcvs/haiku/haiku/trunk/headers/os/kernel/OS.h?view=markup">120 priority levels&lt;/a>; the higher 20 are reserved to real-time threads.&lt;/p>
&lt;p>This post is not going to address these directly. Instead, today I&amp;rsquo;ll be telling the background story of how quite a number of pieces are being woven together to fulfill those specific needs and constraints. OK, enough metablogging ;)&lt;/p>
&lt;p>After &lt;a href="../../blog/meianoite/2007-06-17/the_first_or_nth_even_attempt_a_cautionary_tale#polishing">letting go of the previous approach&lt;/a>, I decided to study the subject on the very traditional literature about it. And while I was studying classic scheduler approaches on the Minix book, I noticed that the description of lottery-based scheduling was very compatible with that description of priorities meaning approximate frequency of being chosen by the scheduler. Lottery scheduling was &lt;a href="http://www.waldspurger.org/carl/research.html">proposed by Carl Waldspurger&lt;/a> in 1994, and it works roughly like this&lt;a href="#note1" name="lottery">[1]&lt;/a>:&lt;/p></description></item><item><title>The first (or nth, even) attempt: a cautionary tale</title><link>https://www.haiku-os.org/blog/meianoite/2007-06-17_the_first_or_nth_even_attempt_a_cautionary_tale/</link><pubDate>Sun, 17 Jun 2007 22:27:44 +0000</pubDate><guid>https://www.haiku-os.org/blog/meianoite/2007-06-17_the_first_or_nth_even_attempt_a_cautionary_tale/</guid><description>&lt;p>&lt;i>(Or: rose-coloured glasses are both the blessing and the curse of being in love)&lt;/i>&lt;/p>
&lt;blockquote>But first, the obligatory &lt;a href="../../blog/meianoite/2007-06-17/introduction_to_the_new_haiku_scheduler_and_other_tidbits#disclaimer">disclaimer&lt;/a>, in case you missed it. Thanks.&lt;/blockquote>
&lt;p>Remember where I left &lt;a href="../../blog/meianoite/2007-06-17/introduction_to_the_new_haiku_scheduler_and_other_tidbits#bench">on the previous post&lt;/a>? Now, with greater confidence, I set myself to improve my original algorithm&amp;rsquo;s performance even further. But that&amp;rsquo;s just because I &lt;b>knew&lt;/b> it sucked. It was extremely inefficient as far as implementation goes; it looked great in the benchmarks because it was being compared to O(n) (&lt;i>n&lt;/i> being the number of threads in the system) algorithms, while it had O(1) complexity, so I already had a head-start, so to speak. Still, I knew the algorithm very well and understood that there were plenty of bottlenecks to fix. I wrote it, after all.&lt;/p>
&lt;p>[/pride mode=off]&lt;/p></description></item><item><title>Introduction to the new Haiku scheduler, and other tidbits</title><link>https://www.haiku-os.org/blog/meianoite/2007-06-17_introduction_to_the_new_haiku_scheduler_and_other_tidbits/</link><pubDate>Sun, 17 Jun 2007 21:33:50 +0000</pubDate><guid>https://www.haiku-os.org/blog/meianoite/2007-06-17_introduction_to_the_new_haiku_scheduler_and_other_tidbits/</guid><description>&lt;p>Hi, folks!&lt;/p>
&lt;p>For those who don&amp;rsquo;t know me (or my GSoC assignment) already, I&amp;rsquo;m the one assigned to &lt;a href="https://dev.haiku-os.org/ticket/1069">ticket #1069&lt;/a>, namely:&lt;/p>
&lt;blockquote>Create an O(1) thread scheduler with CPU affinity and soft real-time support which targets desktop responsiveness.&lt;/blockquote>
&lt;p>I&amp;rsquo;d like to dedicate my next few blog entries to introducing myself and discussing how I got here, why I wanted to tackle this specific task, what background I have regarding the subject of thread scheduling, how I failed miserably to realise that my first attempt at designing an algorithm suitable for Haiku&amp;rsquo;s needs had fundamental flaws, how far I am at my second attempt, and the obligatory comparison to &lt;a href="http://people.redhat.com/mingo/cfs-scheduler/sched-design-CFS.txt">Ingo Molnár&amp;rsquo;s Completely Fair Scheduler&lt;/a> that has been making the news in the Linux world.&lt;/p></description></item><item><title>UHCI isochronous support half done</title><link>https://www.haiku-os.org/blog/emitrax/2007-06-09_uhci_isochronous_support_half_done/</link><pubDate>Sat, 09 Jun 2007 21:29:54 +0000</pubDate><guid>https://www.haiku-os.org/blog/emitrax/2007-06-09_uhci_isochronous_support_half_done/</guid><description>Actually is more than half. This quick post is just to inform you that I wrote the part that schedule an isochronous request in the UHCI driver. I&amp;rsquo;ve already sent the patch to Michael for his review. The only part that is missing is the code that remove the request once it has been processed or canceled, which is not as trivial as I thought.</description></item><item><title>The Package format</title><link>https://www.haiku-os.org/blog/sil2100/2007-06-08_the_package_format/</link><pubDate>Fri, 08 Jun 2007 17:07:24 +0000</pubDate><guid>https://www.haiku-os.org/blog/sil2100/2007-06-08_the_package_format/</guid><description>Personal rant: my university examination session draws near and with it all credit tests as well. I&amp;rsquo;m doing my best in time management not to put any of my current tasks and projects into starvation, but exactly as Ryan wrote to me - it&amp;rsquo;s not easy.
Going back to more Haiku-specific topics, last week I was mostly analyzing the .pkg format Be Inc. left us behind. After some tests, most crucial parts of it are clear to me now.</description></item><item><title>Today is May 28^_^</title><link>https://www.haiku-os.org/blog/absabs/2007-05-27_today_is_may_28/</link><pubDate>Mon, 28 May 2007 02:23:31 +0000</pubDate><guid>https://www.haiku-os.org/blog/absabs/2007-05-27_today_is_may_28/</guid><description>Hi all,
My name is JiSheng Zhang. I come from China. I am one of the Haiku&amp;rsquo;s GSOC2007 students. My work is implementing a FireWire stack with support for mass storage and DV cams. I plan to port the FreeBSD FireWire stack. I will do my development under debian.
After google anouncement on April 11, I spent time in building Haiku, running on the real PC and reading the source code of haiku&amp;rsquo;s PCI and SCSI sub system and other code about driver writing.</description></item><item><title>Popular Network Preferences applications and comments.</title><link>https://www.haiku-os.org/blog/soapdog/2007-05-06_popular_network_preferences_applications_and_comments/</link><pubDate>Sun, 06 May 2007 20:56:13 +0000</pubDate><guid>https://www.haiku-os.org/blog/soapdog/2007-05-06_popular_network_preferences_applications_and_comments/</guid><description>&lt;p>The idea today is to compare and comment on popular network preferences apps. I&amp;rsquo;ll pick Mac OS X, Windows, Zeta and Linux and comment on what we can learn from each and think about how can we design a successful network preferences application for Haiku. I will not focus on the eye candy or widgets, the focus is on the user experience and features.&lt;/p>
&lt;p>Lots of shots of different OSes and some opinions by yours truly.&lt;/p></description></item><item><title>UHCI Driver</title><link>https://www.haiku-os.org/blog/emitrax/2007-04-29_uhci_driver/</link><pubDate>Sun, 29 Apr 2007 22:10:05 +0000</pubDate><guid>https://www.haiku-os.org/blog/emitrax/2007-04-29_uhci_driver/</guid><description>After reading the main part of the USB specs, I moved on to the UHCI driver specs this week-end. I can now say, that implementing the isochronous part to the UHCI driver is a lot easier than I thought, and I guess Micheal can confirm. While reading the UHCI specs I followed Micheal&amp;rsquo;s code, and I have some questions about it, but I&amp;rsquo;ll write him an email for that. By the way, is R1 intended only for x86?</description></item><item><title>Getting Started</title><link>https://www.haiku-os.org/blog/soapdog/2007-04-29_getting_started/</link><pubDate>Sun, 29 Apr 2007 19:53:00 +0000</pubDate><guid>https://www.haiku-os.org/blog/soapdog/2007-04-29_getting_started/</guid><description>Hello All,
My name is Andre Garzia and I live in Brazil. I am one of the summer of code students that will be working with Haiku. My project is the Network Preferences Application. I do most of my work on macs, most of my work is related to custom servers or web apps. I have a hobby which is to collect operating systems and machines and network them all. Right now I have couple macs (both classic and mac os x), linux, solaris, zeta, haiku, windows mobile, newtons and a magic cap machine, all networked, so I&amp;rsquo;ve felt the pain and joy of configuring different kinds of machines with different needs.</description></item><item><title>It's Official: Eight Students to Code for Haiku at GSoC 2007</title><link>https://www.haiku-os.org/news/2007-04-11_its_official_eight_students_to_code_for_haiku_at_gsoc_2007/</link><pubDate>Thu, 12 Apr 2007 02:10:44 +0000</pubDate><guid>https://www.haiku-os.org/news/2007-04-11_its_official_eight_students_to_code_for_haiku_at_gsoc_2007/</guid><description>Google has given their final word, and we are now pleased to announce that Haiku has been assigned 8 student slots for the Google Summer of Code 2007, which is one more than we had initially hoped for. Here is a list of the accepted applications, also as a way of introduction of the eight students that were selected from a total of 42 applications.
Update: Added usernames and linked to user's page.</description></item><item><title>Google Summer of Code 2007: Update</title><link>https://www.haiku-os.org/news/2007-03-27_google_summer_of_code_2007_update/</link><pubDate>Sun, 08 Apr 2007 11:00:00 +0000</pubDate><guid>https://www.haiku-os.org/news/2007-03-27_google_summer_of_code_2007_update/</guid><description>
&lt;div class="field field-type-text field-field-body">
&lt;div class="field-items">
&lt;div class="field-item odd">
&lt;span class="inline right">&lt;a href="../../" onclick="launch_popup(1628, 1024, 768); return false;" target="_blank">&lt;img src="http://haiku-os.org/files/screenshots/shot_haiku_nfs_002_working.thumbnail.png" alt="Playing an MP3 over NFS on Haiku" title="Playing an MP3 over NFS on Haiku" class="image thumbnail" height="150" width="200">&lt;/a>&lt;span class="caption" style="width: 198px;">&lt;strong>Playing an MP3 over NFS on Haiku&lt;/strong>&lt;/span>&lt;/span>
&lt;p>Yesterday, Google has assigned 7 preliminary student slots to us, which is as many as we wanted to have. Haiku would like thank all the students that have applied for projects and those that have assisted in this step of the program. Overall, we received 42 student applications. In the next days we will finalize the list of accepted student projects for Haiku.&lt;/p></description></item><item><title>Extended Deadline for GSoC 2007 Applications (Updated)</title><link>https://www.haiku-os.org/news/2007-03-25_extended_deadline_for_google_soc_2007_applications/</link><pubDate>Sat, 24 Mar 2007 05:00:00 +0000</pubDate><guid>https://www.haiku-os.org/news/2007-03-25_extended_deadline_for_google_soc_2007_applications/</guid><description> Google has extended the student application deadline for Google Summer of Code 2007 to 12:00 AM UTC on March 27, 2007. Students that are still interested in working on a project for Haiku are urged to finish their application and get it in by the new deadline.</description></item><item><title>Google Summer of Code 2007: We Are In!</title><link>https://www.haiku-os.org/news/2007-03-15_google_summer_of_code_2007_we_are_in/</link><pubDate>Thu, 15 Mar 2007 11:37:11 +0000</pubDate><guid>https://www.haiku-os.org/news/2007-03-15_google_summer_of_code_2007_we_are_in/</guid><description>We are pleased and at the same time thrilled to inform the community that Google has accepted our application to become a mentor organization for the Google Summer of Code 2007. Yes, we have made it! Students now have until March 24 to apply for any of our project ideas from the GSoC Web App for Student Applicants. If you are a student and are interested in working on one of our project ideas, please check out our List of GSoC Ideas and Students: How to Apply pages for detailed information.</description></item><item><title>Google Summer of Code 2007 Drive</title><link>https://www.haiku-os.org/news/2007-03-03_google_summer_of_code_2007_drive/</link><pubDate>Sat, 03 Mar 2007 08:32:50 +0000</pubDate><guid>https://www.haiku-os.org/news/2007-03-03_google_summer_of_code_2007_drive/</guid><description>The application period for the Google Summer of Code 2007 is close, and as Haiku prepares to submit its application to attempt becoming a mentor organization, we are initiating a drive with the goal engaging the Haiku community at large. We will be submitting our application on March 5th or 6th, and expect to know whether our application has been accepted on March 14th, the day that Google is scheduled to announce the accepted mentoring organizations on code.</description></item></channel></rss>