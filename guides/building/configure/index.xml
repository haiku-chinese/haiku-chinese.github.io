<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Configure Options on Haiku Project</title><link>https://www.haiku-os.org/guides/building/configure/</link><description>Recent content in Configure Options on Haiku Project</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2001-2021 Haiku Inc.</copyright><lastBuildDate>Tue, 16 Feb 2010 00:03:10 +0000</lastBuildDate><atom:link href="https://www.haiku-os.org/guides/building/configure/index.xml" rel="self" type="application/rss+xml"/><item><title>Native Extended Attributes and Cross-Compiling Haiku</title><link>https://www.haiku-os.org/guides/building/configure/use-xattr/</link><pubDate>Mon, 15 Feb 2010 23:19:09 +0000</pubDate><guid>https://www.haiku-os.org/guides/building/configure/use-xattr/</guid><description>Due to the various ways that extended attributes are implemented in various file systems, some will present issues that need to be considered and others will simply be unusable. This page aims to clarify which file systems have extended attribute implementations compatible enough with Haiku&amp;rsquo;s that they can be utilized during cross-builds.
Note that configure auto-detects the extended attribute capabilites of the filesystem you have asked it to configure a build on, and will automatically select &amp;ldquo;full&amp;rdquo;, &amp;ldquo;ref&amp;rdquo;, or no usage at all based on the filesystem&amp;rsquo;s capabilites.</description></item><item><title>Building from a Non-Standard Object Directory</title><link>https://www.haiku-os.org/guides/building/configure/different-generated/</link><pubDate>Mon, 04 May 2009 00:54:24 +0000</pubDate><guid>https://www.haiku-os.org/guides/building/configure/different-generated/</guid><description>Like many other software projects, Haiku allows a user to run configure from a directory outside of the source tree. This will cause the build system to use that current directory as the target location for storing the output from compiling, otherwise known as objects.
There are a few reasons for doing this. Multiple products, such as x86_gcc7, x86_gcc2, or arm can all be built from the same source tree, which reduces disk space usage.</description></item></channel></rss>